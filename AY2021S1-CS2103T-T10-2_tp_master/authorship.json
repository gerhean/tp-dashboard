[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T10-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T10-2/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T10-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T10-2/tp)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "# TR4CKER"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "What does TR4CKER do?"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* TR4CKER is a Task Manager that helps busy students keep track of tasks and keep up with upcoming deadlines."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* With TR4CKER, you will never forget a task as it will remind you of your most urgent task with the nearest deadline."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* TR4CKER also keeps track of the overall progress of your tasks to improve your productivity."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* Interact with soccat in the User Interface as well as try to keep it healthy by completing tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "### Links"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "[Team Website](https://ay2021s1-cs2103t-t10-2.github.io/tp/)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "### Acknowledgements"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "ruilingk": 2,
      "hanweic53": 10,
      "cwenling": 2,
      "-": 4
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "run {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "mainClassName \u003d \u0027seedu.tr4cker.Main\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    archiveName \u003d \u0027tr4cker.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 5,
      "hanweic53": 1,
      "cwenling": 1,
      "-": 69
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "You can reach us at the following emails:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "- Cheak Han Wei - `e0389075@u.nus.edu`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "- Chia Wen Ling - `e0425906@u.nus.edu`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "- Koh Rui Ling - `e0426268@u.nus.edu`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "- Lim Ethan - `e0406537@u.nus.edu`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": "- Lin Yingqi - `e0424735@u.nus.edu`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### Cheak Han Wei"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003cimg src\u003d\"images/hanweic53.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "[[github](https://github.com/hanweic53)]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "[[portfolio](team/hanweic53.md)]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* Responsibilities: Deliverables and deadlines + Integration"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": "### Chia Wen Ling"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": "\u003cimg src\u003d\"images/cwenling.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cwenling"
        },
        "content": "[[github](http://github.com/cwenling)]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": "[[portfolio](team/cwenling.md)]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* Responsibilities: Code Quality + Integration"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### Koh Rui Ling"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003cimg src\u003d\"images/ruilingk.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cwenling"
        },
        "content": "[[github](http://github.com/ruilingk)]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cwenling"
        },
        "content": "[[portfolio](team/ruilingk.md)]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* Responsibilities: Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### Lim Ethan"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "\u003cimg src\u003d\"images/ethan-l-m-e.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "[[github](http://github.com/ethan-l-m-e)]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "[[portfolio](team/ethan-l-m-e.md)]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* Responsibilities: Code Quality + Schedule \u0026 Tracking"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### Lin Yingqi"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003cimg src\u003d\"images/yingqi0607.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "[[github](http://github.com/yingqi0607)]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "[[portfolio](team/yingqi0607.md)]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "* Responsibilities: Documentation + Testing"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 9,
      "yingqi0607": 4,
      "hanweic53": 6,
      "cwenling": 11,
      "-": 31,
      "ethan-l-m-e": 4
    }
  },
  {
    "path": "docs/DevOps.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: DevOps guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are how to use Gradle for some important project tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew shadowJar`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **`run`**: Builds and runs the application.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  **`runShadow`**: Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  **`checkstyleTest`**: Runs the code style check for the test code base."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`**: Runs all tests.\u003c"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew test` — Runs all tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew clean test` — Cleans the project and runs tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## Continuous integration (CI)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "### Code coverage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork of this repository."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. Once you are inside Codecov web app, add your fork to CodeCov."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3) in that page reflects the coverage of your project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "### Repository-wide checks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "`./config/travis/run-checks.sh`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "**If adding new checks:**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  * SEVERITY is either ERROR or WARN."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  * FILENAME is the path to the file relative to the current directory."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts must exit with a non-zero exit code if any errors occur."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "## Making a release"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "1. Update the version number in [`MainApp.java`](https://github.com/AY2021S1-CS2103T-T10-2/tp/tree/master/src/main/java/seedu/tr4cker/MainApp.java)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "2. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "3. Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "4. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."
      }
    ],
    "authorContributionMap": {
      "yingqi0607": 4,
      "-": 75
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of TR4CKER. Given below is a quick overview"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "of each component."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "[diagrams](https://github.com/AY2021S1-CS2103T-T10-2/tp/tree/master/docs/diagrams/) folder. Refer to the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "[_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "and edit diagrams."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-T10-2/tp/tree/master/src/main/java/seedu/tr4cker/Main.java)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "and [`MainApp`](https://github.com/AY2021S1-CS2103T-T10-2/tp/tree/master/src/main/java/seedu/tr4cker/MainApp.java)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "It is responsible for,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* At TR4CKER launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "The rest of TR4CKER consists of four components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* [**`UI`**](#ui-component): The UI of TR4CKER."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of TR4CKER in memory."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "`interface` mentioned in the previous point."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "the command `delete 1`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-T10-2/tp/tree/master/src/main/java/seedu/tr4cker/ui/Ui.java)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `TaskListPanel`,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "`StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-T10-2/tp/tree/master/src/main/java/seedu/tr4cker/ui/MainWindow.java)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-T10-2/tp/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-T10-2/tp/tree/master/src/main/java/seedu/tr4cker/logic/Logic.java)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "1. `Logic` uses the `Tr4ckerParser` class to parse the user command."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-T10-2/tp/tree/master/src/main/java/seedu/tr4cker/model/Model.java)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* stores the TR4CKER data."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cTask\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "is given below. It has a `Tag` list in the `Tr4cker`, which `Task` references. This allows `Tr4cker` to only require one"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "`Tag` object per unique `Tag`, instead of each `Task` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-T10-2/tp/tree/master/src/main/java/seedu/tr4cker/storage/Storage.java)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "The `Storage` component:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* can save `UserPref` objects in json format and read it back"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* can save TR4CKER data in json format and read it back"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cwenling"
        },
        "content": "Classes used by multiple components are in the `seedu.tr4cker.commons` package."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "### Categorised Tasks Handling feature in Home tab \\[coming in v1.3] (Han Wei)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "### Feature introduction"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "This feature allows users to view and handle tasks under 3 categories separately."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "### Implementation details"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "This feature comes in the form of a Task List panel, which is made up of three sub-panels:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "1. Pending tasks (Incomplete tasks that are not overdue)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "2. Expired tasks (Incomplete tasks that are overdue)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "3. Completed tasks (Archived tasks)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Upon starting TR4CKER or refreshing of task lists, tasks which deadlines have passed will automatically appear under Expired tasks panel."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "Users can modify tasks displayed in the Expired task panel using the Edit command."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "The following diagram shows the sequence flow of a EditCommand which modifies the deadline of a task in the Expired task list:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "![EditActivityDiagram](images/EditActivityDiagram.png)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "Figure 1: Edit deadline of expired task Activity Diagram"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "Once the user marks a task as complete, it will automatically appear under Completed tasks."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "### Design considerations:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "#### Aspect 1: How users can easily view and control all the tasks"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "This design filters the tasks into 3 lists according to their completion statuses and deadlines which will be useful to the users,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "as opposed to having browse through a long task list."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### Daily feature \\[coming in v1.3] (Yingqi)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Tracker has a daily feature that allows users to add current tasks to a todo list for the day."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "This feature allows users to plan for what they want to do for a particular day."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "The 3 main functions of the Daily feature are to:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "1. Add tasks from existing task list to a todo list"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "2. Display all tasks that the user wants to do for the day"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "3. The daily todo list is cleared everyday"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "The UI of the Daily feature is facilitated by the `DailyPanel` class which will show users all daily todo tasks as a list."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "To implement the commands of this Daily feature, there are `TodoCommand` and `TodoCommandParser` classes in the `logic` package."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "The following diagram shows the sequence flow when a task gets added into the `DailyPanel`:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "![DailySequenceDiagram](images/DailySequenceDiagram.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "#### Design Considerations"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "##### Aspect 1: How users can plan for the things he/she wants to complete for the day"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* **Current Choice:** When users use list command to view all tasks, only task names are shown."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Pros: A neater list is being shown."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Pros: Users can look through the list quickly and decide what to add to daily todo list."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Cons: Important details such and deadline and descriptions are omitted, users may not know which task is more urgent to do."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* **Alternative 1:** When users decides to add a particular task to daily todo list, details of that task is shown."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Pros: Users have clearer idea of the details of the tasks that he/she wants to complete for the day."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Cons: Details are shown only when the tasks is already added, if the user do not want to do it for the day, he/she has to delete it from todo list."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "**Justification for current choice:** Users would already have details of the tasks in mind and therefore they will tend"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "to add the tasks they feel that are more urgent to daily todo list. Hence details can be ommited when users select tasks"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "to add into daily todo list."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### Module feature \\[coming in v1.3] (Ethan)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "TR4CKER has a module tab which provides users with an alternate view of tasks. Tasks are arranged in shorter lists categorized by modules."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "This feature is to allow users to have a more focused overview of tasks, and know how many tasks are"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "pending for each module as opposed to the most-urgent-task-first organization in  main task list."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "The 2 main functions of the Module feature are to:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "1. Display all modules taken by the user."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "2. Display the list of yet to be completed tasks under each module."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "To implement the UI of this Module feature, there will be a `ModuleTaskCard` \u0026 `ModuleTaskListPanel` classes"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "in the `ui` package, modified from the `TaskCard` and `TaskListPanel` classes. To implement the commands of"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "this module feature, there are `ModuleCommnad` and `ModuleCommandParser` classes in the `logic` package."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "A module in the Modules tab has its own `ModuleTaskListPanel`, updated whenever new tasks are added with the module or are"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "edited to be associated under the module."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "The following diagram shows the sequence flow when a task gets added to the `ModuleTaskListPanel` of a module:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "![TaskWithModuleActivityDiagram](images/TaskWithModuleActivityDiagram.png)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 1: Adding task to `ModuleTaskListPanel` of a module."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "#### Design considerations:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "##### Aspect 1: How modules are deleted and added to tasks"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* **Current Choice:** Modules cannot be deleted if there are existing tasks tagged with the module. Tasks can only be"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "tagged with an existing module."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Pros: Safer, will not have stray tasks with non-existent modules."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Pros: User has safeguard against deleting modules that still has pending tasks."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Cons: Less flexible, extra steps for the user to create modules before assigning tasks, and delete tasks before"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  deleting a module."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* **Alternative 1:** Allow both modules to be deleted and tasks to be tagged regardless of the others\u0027 existence."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Pros: More convenient for user to use without restrictions."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Cons: Prone to error, user may assign incorrectly with typos."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "**Justification for current choice:** Better reliability of the feature by reducing possible errors by the user. As errors"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "will cause more time wasted for the user to fix them anyway, it seems that it is better to incur some overhead to"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "prevent making a mess altogether."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### Countdown feature \\[coming in v1.3] (Wen Ling)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "TR4CKER has a countdowns tab which allows users to add important events that they would like TR4CKER to countdown to."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "This feature allows users to isolate the most important time sensitive events and deadlines, and tells the user exactly"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "how many days do they have to a certain event, which enhances the tracking experience."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "The 3 main functions of the Countdown feature are to:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "1. Display a list of all countdown events"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "2. Display prominently the 2 earliest upcoming events"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "#### Implementation \\[will be updated with UML diagrams]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "The countdown panel is facilitated by the `CountdownPanel` class, which serves as the entry point to show users the"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "countdown events as a list."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "To allow TR4CKER to countdown to events, users can add new events by 2 methods using Countdown Command."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "1. Add event based on task in task list (Note: Countdowns list is separate from tasks list, and subsequent changes"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "to tasks in task list will not be reflected in countdowns list.)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "2. Add independent event"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Users can also use Countdown Command to"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "The following activity diagram shows the flow of executing a Countdown Command:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "![CountdownCommandActivityDiagram](images/CountdownActivityDiagram.png)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "#### Design considerations:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "##### Aspect 1: Users should be able to easily view the next most recent event"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* **Current Choice:** Use the same `countdown` command to navigate to the next event or previous event. For example,"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "`countdown first` would display the earliest upcoming event, `countdown next` will display the event after the one"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "currently displayed, and `countdown previous` with display the event before the one currently displayed."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Pros: Users can easily know the chronological sequence of events."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Cons: May be difficult to navigate if there is a long list of events."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* **Alternative 1:** Another command to allow users to navigate to the events in a specified day."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Pros: More user-friendly as it is faster to navigate to a particular event on a particular day."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Cons: Requires user to already know what days have events in the countdown list."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "**Justification for current choice:** Considering how users who are using the countdown feature will prefer to be able"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "to know what is the next upcoming event, for example what is the next exam that they have to prepare for. The first implementation"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "is also less prone to errors as users do are able to know what is the next event without knowing beforehand what day is it on."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### Planner feature (Rui Ling)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "TR4CKER has a planner feature which provides users to view the calendar side-by-side with the tasks that are due on"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "specified day. This feature is to allow users to have a clearer view of their schedules and allow them to plan their"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "time ahead, and hence increasing productivity."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "The 2 main functions of Planner command are to:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "1. Switch to planner tab"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "2. Display an overview of tasks for today/tomorrow and on specified date/month"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "To implement the UI of this planner feature, there is a `planner` package in `model` and `ui` packages. To implement"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "the commands of this planner feature, there are `PlannerCommand` and `PlannerCommandParser` classes in `logic` package."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "The following class diagram (Figure 1) summarises how the UI aspect of this planner feature is being implemented:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "![PlannerClassDiagram](images/PlannerClassDiagram.png)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 1: Planner Class Diagram"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "During the initialisation of TR4CKER, `PlannerTabWindow` will be initialised, together with `PlannerCalendarPanel` and"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "`PlannerTaskListPanel`. `PlannerTabWindow` will execute `Logic#getPlannerFilteredTaskList` to update the tasks list shown in"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Planner tab. The month and year of the calendar will be set in `PlannerCalendarPanel`. There are multiple `PlannerDayCard`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "in 1 `PlannerCalendarPanel`. `PlannerDayCard` serves to store the details of each `PlannerDay`, which contains the date"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "of each grid in the `PlannerCalendarPanel`. When users execute planner commands, The month and year of the calendar will"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "be updated in `PlannerCalendarPanel`. Existing details of the calendar will also be cleared through"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "`PlannerCalendarPanel#clearCalendar()` and `PlannerDayCard#clear()`. At the same time, the tasks list will also be updated."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "The following sequence diagram (Figure 2) shows how the planner feature works when a user executes `planner goto/today`:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "![PlannerSequenceDiagram](images/PlannerSequenceDiagram.png)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 2: Planner Sequence Diagram during execution of `planner goto/today`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "When a user executes a `PlannerCommand` of `planner goto/today`, `MainWindow` will be called to execute the command. It will"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "then call `LogicManager` to execute, followed by parsing of command in `Tr4ckerParser`. `Tr4ckerParser` will create a new"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "instance of `PlannerCommandParser` to parse the user\u0027s input. After parsing and checking the validity of user\u0027s input, a"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "new `PlannerCommand` instance is created. This new instance `plannerCommand` will be passed back to `LogicManager` to execute"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "on the `Model` in `PlannerCommand`. After executing, a new instance `CommandResult` `commandResult` is created. `commandResult`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "will be passed back to `MainWindow`, then it will be checked in `PlannerTabWindow` if the user wants to switch to Planner"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "tab, or to view a specific date/month. After that, the calendar and tasks list are updated in Planner tab, and user can"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "now see the results."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "The following activity diagram (Figure 3) summarises what happens when a user executes the 2 main functions of"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "`PlannerCommand`:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "![PlannerActivityDiagram](images/PlannerActivityDiagram.png)"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 3: Planner Activity Diagram"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "This activity diagram shows all the possible paths TR4CKER can take when a user executes a `PlannerCommand`. After"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "inputting a command, the command is parsed. By checking the arguments provided by the user, it can either mean the"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "user wants to:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "1. switch to Planner tab"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "2. display an overview of tasks for today/tomorrow and on a specified date/month."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "If user wants to switch to Planner tab, TR4CKER will display the planner, and a feedback will be provided to the user. If"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "user wants to display an overview of tasks, the validity of input will be checked. The input can take these 5 different paths:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "1. today"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "2. tomorrow"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "3. specified date"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "4. specified month"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "5. error (not shown here)."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Depending on the inputs, the calendar view and tasks list will be updated accordingly. Planner tab is then displayed to"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "the user and a feedback is provided."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "#### Design considerations:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "##### Aspect 1: How to represent tasks list for Planner tab"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* **Current Choice:** Have a separate tasks list for Planner tab, which is the `PlannerTaskListPanel`class. This class"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "is different from the `TaskListPanel` class which is mainly used for the TR4CKER tab."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Pros: Obey Single Responsibility Principle whereby each class should only have one responsibility."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Pros: Developers using `PlannerTaskListPanel` class would not need to change the functionality of `TaskListPanel`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  class to suit what functionalities they want for the tasks list in Planner tab."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Cons: Additional coding and time would be required to create another class to cater to only tasks list in Planner tab."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* **Alternative 1:** Use the existing `TaskListPanel` class for the tasks list in Planner tab."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Pros: Do not need to code for another class and more time could have been spent on other features."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Cons: Do not obey Single Responsibility Principle as now a class would need to have 2 types of functionalities for"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  different purposes."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Cons: Some functionalities for tasks list in TR4CKER tab and Planner tab differ, so accomodating for both functionalities"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  in a single class is quite difficult."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "**Justification for current choice:** After thinking about how having a separate class for the tasks list in Planner tab"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "would require more time and effort, I still choose to implement the current choice. This is because there are varying"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "functionalities to the tasks list in TR4CKER tab and Planner tab. For example, tasks list in TR4CKER tab only shows non-expired"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "tasks and shows every task on the list. However, tasks list in Planner tab shows any date that the user wants to go to"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "and can even show expired tasks if user chooses to go to a date in the past. Therefore, although it required more time"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "and effort, I think that having a separate class would be better since the tasks list in both tabs act differently."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "##### Aspect 2: How users can easily navigate to today\u0027s/tomorrow\u0027s tasks list"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* **Current Choice:** Use the same `planner` command to navigate to today\u0027s/tomorrow\u0027s tasks list. For example,"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "`planner goto/today` would navigate users to today\u0027s tasks list and `planner goto/tomorrow` would navigate users to"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "tomorrow\u0027s tasks list. Short forms are also provided such as `tdy` and `tmr`."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Pros: User-friendly as users would only need to know 1 command."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Pros: Users can use short forms, which increase convenience."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Cons: Users may not utilise this feature as they do not know the existence of it."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* **Alternative 1:** Separate commands to allow users to navigate to today\u0027s/tomorrow\u0027s tasks list."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Pros: Clearer error messages to prompt users that the input does not conform to standard."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Cons: Need to ensure that the implementation of each individual command is correct."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Cons: Not as user-friendly as users would need to know multiple commands now."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "**Justification for current choice:** After thinking about how different commands would also have their own advantages,"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "I chose to implement the current choice. The current implementation would allow users to only know 1 command, which would"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "fairly be more user-friendly, especially after considering how TR4CKER also has many other commands available."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "The problem of users not knowing the existence of this command could be solved by documenting this feature clearly in the"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "User Guide of TR4CKER."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* busy SoC students"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* has a need to manage a significant number of tasks, such as assignments"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* prefer desktop applications over other types"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* is reasonably comfortable using CLI applications"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "**Value proposition**: TR4CKER is a desktop application that helps SoC students track their tasks, meet their deadlines,"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "cwenling"
        },
        "content": "and stay productive. It is optimized for Computing students familiar with CLI, who can manage their tasks efficiently"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "cwenling"
        },
        "content": "by typing in commands."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "| `* * *`  | user                                       | add a new task                 |                                                                        |"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "| `* * *`  | user                                       | delete a task                  | remove tasks that I have completed or no longer need                   |"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "| `* * *`  | user                                       | edit a task                    | change the tasks that I have entered wrongly without deleting it       |"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "| `* * *`  | user                                       | view all tasks                 | have a overview of all tasks that I have                               |"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "| `* * *`  | user                                       | find a task                    | find the tasks that match the keywords that I want to find             |"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "| `* * *`  | user                                       | mark a task as completed       | when I complete a task, I want to mark it as completed                 |"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "| `* * *`  | user                                       | exit from the program          | indicate that I am done with what I wanted to do                       |"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "(For all use cases below, the **System** is the `TR4CKER`: application and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "**Use case: UC01 - Add a new task**"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "1.  User requests to add a new task."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "2.  TR4CKER requests for task details."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "3.  User provides task details."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "4.  TR4CKER inserts the new task to user\u0027s task list."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* 3a. TR4CKER detects an error in entered task details."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    * 3a1. TR4CKER requests for the correct task details."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    * 3a2. User enters the new task details."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    Steps 3a1-3a2 are repeated until the details entered are correct."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    Use case resumes at step 4."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "**Use case: UC02 - Edit a task**"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "1.  User requests to \u003cu\u003elist task (UC07)\u003c/u\u003e."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "2.  User requests to edit a specific task in the list."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "3.  TR4CKER asks for the index."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "4.  User provides index."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "5.  TR4CKER asks for the field that User wishes to edit for the task."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "6.  User provides field to edit."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "7.  TR4CKER asks for the edited task field."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "8.  User provides the new edited task field."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "9.  TR4CKER updates the selected field accordingly."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* 4a. TR4CKER detects an error in entered task index."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    * 4a1. TR4CKER shows an error message."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    Use case end."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* 8a. TR4CKER detects an error in edited task field."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    * 8a1. TR4CKER requests for the correct edited field."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    * 8a2. User enters the new edited field."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    Steps 8a1-8a2 are repeated until the edited field entered is correct."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    Use case resumes at step 9."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "**Use case: UC03 - Delete a task**"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "1.  User requests to \u003cu\u003elist task (UC07)\u003c/u\u003e."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "2.  User requests to delete a specific task in the list."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "3.  TR4CKER asks for the index."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "4.  User provides index."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "5.  TR4CKER requests for confirmation."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "6.  User confirms."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "7.  TR4CKER deletes the task from the list."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* 4a. TR4CKER detects an error in entered task index."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    * 4a1. TR4CKER shows an error message."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "**Use case: UC04 - Mark a task as done**"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "1.  User requests to \u003cu\u003elist task (UC07)\u003c/u\u003e."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "2.  User requests to mark a specific task in the list as done."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "3.  TR4CKER marks the task as done."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* 2a. TR4CKER detects an error in entered task index."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    * 2a1. TR4CKER shows an error message."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "**Use case: UC05 - View a task**"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "1.  User requests to \u003cu\u003elist task (UC07)\u003c/u\u003e."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "2.  User requests to view a specific task in the list."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "3.  TR4CKER shows the details of the task."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* 2a. TR4CKER detects an error in entered task index."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    * 2a1. TR4CKER shows an error message."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "**Use case: UC06 - Find related tasks**"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "1.  User requests to find tasks using specified keyword(s)."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "2.  TR4CKER shows a list of all tasks that match the given keyword(s)."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* 2a. No tasks match the specified keyword(s)."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    * 2a1. TR4CKER shows a \u0027no matches\u0027 error message."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "**Use case: UC07 - List all tasks**"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "1.  User requests to list tasks."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "2.  TR4CKER shows a list of all tasks."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* 2a. TR4CKER\u0027s task list is empty."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    * 2a1. TR4CKER shows an empty list."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "1.  TR4CKER should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "2.  TR4CKER should be able to hold up to **1000 tasks** without any noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "3.  Users should be able to use TR4CKER without Internet connection, but accessing of User Guide or Developer Guide would require Internet."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "4.  Users with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "5.  Users should be able to retain their information when they switch laptops if they have the `data folder` (created on first load)"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    in the same directory as the `JAR file` on the other laptop."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "6.  The user interface should be intuitive enough for users who are not tech-savvy."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "7.  The response to any inputted commands should become visible within 5 seconds."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "8.  The source code should be open source."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* **Task**: An item to be completed by a certain deadline."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* **CLI**: Command-Line Interface, a method of interacting with computer programs by typing lines of text."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Given below are instructions to test TR4CKER manually."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "   1. Re-launch TR4CKER by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 244,
      "yingqi0607": 12,
      "hanweic53": 74,
      "cwenling": 7,
      "-": 263,
      "ethan-l-m-e": 59
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "   1. Run the `seedu.tr4cker.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "-": 54
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "   e.g. `seedu.tr4cker.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "   e.g. `seedu.tr4cker.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "   e.g. `seedu.tr4cker.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 3,
      "-": 33
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "1. [Overview](#1-overview)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    * 1.1. [About TR4CKER](#11-about-tr4cker)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    * 1.2. [About this User Guide](#12-about-this-user-guide)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "2. [Quick Start](#2-quick-start)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "3. [Commands](#3-commands)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    * 3.1. [Common Commands](#31-common-commands)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        * 3.1.1. [Viewing help: `help`](#311-viewing-help--help)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        * 3.1.2. [Exiting the program: `exit`](#312-exiting-the-program-exit)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        * 3.1.3. [Switching between tabs](#313-switching-between-tabs)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    * 3.2. [Home Tab](#32-home-han-wei)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        * 3.2.1. [Reading the Task lists](#321-reading-the-task-lists)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        * 3.2.2. [Command format for Task list Commands](#322-command-format-for-task-list-commands)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        * 3.2.3. [Adding new tasks: `add`](#323-adding-new-tasks-add)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        * 3.2.4. [Listing all tasks: `list`](#324-listing-all-tasks-list)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        * 3.2.5. [Marking Pending tasks as done: `done`](#325-marking-tasks-as-done-done)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        * 3.2.6. [Editing Pending tasks: `edit`](#326-editing-pending-tasks-edit)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        * 3.2.7. [Editing tags of Pending tasks: `tag`](#327-editing-tags-of-pending-tasks-tag)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        * 3.2.8. [Locating Pending tasks by keywords: `find`](#328-locating-pending-tasks-by-keyword-find)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        * 3.2.9. [Deleting Pending tasks: `delete`](#329-deleting-pending-tasks--delete)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        * 3.2.10. [Editing Expired tasks: `edit expired`](#3210-editing-expired-tasks-edit-expired)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        * 3.2.11. [Deleting Expired tasks: `delete expired`](#3211-deleting-expired-tasks--delete-expired)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        * 3.2.12. [Clearing all tasks: `clear`](#3212-clearing-all-tasks-clear)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    * 3.3. [Daily Tab](#33-daily-yingqi)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        * 3.3.1. [Switching to Daily tab: `daily`](#331-switching-to-daily-tab-daily)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        * 3.3.2. [Adding a daily todo task](#332-adding-a-daily-todo-task-todo)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    * 3.4. [Modules Tab](#34-modules-ethan)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        * 3.4.1. [Switching to Module tab: `modules`](#341-switching-to-module-tab-mod)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        * 3.4.2. [Adding a new module to modules list](#342-adding-a-new-module-to-modules-list)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        * 3.4.3. [Assigning a task to a module](#343-assigning-a-task-to-a-module)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        * 3.4.4. [Un-assigning a task from a module](#344-un-assigning-a-task-from-a-module)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        * 3.4.5. [Deleting a module](#345-deleting-a-module)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    * 3.5. [Countdown Tab](#35-countdown-wen-ling)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        * 3.5.1. [Switching to Countdown tab: `countdown`](#351-switching-to-countdown-tab-countdown)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        * 3.5.2. [Adding a new event to countdowns list](#352-adding-a-new-event-to-countdowns-list)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        * 3.5.3. [Adding an event from tasks list](#353-adding-an-event-from-tasks-list)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        * 3.5.4. [Deleting an event from countdowns list](#354-deleting-an-event-from-countdowns-list)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    * 3.6. [Planner Tab](#36-planner-rui-ling)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        * 3.6.1. [Switching to Planner tab: `planner`](#361-switching-to-planner-tab-planner)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        * 3.6.2. [Switching calendar view and tasks list](#362-switching-calendar-view-and-tasks-list)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            * 3.6.2.1. [Go to today or tomorrow](#3621-go-to-today-or-tomorrow)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                * 3.6.2.1.1. [Today](#36211-today)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                * 3.6.2.1.2. [Tomorrow](#36212-tomorrow)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            * 3.6.2.2. [Go to specific date](#3622-go-to-specific-date)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            * 3.6.2.3. [Go to specific month](#3623-go-to-specific-month)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        * 3.6.3 [Indicators on Calendar](#363-indicators-on-calendar)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    * 3.7. [Saving of Data](#37-saving-the-data)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "4. [FAQ](#faq)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "5. [Command Summary](#command-summary)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "# 1. Overview"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cwenling"
        },
        "content": "Welcome to the User Guide of TR4CKER!"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "## 1.1. About TR4CKER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "TR4CKER is a desktop app that helps SoC students track their tasks, meet their deadlines, and stay productive. It is"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cwenling"
        },
        "content": "optimized for Computing students familiar with Command Line Interface (CLI), who can manage their tasks efficiently"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cwenling"
        },
        "content": "by typing in commands."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "## 1.2. About this User Guide"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cwenling"
        },
        "content": "This User Guide explains how to use TR4CKER, as well as provides an understanding of the features and commands, and some"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "common use cases of this application."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "In this guide, we cover:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "1. How to navigate the Graphical User Interface (GUI)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "2. How to use the Command Line Interface (CLI)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "# 2. Quick Start"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "In this section, it will guide you through on how to get TR4CKER started for the first time."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "2. Download the latest `tr4cker.jar` from [here](https://github.com/AY2021S1-CS2103T-T10-2/tp/releases/tag/v1.3)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "3. Copy the file to the folder you want to use as the _home folder_ for your TR4CKER."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "   Figure 1: Application home page populated with sample data"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "# 3. Commands"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/tP week 7`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  e.g `n/ NAME [t/TAG]` can be used as `n/tP week 7 t/urgent` or as `n/tP week 7`."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* Items with `…` after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  e.g. `[t/TAG]…` can be used as ` ` (i.e. 0 times), `t/urgent`, `t/urgent t/cs2103t` etc."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  e.g. if the command specifies `n/NAME dl/DEADLINE`, `dl/DEADLINE n/NAME` is also acceptable."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "## 3.1. Common Commands"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Here are some commands that you might find it handy when using TR4CKER. "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.1.1. Viewing help : `help`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "If you cannot recall the command you need, you can enter the help command in any panel."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "A help window will pop out with a link to this User Guide."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "Figure 2: Expected result after running `help`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.1.2. Exiting the program: `exit`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "You can exit the program anytime by entering the `exit` command in any panel."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.1.3. Switching between tabs"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "You can switch between tabs by using the following commands:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "| Command    | Tab switched to |"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "| :----------| :--------------:|"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "|  `home`    | Home            |"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "|  `daily`   | Daily           |"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "|  `modules`     | Modules         |"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "| `countdown`| Countdowns      |"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "|  `planner` | Planner         |"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "Table 1: List of Switch Tab commands"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "## 3.2. Home (Han Wei)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "TR4CKER is primarily a task management application that allows you to track and manage your tasks comprehensively."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "TR4CKER\u0027s Home page was built for this purpose and you will be directed to this page once you start TR4CKER. Alternatively,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hanweic53"
        },
        "content": " you can enter `home` on the Command Box to navigate to this page."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.2.1. Reading the Task lists"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "For the ease of reading, tasks are split into 3 sections and are displayed separately, namely:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "1. Pending Tasks"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "2. Expired Tasks"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "3. Completed Tasks"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 3: Application home page populated by sample data"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "The leftmost panel displays Pending tasks that are not overdue and not completed."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "On the other hand, the Expired Tasks panel displays tasks that are overdue but have yet to be completed."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "Lastly, the Completed Tasks panel displays completed tasks for archive purposes."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.2.2. Command format for Task list Commands"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "The syntax of the `add` command is `add n/NAME des/DESCRIPTION [m/MODULE_CODE] [dl/DEADLINE] [t/TAG]... ` and it will be used as an"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "example to explain the following points:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "1. Parts of the command in UPPER_CASE represent command parameters that have to be supplied by you. Using the given example,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "DESCRIPTION represents a field where you provide the task description, such as des/Graded assignment 2."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "2. Parameters in square brackets are optional, such as the Tag parameter in the given example."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "3. Parameters with a trailing `...` are optional and may be used as many times as you want, or even be omitted."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "4. Parameters can be entered in any order."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.2.3. Adding new tasks: `add`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "You can add a task to TR4CKER using the `add` command when you want to start working on a new task."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "Format: `add n/NAME des/DESCRIPTION [m/MODULE_CODE] [dl/DEADLINE] [t/TAG]…​`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "![AddCommand](images/AddCommand.png)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 4: Example of an expected result after executing `add n/UG Introduction des/TableOfContents m/CS2103T t/Urgent t/Important`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "Before you can add a task with module, you need to ensure that the module is already entered into TR4CKER."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "You can refer to the section on Module Tab to find out more."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "**:information_source: Important points to note when entering Deadline:**\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "1. While Deadline is an optional parameter, TR4CKER will set the Deadline to default values if you do not enter them:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    * If you do not enter a Deadline, it will be set to Today, 2359."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    * If you enter a Deadline date without specifying a time, Deadline time will be set to 2359."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "2. DateTime formats accepted for Deadline:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    * dd-MM-yyyy HHmm, dd-MMM-yyy HHmm, dd-MM-yyy, dd-MMM-yyyy"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        * dd: the corresponding days in 2 numbers."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        * MM: the corresponding month in 2 numbers."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        * MMM: the corresponding month in 3 letters (First letter must be capitalised, e.g. Jan, Sep)."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        * yyyy: the corresponding year in 4 numbers."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        * HH: the hour the task is due, in 24-Hour format."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        * mm: the minute the task is due."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    * Natural Dates"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        * Today"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        * Days of week (e.g. Monday, Sunday)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            * If Monday is entered, it refers to the upcoming Monday."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "Tags cannot contain spaces and must be alphanumeric!"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* `add n/tP PE m/CS2103T des/Practical Exam`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* `add n/CS1101S Quiz dl/25-11-2020 m/CS1101S des/Post-Lecture quiz`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* `add n/CS1231S Homework Assignment dl/today 2200 m/CS1231S des/Chapter 3 t/graded t/assignment`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.2.4. Listing all tasks: `list`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "Displays a list of all tasks names in TR4CKER."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.2.5. Marking tasks as done: `done`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "TR4CKER allows you to track the progress of a task in TR4CKER and you can use the `done` command when you want to update the Completion Status of a task."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "Format: `done INDEX [p/COMPLETION_STATUS]`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "![DoneCommand](images/DoneCommand.png)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 5: Example of an expected result after executing `done 1 p/50`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* Marks the task as done at the specified `INDEX`."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* The index refers to a valid index number shown in the specified Pending Tasks list."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* Completion Status is a percentage of task done and therefore only accept integer values from 0 to 100."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* If Completion Status is not entered, TR4CKER will mark the task as 100% done."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "Completion Status can either be increased or decreased!"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* `list` followed by `done 2 p/50` marks the 2nd task in the displayed task list as 50% done."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* `find tutorial` followed by `done 1` marks the 1st task in the results of the `find` command as 100% done."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.2.6. Editing Pending tasks: `edit`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "You can edit an existing Pending task in TR4CKER by using the `edit` command when the need arises."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "Format: `edit INDEX [n/NAME] [dl/DEADLINE] [des/DESCRIPTION]`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* Edits the task\u0027s name, deadline and description at the specified `INDEX`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* The index refers to the index number shown in the task list."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* Editing of tags is done using `tag` command instead (Refer to the TagCommand section)."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* `edit 1 n/prepare for tP tasks` - Edits the description of the 1st task to be `prepare for tP tasks`."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* `edit 2 dl/13-Dec-2020 1930` - Edits the deadline time of the 2nd task to be 13 Dec 2020, 1930 hrs."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.2.7. Editing tags of Pending tasks: `tag`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "You can add or delete tags of a Pending task in TR4CKER."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Format: `tag INDEX [new/NEW_TAG]…​ [del/TAG_TO_DELETE]…​`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* Adds tag(s) to task at the specified `INDEX` when using `new/NEW_TAG`."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* Deletes tag(s) from task at the specified `INDEX` when using `del/TAG_TO_DELETE`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* The index refers to the index number shown in the task list."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* At least one of the fields must be provided."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* Tag(s) will only be added if it does not exist yet."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* Tag(s) will only be deleted if it exists."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* Adding and deleting of tags can be used concurrently."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* Multiple tags can be added and deleted at the same time."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* `tag 1 new/urgent` - Adds a new tag `urgent` to the existing tags of 1st task (if the tag does not already exist)."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* `tag 2 del/assignment` - Deletes the tag `assignment` from the 2nd task (if the tag exists)."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* `tag 3 new/urgent del/assignment new/graded` - Adds 2 new tags `urgent` and `graded`, deletes the tag `assignment`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "from the 3rd task."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.2.8. Locating Pending tasks by keyword: `find`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "You can find tasks whose names contain any of the given keywords."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Format: `find [KEYWORD_1] [KEYWORD_2] ...`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "![FindCommand](images/FindCommand.png)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 6: Example of an expected result after executing `find cs2103T Assignment`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* The search is case-insensitive. e.g `cs2103T` will match `CS21013T`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* The order of the keywords does not matter. e.g. `Assignment CS2103T` will match `CS2103T Assignment`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* Only full words will be matched e.g. `2101` will not match `CS2101`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* Tasks matching at least one keyword will be returned."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "  e.g. `find CS2103T Assignment` will return `CS2103T Project`, `CS2100 Assignment 3`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* `find CS2101` returns `CS2101 Oral Presentation 1`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "* `find CS2103T Quiz` returns `CS2103T Project`, `CS1101S Quiz`\u003cbr\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "  ![result for \u0027find CS1231S Mission\u0027](images/findCS2103TQuizResult.png)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.2.9. Deleting Pending tasks : `delete`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "You can delete an existing task from the task list by providing the"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "index number of the task that you want to delete."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* Deletes the task at the specified `INDEX`."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* The index refers to a valid index number shown in the displayed task list."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* `list` followed by `delete 2` deletes the 2nd task in the displayed task list."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* `find assignment` followed by `delete 1` deletes the 1st task in the results of the `find` command."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.2.10. Editing Expired tasks: `edit expired`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "The usage of this command is similar to the `edit` command for a Pending task."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "Format: `edit expired INDEX [n/NAME] [dl/DEADLINE] [des/DESCRIPTION]`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "**:information_source: If you edit the Deadline of an Expired Task:**\u003cbr\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "Editing the Deadline of an Expired task will turn the task into a Pending task because new Deadline entered"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "must be a future Deadline. Hence, the edited task will be displayed under the Pending Task panel instead."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.2.11. Deleting Expired tasks : `delete expired`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "The usage of this command is similar to the `delete` command for a Pending task."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "Format: `delete expired INDEX`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* Deletes the task at the specified `INDEX`."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* The index refers to a valid index number shown in the displayed task list."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* `list` followed by `delete 2` deletes the 2nd task in the displayed task list."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* `find assignment` followed by `delete 1` deletes the 1st task in the results of the `find` command."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.2.12. Clearing all tasks: `clear`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "Clears all entries in TR4CKER."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "## 3.3 Daily (Yingqi)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "You can add all your daily plans of current tasks to a daily to do list so that you have a clearer idea of what you want to complete for the day."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.3.1 Switching to Daily tab: `daily`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "If you would like to switch to Daily tab without clicking on the Daily tab button, you can do so easily through the CLI, by just typing `daily`."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "Format: `daily`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "Once you enter `daily` into the command box, TR4CKER should look like this:"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "![switch tab](images/dailyTab_switchTab.png)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 7: TR4CKER after executing `daily`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "* `daily` - Switches to Daily tab, showing a list of daily todo tasks that you have planned for the day."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.3.2 Adding a daily todo task: `todo`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "You can add a todo task for the day into the daily todo list by providing the index number of the task that you want to add."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "Format: `todo INDEX` [To be implemented: add multiple todo tasks at the same time]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "* Adds the task at the specified `INDEX` to daily todo list."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "* The index refers to a valid index number shown in the displayed task list."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "* `list` followed by `todo 1` adds the first task in the displayed task list into daily todo list."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "![todo before](images/dailyTab_todo1Before.png)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 8: Daily tab before executing `todo 1`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "![todo result](images/dailyTab_todo1After.png)"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 9: Daily tab after executing `todo 1`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "## 3.4. Modules (Ethan)"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "You can organize your tasks according to their respective modules using the Module tab. Categorizing tasks by module"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "allows you to know exactly how many tasks are still due for each of the modules you take, if you wish to work on a"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "particular module first."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "### 3.4.1 Switching to Module tab: `modules`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "To switch to the Module tab, simply type `modules` into the command line. You can also click on the Module button on the tabs"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "menu at the top."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "Format: `modules`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "Once you have entered this command, TR4CKER should look like this:"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "![switch tab](images/moduletab_switchtab.png)"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "Figure 10: TR4CKER after executing `modules`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "The `All Modules` panel shows the list of all modules and their tasks.\u003cbr\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "The page will be blank if no modules have been created yet."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* `modules` - Switches to Module tab, showing the list of modules."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.4.2 Adding a new module to modules list:"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "You can add a new module to the list of modules, that TR4CKER can use to categorize tasks."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "Format: `modules n/NAME m/MODULECODE`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* Adds a module with name `NAME` and module code `MODULECODE` to the modules list."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* Both fields are compulsory and can be in any order."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* `NAME` must be in the alphanumeric format (only containing letters and numbers) and preferably under"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "100 characters long, so that it can be displayed in the box without being truncated."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* `MODULECODE` must be in the alphanumeric format (only containing letters and numbers) and must not include any spacings."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* `MODULECODE` is case-insensitive."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* The keyword `DEL` is not a valid `MODULECODE`."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* `modules n/Computer Graphics m/CS3241` - Adds a module `Computer Graphics` with module code `CS3241`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "to the modules list."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* `modules n/Effective Communication for Computing Professionals m/CS2101` - Adds a module `Effective Communication"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "for Computing Professionals` with module code `CS2101` to the modules list."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "Once enter the command into the command box, the module should appear at the bottom of the modules list:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "![add_module](images/moduletab_addmodule.png)"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "Figure 11: TR4CKER after executing `modules n/Effective Communication for Computing Professionals m/CS2101`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.4.3 Assigning a task to a module"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "Now with modules being created in the previous section, you may want to start assigning tasks to those modules."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "This will be done through the edit command in [_section 3.2.6_](#326-editing-pending-tasks-edit)."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "Format: `edit INDEX [m/MODULECODE]`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* Edits the task at the specified `INDEX` to have module code `MODULECODE`."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* The index refers to a valid index number shown in the Pending Tasks list."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* The module code `MODULECODE` must match one of the module codes of a module in the modules list."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* Note: Editing a task that already has a module assigned will replace it with the edited module."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* `edit 1 m/CS3241` - Edits the 1st task to be tagged to the module with module code `CS3241`."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "**:information_source: Assigning a module code when creating a Task:**\u003cbr\u003e"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "The optional field `[m/MODULECODE]` can be used in a similar way as other optional fields."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "For example, it can be included when using the `add` command in [_section 3.2.3_](#323-adding-new-tasks-add),"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "to assign tasks to modules straight away."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "This shows task 3 under **Pending Tasks** that has not been assigned a module:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "![assign module before](images/moduletab_assignmodule_before.png)"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 12: TR4CKER before executing `edit 3 m/CS3241`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "After entering the command into the command box, the edited task should be tagged with the module code:"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "![assign module after](images/moduletab_assignmodule_after.png)"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 13: TR4CKER after executing `edit 3 m/CS3241`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "Now that the task has been assigned a module code, it should appear in the Module tab under its module:"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "![assign module result](images/moduletab_assignmodule_result.png)"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 14: TR4CKER updated Module tab after executing `edit 3 m/CS3241`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "As seen from *Figure 12* and *Figure 13* above, module codes tagged onto tasks will appear as a pink coloured tag under the"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "tasks\u0027 name."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.4.4 Un-assigning a task from a module"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "Maybe you have assigned the wrong module to your task? Or maybe you just want to get rid of it. Modules can be un-assigned"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "from tasks in a similar way to the previous section."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "Format: `edit INDEX m/del`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* Deletes module code assignment from task at the specified `INDEX`."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* The index refers to a valid index number shown in the Pending Tasks list."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* Instead of providing a module code with `m/MODULECODE`, the input `m/del` signifies deleting a module code."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* `edit 3 m/del` - Deletes the module code from the 3rd task."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "After entering the command into the command box, the module code should be removed from the task:"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "![unassign module](images/moduletab_unassignmodule.png)"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 15: TR4CKER after executing `edit 3 m/del`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.4.5 Deleting a module"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "After finishing up a semester and bringing things to a close, it\u0027s time to remove these modules as you will not be"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "needing them anymore.\u003cbr\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "Make sure that no remaining tasks are still assigned to the module first before you can delete it."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "Format: `modules del/INDEX`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* Deletes a module at the specified `INDEX`."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* The index refers to a valid index number shown in the module list."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* Warning: This action is irreversible!"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* `modules del/1` - Deletes the 1st module in the modules list."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "First, look for the module index beside the module code and name, here **Computer Graphics** has an `INDEX` of `9`:"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "![delete module before](images/moduletab_deletemodule_before.png)"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "Figure 16: TR4CKER before executing `modules del/9`"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "After entering the command with the specified `INDEX` into the command box, the module should have been removed:"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "![delete module after](images/moduletab_deletemodule_after.png)"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "Figure 17: TR4CKER after executing `modules del/9`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "## 3.5. Countdown (Wen Ling)"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "cwenling"
        },
        "content": "You can countdown to your most essential upcoming events in the Countdown tab. You can know at a quick glance, how many"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "cwenling"
        },
        "content": "you have left to that Final Exam or that birthday party."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.5.1. Switching to Countdown tab: `countdown`"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "cwenling"
        },
        "content": "To switch to the Countdown tab, simply type `countdown` into the command line. You can also click on the Countdown button"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "cwenling"
        },
        "content": "on the tabs menu at the top."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "cwenling"
        },
        "content": "Format: `countdown`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "cwenling"
        },
        "content": "Once you have entered this command, TR4CKER should look like this:"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "cwenling"
        },
        "content": "![switch tab](images/countdowntab_switchtab.png)"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 18: TR4CKER after executing `countdown`"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "cwenling"
        },
        "content": "The `Upcoming Events` panel shows the list of upcoming events that are counted down to."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "cwenling"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* `countdown` - Switches to Countdown tab, showing the list of events."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.5.2. Adding a new event to countdowns list"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "cwenling"
        },
        "content": "You can add an event to the list of events, and TR4CKER helps you to countdown to it."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "cwenling"
        },
        "content": "Format: `countdown n/NAME d/DATE`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* Adds an event with name `NAME` and date `DATE` to the Countdown events list."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* Both fields are compulsory and can be in any order."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* `NAME` must be in the alphanumeric format (only containing letters and numbers) and preferably under"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "cwenling"
        },
        "content": "100 characters long, so that it can be displayed in the box without being truncated."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* `DATE` must be a day in the future (i.e. NOT today or any day before today) and be in the format"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "cwenling"
        },
        "content": "`DD-MM-YYYY` or `DD-MMM-YYYY`."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "cwenling"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* `countdown d/31-12-2020 n/New Years Eve Countdown Party at Scarlets` - Adds an event `New Years Eve Countdown Party"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "cwenling"
        },
        "content": "at Scarlets` with date `31-Dec-2020` to the Countdowns list of events."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* `countdown n/CS1231 Final Exam d/30-Nov-2020` - Adds an event `CS1231 Final Exam` with date `30-Nov-2020` to the"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "cwenling"
        },
        "content": "Countdowns list of events."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "cwenling"
        },
        "content": "![add_new](images/countdowntab_addnew.png)"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 19: TR4CKER after executing `countdown n/ES2660 Final Presentation d/05-Nov-2020`"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.5.3. Adding an event from tasks list"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "cwenling"
        },
        "content": "You can add an event that is based on a current task in the tasks list (as seen in the homepage of TR4CKER under the"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "cwenling"
        },
        "content": "`Pending Tasks` panel) to your list of countdowns. TR4CKER will help you to countdown to this event, in addition to"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "cwenling"
        },
        "content": "tracking it in the tasks list."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "cwenling"
        },
        "content": "Format: `countdown task/INDEX`"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* Converts the task at index `INDEX` of the task list into an event, and adds this event to the Countdowns events list."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* `INDEX` has to be a valid index, numbered according to the list in the home page of TR4CKER."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* The deadline of this task needs to be a day in the future (i.e. NOT today or any day before today)."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* Note: any subsequent changes to the task in the task list, such as editing the description or name of the task,"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "cwenling"
        },
        "content": "will not be reflected in the event."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "cwenling"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* `countdown task/1` - Adds an event to the Countdowns list of events based on the task at index `1` of the tasks list."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "cwenling"
        },
        "content": "![add_task_before](images/countdowntab_addtask_before.png)"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 20: Home page of TR4CKER which shows the list of tasks that you can add as an event, in the `Pending Tasks` panel"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "cwenling"
        },
        "content": "on the left."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "cwenling"
        },
        "content": "![add_task_after](images/countdowntab_addtask_after.png)"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 21: TR4CKER after executing `countdown task/2`. The task at index `2` in Figure 20 is added at index `9` of the"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "cwenling"
        },
        "content": "Countdowns events list."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.5.4. Deleting an event from countdowns list"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "cwenling"
        },
        "content": "You can delete an event from your list of events if you no longer want to countdown to it, or if it is over."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "cwenling"
        },
        "content": "Format: `countdown del/INDEX`"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* Deletes the task at index `INDEX` of the events list."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* `INDEX` has to be a valid index, numbered according to the list in Countdown tab."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* Warning: This action is irreversible!"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "cwenling"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* `countdown del/8` - Deletes the event at index `8` of the Countdowns list."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "cwenling"
        },
        "content": "![delete_before](images/countdowntab_delete_before.png)"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 22: Countdown tab of TR4CKER which shows you the current list of events."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "cwenling"
        },
        "content": "![delete_after](images/countdowntab_delete_after.png)"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 23: TR4CKER after executing `countdown del/2`. Event at index `2` of Figure 22 is deleted."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "## 3.6. Planner (Rui Ling)"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "You can view an overview of your schedule in a calendar view and have your tasks list side-by-side using the Planner"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "tab. By having an overview of your upcoming schedule, you would be able to better manage your time and hence"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "be more productive!"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.6.1. Switching to Planner tab: `planner`"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "If you would like to switch to Planner tab without clicking on the Planner tab button, you can do so easily through the"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "CLI, by just typing `planner`."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Format: `planner`"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Once you enter `planner` into the command box, TR4CKER should look like this:"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "![switch tab](images/plannertab_switchtab.png)"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 24: TR4CKER after executing `planner`"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Note:**"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "By default, TR4CKER will circle today\u0027s date and the show you the tasks due on that day."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* `planner` - Switches to Planner tab, showing calendar view of today and tasks due today."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.6.2. Switching calendar view and tasks list"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "If you would like to view the calendar on specific date/month, and with the tasks due on that date beside, you can"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "use the different commands as explained below."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "#### 3.6.2.1. Go to today or tomorrow"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "For the ease of accessing today\u0027s and tomorrow\u0027s tasks list, TR4CKER has provided you with 2 commands that you can use!"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Short forms like \"tdy\" for \"today\" and \"tmr\" for \"tomorrow\" also allow you to save time without typing the full words."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "##### 3.6.2.1.1. Today"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "You can view today\u0027s tasks list using this command."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Format: `planner goto/today` or `planner goto/tdy`"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "First, you enter the command into the command box to go to today:"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "![goto today command](images/plannertab_gototoday.png)"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 25: TR4CKER before executing `planner goto/tdy`"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Then, TR4CKER will change planner tab to today\u0027s calendar view and tasks due today:"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "![goto today result](images/plannertab_gototoday1.png)"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 26: TR4CKER after executing `planner goto/tdy`"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Note:**"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Input can only be `today` or `tdy`. There are no other alternatives."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* `planner goto/today`"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* `planner goto/tdy`"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "will both give you today\u0027s calendar view and tasks due today."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "##### 3.6.2.1.2. Tomorrow"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "You can view tomorrow\u0027s tasks list using this command."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Format: `planner goto/tomorrow` or `planner goto/tmr`"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "First, you enter the command into the command box to go to tomorrow:"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "![goto tomorrow command](images/plannertab_gototomorrow.png)"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 27: TR4CKER before executing `planner goto/tmr`"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Then, TR4CKER will change planner tab to tomorrow\u0027s calendar view and tasks due tomorrow:"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "![goto tomorrow result](images/plannertab_gototomorrow1.png)"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 28: TR4CKER after executing `planner goto/tmr`"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Note:**"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Input can only be `tomorrow` or `tmr`. There are no other alternatives."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* `planner goto/tomorrow`"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* `planner goto/tmr`"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "will both give you tomorrow\u0027s calendar view and tasks due tomorrow."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.6.2.2. Go to specific date"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "For the ease of accessing of a specific date\u0027s tasks list, TR4CKER has provided you this command that you can use!"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Format: `planner goto/DATE`"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "First, you enter the command into the command box to go to a specific date:"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "![goto date command](images/plannertab_gotodate.png)"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 29: TR4CKER before executing `planner goto/08-11-2020`"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Then, TR4CKER will change planner tab to the calendar view and tasks due on the input date you provided:"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "![goto date result](images/plannertab_gotodate1.png)"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 30: TR4CKER after executing `planner goto/08-11-2020`"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "**:information_source: Important points to note when entering the date:**\u003cbr\u003e"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "The formats accepted for date are:"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* dd-MM-yyyy and dd-MMM-yyyy"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    * dd: the corresponding days in 2 numbers"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    * MM: the corresponding month in 2 numbers"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    * MMM: the corresponding month in 3 letters (First letter must be capitalised, e.g. Jan, Sep)"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    * yyyy: the corresponding year in 4 numbers"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    "
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* `planner goto/02-12-2020` - Shows you the calendar view of December 2020, with 2nd December 2020 being circled, and"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "shows you the tasks due on 2nd December 2020."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* `planner goto/28-Feb-2021` - Shows you the calendar view of February 2021, with 28th February 2021 being circled, and"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "shows you the tasks due on 28th February 2021."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.6.2.3. Go to specific month"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "For the ease of accessing of a specific month\u0027s tasks list, TR4CKER has provided you this command that you can use!"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Format: `planner goto/MONTH`"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "First, you enter the command into the command box to go to a specific month:"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "![goto month command](images/plannertab_gotomonth.png)"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 31: TR4CKER before executing `planner goto/Sep-2021`"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Then, TR4CKER will change planner tab to the calendar view and tasks due on the input month you provided:"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "![goto month result](images/plannertab_gotomonth1.png)"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 32: TR4CKER after executing `planner goto/Sep-2021`"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Note:**"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "By default, TR4CKER will circle the first day of the month you inputted and show you the tasks due on the first day of"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "the input month."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "**:information_source: Important points to note when entering the month:**\u003cbr\u003e"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "The formats accepted for month are:"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* MM-yyyy and MMM-yyyy"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    * MM: the corresponding month in 2 numbers"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    * MMM: the corresponding month in 3 letters (First letter must be capitalised, e.g. Jan, Sep)"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    * yyyy: the corresponding year in 4 numbers"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    "
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* `planner goto/12-2020` - Shows you the calendar view of December 2020, with 1st December 2020 being circled, and"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "shows you the tasks due on 1st December 2020."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* `planner goto/Feb-2021` - Shows you the calendar view of February 2021, with 1st February 2021 being circled, and"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "shows you the tasks due on 1st February 2021."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "### 3.6.3. Indicators on Calendar"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "You would have realised there are different colours tagged to every day in the calendar. To allow you to have a better"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "overview of your schedule, Planner tab allows you to check if your upcoming days are busy!"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "The figure below shows the indicators:"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "![indicator](images/plannertab_indicator.png)"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Figure 33: Indicators (circled in red) on calendar"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "The indicator colours and their meanings are:"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* No indicator - no tasks due on that date"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* Green indicator - 2 or lesser tasks due on that date"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* Red indicator - more than 2 tasks due on that date"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "## 3.7. Saving the data"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "cwenling"
        },
        "content": "TR4CKER saves data in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "# FAQ"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "the data of your previous TR4CKER home folder."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "# Command summary"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* **Help**: `help`"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* **Exit**: `exit`"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* **Add**: `add n/NAME des/DESCRIPTION [dl/DEADLINE] [m/MODULE_CODE] [t/TAG]...`"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* **List**: `list`"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* **Done**: `done INDEX [p/COMPLETION_STATUS]`"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "* **Add todo task**: `todo INDEX`"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* **Edit Pending tasks**: `edit INDEX [n/NAME] [des/DESCRIPTION] [dl/DEADLINE]`"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* **Edit Tags of Pending tasks**: `tag INDEX [old/TAG_TO_DELETE]... [new/NEW_TAG]...`"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* **Find Pending tasks**: `find [KEYWORD]...`"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* **Delete Pending tasks**: `delete INDEX`"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* **Edit Expired tasks**: `edit expired INDEX [n/NAME] [dl/DEADLINE] [des/DESCRIPTION]`"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* **Delete Expired tasks**: `delete expired INDEX`"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* **View today\u0027s tasks in Planner**: `planner goto/today` or `planner goto/tdy`"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* **View tomorrow\u0027s tasks in Planner**: `planner goto/tomorrow` or `planner goto/tmr`"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* **View a specific date\u0027s tasks in Planner**: `planner goto/DATE`"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* **View a specific month\u0027s tasks in Planner**: `planner goto/MONTH`"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* **Clear all tasks**: `clear`"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 282,
      "yingqi0607": 29,
      "hanweic53": 175,
      "cwenling": 74,
      "-": 114,
      "ethan-l-m-e": 117
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteTask(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveTr4cker(Tr4cker)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 2,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "hide empty members"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Tr4cker *-right-\u003e \"1\" UniqueTaskList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Tr4cker *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "UniqueTagList -[hidden]down- UniqueTaskList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "UniqueTagList -[hidden]down- UniqueTaskList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "UniqueTaskList o-right-\u003e Task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Task -up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Task *--\u003e CompletionStatus"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Task *--\u003e Deadline"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Task *--\u003e Name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Task *--\u003e TaskDescription"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 11,
      "-": 11
    }
  },
  {
    "path": "docs/diagrams/CountdownActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": ":User inputs an Add Countdown Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": ":TR4CKER parses Add Countdown Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "if () then ([input has no additional arguments])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    :TR4CKER switches to Countdown tab;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "else ([input has additional arguments])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    :TR4CKER parses arguments;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    note right"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    Error in parsing, such as using the wrong"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    prefix or giving insufficient arguments"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    will result in a Parse Exception."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    end note"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    if () then ([add countdown from tasklist])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        :TR4CKER converts task at given"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        index to a countdown event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        :TR4CKER adds converted event"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        to list of countdown events;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    else ([add new countdown not from tasklist])"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": "         :TR4CKER parses the given parameters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": "         to create a new countdown event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": "         :TR4CKER adds new countdown event to list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": "         of countdown events;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     endif"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": ":TR4CKER switches to Countdown tab;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cwenling"
        },
        "content": ":TR4CKER displays result of Countdown"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": "Command in feedback display box;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": ":TR4CKER displays updated countdown list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cwenling"
        },
        "content": "in countdown list panel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": "endif"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": "stop"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "cwenling": 34
    }
  },
  {
    "path": "docs/diagrams/DailySequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ":User inputs a list command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ":TR4CKER shows a list of all current task names;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ":User inputs task index(es) that he/she wants to add to daily todo list;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "if() then ([task index is valid])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    :TR4CKER adds the task in daily todo list;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "else ([task index is invalid])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    :Error message prompting a valid index is shown;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    :User inputs a valid index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    :TR4CKER adds the task in daily todo list;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ":TR4CKER switches to Daily tab;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ":Todo list in Daily tab is updated and shown;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "stop"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yingqi0607": 18
    }
  },
  {
    "path": "docs/diagrams/EditActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "(*) --\u003e \"User requests to edit deadline of an Expired task\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "--\u003e \"TR4CKER parses deadline\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "if \"\" then"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "--\u003e [deadline is a valid future date]  \"modify deadline\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "--\u003e \u003d\u003d\u003d B1 \u003d\u003d\u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "--\u003e \"task added to Pending Tasks panel\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "--\u003e \u003d\u003d\u003d B2 \u003d\u003d\u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003d\u003d\u003d B1 \u003d\u003d\u003d --\u003e \"task removed from Expired Tasks panel\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "-\u003e \u003d\u003d\u003d B2 \u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "--\u003e (*)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "else"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "--\u003e [else] \"displays error message\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "--\u003e (*)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "hanweic53": 17
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Class Tr4ckerParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "LogicManager --\u003e\"1\" Tr4ckerParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Tr4ckerParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 3,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Interface ReadOnlyTr4cker \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Class Tr4cker"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Class ReadOnlyTr4cker"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Package Task {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Class Task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "Class CompletionStatus"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "Class Deadline"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Class TaskDescription"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Class UniqueTaskList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Tr4cker .up.|\u003e ReadOnlyTr4cker"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "ModelManager o--\u003e \"1\" Tr4cker"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Tr4cker *--\u003e \"1\" UniqueTaskList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "UniqueTaskList o--\u003e \"*\" Task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Task *--\u003e CompletionStatus"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Task *--\u003e Deadline"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Task *--\u003e Name"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Task *--\u003e TaskDescription"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Task *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "Name -[hidden]right-\u003e Deadline"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "Deadline -[hidden]right-\u003e TaskDescription"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "TaskDescription -[hidden]right-\u003e CompletionStatus"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "ModelManager --\u003e\"1\" Task : filtered list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 17,
      "yingqi0607": 2,
      "cwenling": 2,
      "-": 34,
      "ethan-l-m-e": 1
    }
  },
  {
    "path": "docs/diagrams/PlannerActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ":User inputs a planner command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ":PlannerCommand is parsed;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "if () then ([input has no \"goto/\"])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    :TR4CKER switches to Planner tab;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "else ([input has \"goto/\"])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    :Check validity of input;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    note right"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    Error in parsing is not shown here."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    In which this case, only an error"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    message will be shown in result box."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    end note"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "if () then ([is today])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    :User requested for today\u0027s"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    calendar view and tasks list;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "elseif () then ([is tomorrow])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    :User requested for tomorrow\u0027s"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    calendar view and tasks list;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "elseif () then ([is date])"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    :User requested for a specific"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    date\u0027s calendar view and tasks list;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "else ([is month])"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    :User requested for a specific"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    month\u0027s calendar view and tasks list;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "endif"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    :Update tasks list;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    :Update calendar;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "endif"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    :Show Planner tab;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    :Planner tab is updated and feedback"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     to user is shown in result box;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "stop"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 36
    }
  },
  {
    "path": "docs/diagrams/PlannerClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "skinparam arrowColor PLANNER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "skinparam classBackgroundColor PLANNER_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "skinparam ClassAttributeFontColor #FFFFFF"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "class Logic LOGIC_COLOR {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    +getPlannerFilteredTaskList(): ObservableList\u003cTask\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "class PlannerTabWindow {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    +PlannerTabWindow(Logic)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    +updateCalendar(CommandResult): void"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "class PlannerCalendarPanel {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    +PlannerCalendarPanel(PlannerDay)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    +fillCalendarTable(PlannerDay): void"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    +clearCalendar(): void"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    +changeCalendarMonthYear(YearMonth): void"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "class PlannerDayCard {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    +PlannerDayCard(PlannerDay)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    +clear(): void"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "class PlannerDay {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    +PlannerDay(LocalDate)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    +{static} getCurrDay(): PlannerDay"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    +createFirstDayOfMonth(): PlannerDay"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "class PlannerTaskListPanel {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    +PlannerTaskListPanel(ObservableList\u003cTask\u003e)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "PlannerTabWindow -right-\u003e Logic"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "PlannerTabWindow \"1\" *-down-\u003e \"1\" PlannerCalendarPanel : \u003c is stored in"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "PlannerTabWindow \"1\" *-down-\u003e \"1\" PlannerTaskListPanel : \u003c is stored in"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "PlannerCalendarPanel \"1\" *-down-\u003e \"plannerDayCards *\" PlannerDayCard"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "PlannerCalendarPanel \"1\" --\u003e \"*\" PlannerDay"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "PlannerDayCard \"1\" --\u003e \"1\" PlannerDay"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 46
    }
  },
  {
    "path": "docs/diagrams/PlannerSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Alice -\u003e Bob: Authentication Request"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Bob --\u003e Alice: Authentication Response"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Alice -\u003e Bob: Another authentication Request"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Alice \u003c-- Bob: another authentication Response"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "@enduml"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "participant \":PlannerTabWindow\" as PlannerTabWindow UI_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "participant \":Tr4ckerParser\" as Tr4ckerParser LOGIC_COLOR"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "participant \":PlannerCommandParser\" as PlannerCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "participant \"plannerCommand:PlannerCommand\" as PlannerCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "participant \"commandResult:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "end box"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "[-\u003e MainWindow : executeCommand(\"planner goto/today\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "MainWindow -\u003e LogicManager : execute(\"planner goto/today\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "LogicManager -\u003e Tr4ckerParser : parseCommand(\"planner goto/today\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "activate Tr4ckerParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "create PlannerCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Tr4ckerParser -\u003e PlannerCommandParser : PlannerCommandParser()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "activate PlannerCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "PlannerCommandParser --\u003e Tr4ckerParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "deactivate PlannerCommandParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Tr4ckerParser -\u003e PlannerCommandParser : parse(\"planner goto/today\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "activate PlannerCommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "PlannerCommandParser -\u003e PlannerCommandParser : parseGotoDay(\"today\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "activate PlannerCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "PlannerCommandParser --\u003e PlannerCommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "deactivate PlannerCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "create PlannerCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "PlannerCommandParser -\u003e PlannerCommand : PlannerCommand()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "activate PlannerCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "PlannerCommand --\u003e PlannerCommandParser : plannerCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "deactivate PlannerCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "PlannerCommandParser --\u003e Tr4ckerParser : plannerCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "deactivate PlannerCommandParser"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Tr4ckerParser --\u003e LogicManager : plannerCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "deactivate Tr4ckerParser"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "destroy PlannerCommandParser"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "LogicManager -\u003e PlannerCommand : execute(model)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "activate PlannerCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "destroy Tr4ckerParser"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "PlannerCommand -\u003e CommandResult : CommandResult()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "CommandResult --\u003e PlannerCommand : commandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "PlannerCommand --\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "deactivate PlannerCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "destroy CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "LogicManager --\u003e MainWindow : commandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "destroy PlannerCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "MainWindow -\u003e MainWindow : handleShowTabPlanner()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "destroy LogicManager"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "MainWindow --\u003e MainWindow"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "MainWindow -\u003e PlannerTabWindow : updateCalendar(commandResult)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "activate PlannerTabWindow"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "PlannerTabWindow --\u003e MainWindow"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "deactivate PlannerTabWindow"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "[\u003c-- MainWindow : result"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "destroy PlannerTabWindow"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 92
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "hide empty members"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Interface Tr4ckerStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Class JsonTr4ckerStorage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "StorageManager o--\u003e Tr4ckerStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "JsonTr4ckerStorage .left.|\u003e Tr4ckerStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "JsonTr4ckerStorage .down.\u003e JsonSerializableTr4ckerStorage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "JsonSerializableTr4ckerStorage .right.\u003e JsonSerializableTask"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "JsonSerializableTask .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 8,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/TaskWithModuleActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ":User wants to add a task to a module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "if () then ([new task])"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ":User requests to add new task with module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "else ([existing task])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ":User requests to edit task to associate with module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "endif"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "if () then ([module exists])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    :Task added to main pending tasks panel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    :Task added to module task list;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "else ([module does not exist])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    :displays error message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "stop"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ethan-l-m-e": 17
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "!define PLANNER_COLOR #CC0066"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u0027hide members"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 3,
      "-": 74
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":AddressBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "ecp -\u003e ec ++: index, editTaskDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "-": 20
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "title: TR4CKER"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "[![CI Status](https://github.com/ay2021s1-cs2103t-t10-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/ay2021s1-cs2103t-t10-2/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "[![codecov](https://codecov.io/gh/ay2021s1-cs2103t-t10-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/ay2021s1-cs2103t-t10-2/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "**TR4CKER is a desktop application for busy students to manage their tasks.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* If you are interested in using TR4CKER, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* If you are interested in developing TR4CKER, the [**Developer Guide**](DeveloperGuide.html) is a great place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "cwenling": 6,
      "-": 13
    }
  },
  {
    "path": "docs/team/cwenling.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "title: Chia Wen Ling\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "## Project: TR4CKER"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "TR4CKER is a desktop app that helps SoC students track their tasks, meet their deadlines, and stay productive. It is"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "optimized for Computing students familiar with CLI, who can manage their tasks efficiently by typing in commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dcwenling)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* **Morphing of AddressBook:**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  * Refactor Phone class to Deadline class: [\\#19](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/19)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* **New Feature**: Started done command feature."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  * What it does: Allows users to update the completion status of a task in percentage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  * Justification: This feature allows users to update the completion status of a task using a more intuitive command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  \\(`done`) instead of updating it using the Edit feature."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  * Highlights: This new feature allows users to either increase or decrease the completion status of a task, which"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  makes it flexible for users to use as they may realise that the task has more to ddo than they first realised."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* **New Feature**: Added countdown tab."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  * What it does: Allows users to view their upcoming events as a list of countdowns in a separate tab."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  * Justification: This feature provides users with the flexibility of adding a separate type of thing to track,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  namely an event, which does not fit the mold of a `task`. This feature is a one-stop insight into the upcoming events"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  that the user has, including Examinations, and other important dates such as festivals, in order to serve as a"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  reminder for how much time they have left."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  * Highlights: This new feature tells the user how many days there are, until a particular event, rather than just"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  showing the date of an event\u0027s occurrence. Users are able to add a new event, or delete an event, without affecting"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  their tasks list. The list of events automatically sorts whenever a new event is added or deleted or upon"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  starting the application. Users are also able to query the number of events they have in a specified number of days"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  from now."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* **Enhancements**:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  * Updated GUI to include the mascot and tasklist header: [\\#83](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/83)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  * Create GUI for countdown tab to be displayed: [\\#101](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/101),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  [\\#115](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/115)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  * Update tab menu of GUI to have more consistent naming: [\\#174](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/174)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 56.16% to 59.86%: [\\#175](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/175)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    * Added documentation for the feature `done`: [\\#52](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/52)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    * Added documentation for the feature `countdown`: [\\#125](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/125)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    * Update the Project Scope and Glossary under Appendix: Requirements: [\\#12](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/12)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    * Added documentation for the feature `countdown`: [\\#96](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/96)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    * Updated documentation for the feature `countdown`: [\\#102](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/102)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* **Team-based tasks**:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  * Setting up GitHub team organisation and repo:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    * Update `README.md` with `CI` and `CodeCov`: [\\#49](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/49)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  * Project management:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    * Managed release `v1.3` on GitHub [v1.3](https://github.com/AY2021S1-CS2103T-T10-2/tp/releases/tag/v1.3)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    * Maintained issue tracker on GitHub"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cwenling"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#50](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/50),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  [\\#51](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/51), [\\#61](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/61),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  [\\#62](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/62), [\\#65](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/65),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  [\\#81](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/81), [\\#105](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/105),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  [\\#126](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/126)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (during Practical Dry Run): [Issues link](https://github.com/cwenling/ped/issues)"
      }
    ],
    "authorContributionMap": {
      "cwenling": 66
    }
  },
  {
    "path": "docs/team/ethan-l-m-e.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "title: Lim Ethan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "## Project: TR4CKER"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "TR4CKER is a desktop app that helps SoC students track their tasks, meet their deadlines, and stay productive. It is"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "optimized for Computing students familiar with CLI, who can manage their tasks efficiently by typing in commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dethan-l-m-e)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* **Morphing of AddressBook:**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "  * Refactor Email class to CompletionStatus class: [\\#34](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/34)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* **Change to existing feature**: Updated `find` command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "  * Change: Find command now returns results even if query only matches partially to task name."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "  * Justification: Less strict searching, users do not need to remember exact task names they may have forgotten over time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* **Change to existing feature**: Updated `edit` \u0026 `add` command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "  * Change: Add command can now add task with module, Edit command now can edit module of a task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* **New Feature**: Added Module tab."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "  * What it does: Allows users view tasks according to module code in a separate tab."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "  * Justification: This feature provides users with the functionality to create modules and assign tasks to them. This lets"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "  users view their tasks according to module code instead of according to deadlines. This way users do not have to search"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "  specifically for particular modules."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "  * Highlights: Users create modules in the Module tab, and then assign tasks in the Home page with the particular"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "  module code. Assigning a task will let it appear automatically in the Module tab, under the same module."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* **Enhancements**:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "  * Updated UI appearance of Module tab."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "  * Added tab switching and updated UI for highlighting current tab: [\\#69](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/69)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* **Documentation:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    * Edited documentation for `find` command: [\\#53](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/53)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    * Added documentation for the feature `modules`: [\\#134](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/134)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    * Added Use cases (UC04 - UC07): [\\#15](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/15)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    * Added documentation for the feature `modules`: [\\#100](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/100)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* **Team-based tasks**:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "  * Project management:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    * Maintained issue tracker on GitHub"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "  * PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (during Practical Dry Run): [Issues link](https://github.com/ethan-l-m-e/ped/issues)"
      }
    ],
    "authorContributionMap": {
      "ethan-l-m-e": 51
    }
  },
  {
    "path": "docs/team/hanweic53.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "title: Cheak Han Wei\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "## Project: TR4CKER"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "TR4CKER is a desktop app that helps SoC students track their tasks, meet their deadlines, and stay productive. It is"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "optimized for Computing students familiar with CLI, who can manage their tasks efficiently by typing in commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dhanweic53)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* **Morphing of AddressBook:**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "  * Refactor Person name to Task name. [#39](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/39)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* **Change to existing feature**: Updated `add` command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    * Change: Let Deadline be an optional parameter and set a default Deadline (Today, 2359) when users do not enter a Deadline."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    * Justification: Adds convenience to users especially when users want to create a Task that\u0027s due by Today to include in the Daily Tab."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* **New Feature**: Tasks are split into 3 Categories."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "  * What it does: Displays tasks separately as 3 Task lists namely Pending Tasks, Expired Tasks and Completed Tasks, in the Home tab."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "  * Justification: Makes the viewing of Tasks easier as compared to one long consolidated task list. "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "  * Highlights: Allows users to manipulate tasks in different Categories separately."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* **New Feature**: Add `delete expired` and `edit expired` commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "  * What it does: Allows users to edit the deadlines of expired tasks that are overdue but incomplete."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "   It also gives users a chance to remove the tasks completely. "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "  * Justification: Having overdue incomplete tasks is an area of concern to the users and users will want to either "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "  continue working on them or remove them from TR4CKER completely. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "  * Highlights: Once users edit the Deadline of an expired task, they can only enter a future Deadline and the expired task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "  will be shifted from the Expired Tasks panel to the Pending Tasks Panel immediately."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "      "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* **New Feature**: Support the use of Natural Deadlines and more than one DateTime format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "  * What it does: Allows users to use natural deadlines (E.g. Today, Monday, Sunday) "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "  and other DateTime formats (E.g. 01-01-2020, 01-Jan-2020)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "  * Justification: Adds convenience to users especially in cases whereby the users know that they have a tasks due next week, and they don\u0027t"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "  need to check the calendar for the exact date when they add the task into TR4CKER."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "  * Highlights: Users can just enter the date without the time and TR4CKER will set 2359 as the default Deadline timing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "  This adds convenience to the users when they only have the deadline day in mind and a specific timing is not required. "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* **Enhancements**:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "  * Updated UI appearance of Command Box and Home tab."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from % to %:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "  "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    * Added Table of Contents and Summary of Commands table."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    * Added Navigation guide for switching between tabs."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    * Edited documentation for `add` command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    * Added Use cases (UC01 - UC03) under Appendix: Requirements."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* **Team-based tasks**:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "  * Project management:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    * Managed release `v1.2`, `v1.3` on GitHub"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "  * PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (during Practical Dry Run): [Issues link](https://github.com/hanweic53/ped/issues)"
      }
    ],
    "authorContributionMap": {
      "hanweic53": 59,
      "ethan-l-m-e": 2
    }
  },
  {
    "path": "docs/team/ruilingk.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "title: Koh Rui Ling\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "## Project: TR4CKER"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "TR4CKER is a desktop app that helps SoC students track their tasks, meet their deadlines, and stay productive. It is"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "optimized for Computing students familiar with CLI, who can manage their tasks efficiently by typing in commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Given below are my contributions to the project:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003druilingk)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* **Morphing of AddressBook:**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Refactor Person class to Task class: [\\#14](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/14)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Changed AB3 traces to TR4CKER in Developer Guide: [\\#186](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/186)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* **Change to existing feature**: Updated edit command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Change: Edit command now no longer edit tags for tasks as there is a tag command to meet this purpose."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* **New Feature**: Added tag command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * What it does: Allows users to add and/or delete tag(s) from an existing task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Justification: This feature makes TR4CKER more intuitive for users to use as it does not override current tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  (which was what it used to do in AB3). It can add tags to existing tags, and delete specific existing tags without"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  having to delete all the tags."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Highlights: This new feature can add and/or delete multiple tags at one go without users having to type multiple commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  Users will also be provided feedback on their inputs. If users try to add tags which already existed, or users try to"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  delete tags which do not exist, TR4CKER will inform users the specific tags in the result box."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* **New Feature**: Added planner tab."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * What it does: Allows users to view their tasks in a calendar view with tasks list side-by-side."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Justification: This feature provides users another perspective of their tasks. By viewing their tasks in a monthly"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  calendar view with different indicators, they would be able to plan their time ahead and hence be more productive."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  Users can also view their tasks on the specific dates they input, so it will be clearer than just a tasks list sorted"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  in chronological order."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Highlights: This new feature has a calendar and tasks list. The calendar shows a monthly view, with indicators on the"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  dates. For example, no indicator means there are no tasks due on that day. Green indicator means there is less than 2"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  tasks due on that day, and red indicator means there is more than 2 tasks due on that day. The tasks list also updates"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  accordingly to the date inputs users provide. "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* **Enhancements**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Updated GUI colour scheme for tasks box: [\\#68](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/68)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 73.07% to 75.23%: [\\#81](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/81)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Polished GUI colour scheme for Planner tab: [\\#104](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/104)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    * Edited documentation for `Quickstart`, `Features` and the feature `edit`: [\\#50](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/50)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    * Added documentation for the feature `tag`: [\\#61](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/61)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    * Added documentation for the feature `planner`: [\\#105](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/105), [\\#131](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/131)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    * Updated formatting and update documentation for the feature `planner`: [\\#184](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/184)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    * Added Non-Functional Requirements (NFRs) under Appendix: Requirements: [\\#13](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/13)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    * Added documentation for the feature `planner`: [\\#88](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/88), [\\#97](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/97)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    * Updated documentation for the feature `planner`: [\\#186](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/186)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* **Team-based tasks**:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Setting up tools:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    * Update `README.md` with `CI` and `CodeCov`: [\\#49](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/49)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    * Enable assertions in `build.gradle`: [\\#88](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/88)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Project management:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    * Managed release `v1.1` on GitHub"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    * Maintained issue tracker on GitHub"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#15](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/15), [\\#101](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/101),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  [\\#112](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/112), [\\#125](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/125),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  [\\#126](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/126), [\\#175](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/175)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (during Practical Dry Run): [Issues link](https://github.com/ruilingk/ped/issues)"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 70
    }
  },
  {
    "path": "docs/team/yingqi0607.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "title: Lin Yingqi\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "## Project: TR4CKER"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "TR4CKER is a desktop app that helps SoC students track their tasks, meet their deadlines, and stay productive. It is"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "optimized for Computing students familiar with CLI, who can manage their tasks efficiently by typing in commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dyingqi0607)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "* **Morphing of AddressBook**:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "  * Refactor Address class to TaskDescription class.[#44](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/44)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "* **Change to exiting feature**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "  * Change: List command will now list out names all pending tasks to cooperate with the new todo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "* **New Feature: Added Daily tab**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "  * What it does: Allows users to add existing tasks to a daily todo list so that users can plan what they aim to complete for the day."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "  * Justification: This feature helps users to decide what they want to complete for a day so that there is a daily plan "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "  for them to keep track for their pending tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "  * Highlights: This feature has a daily todo list. Users only need to choose from existing pending tasks and add them into "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "  daily todo list by indicating the task indexes. They do not need to create new daily todo task. This saves the trouble of having to add tasks two times."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "* **Enhancements**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "  * Updated UI appearance for background and heading: [#85](https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/85)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    * Added documentation for the feature `daily` : [#103] (https://github.com/AY2021S1-CS2103T-T10-2/tp/pull/103)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    * Edited documentation for `find` and `list` command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    * Added User Stories under Appendix: Requirements."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    * Added Documentation for the feature `daily`."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (during Practical Dry Run): [Issues link](https://github.com/yingqi0607/ped/issues)"
      }
    ],
    "authorContributionMap": {
      "yingqi0607": 40
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "This command allows users of the TR4CKER application to add optional remarks to people in their tr4cker and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/taskDescription/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " * Changes the remark of an existing person in the tr4cker."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.tr4cker.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Create a new `Remark` in `seedu.tr4cker.model.task`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "Simply add the following to [`seedu.tr4cker.ui.TaskCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/tr4cker.json` before running it! Not doing so will cause AddressBook to default to an empty tr4cker!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getDeadline(), personToEdit.getCompletionStatus(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "ruilingk": 6,
      "yingqi0607": 4,
      "-": 383,
      "ethan-l-m-e": 1
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `taskDescription` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "The `taskDescription` field in `Person` is actually an instance of the `seedu.tr4cker.model.task.TaskDescription` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "1. Safe delete the field `taskDescription` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "1. Remove the usages of `taskDescription` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `taskDescription` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `taskDescription` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$taskDescription` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "![$taskDescription](../images/remove/$taskDescription.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "private Label taskDescription;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cwenling"
        },
        "content": "\u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "\u003cLabel fx:id\u003d\"taskDescription\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$taskDescription\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "\u003cLabel fx:id\u003d\"completionStatus\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$completionStatus\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `taskDescription` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cwenling"
        },
        "content": "**`invalidPersonTr4cker.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    \"deadline\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \"completionStatus\": 20,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    \"taskDescription\": \"description 1\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "You can go through each individual `json` file and manually remove the `taskDescription` field."
      }
    ],
    "authorContributionMap": {
      "yingqi0607": 13,
      "cwenling": 3,
      "-": 85,
      "ethan-l-m-e": 2
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.tr4cker.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [d/DEADLINE] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "       Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "       Person editedPerson \u003d createEditedPerson(personToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "       model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "       persons.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    3.  Save the tr4cker in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    6.  Add a new entity to tr4cker"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 2,
      "yingqi0607": 2,
      "-": 245,
      "ethan-l-m-e": 1
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ReadOnlyTr4cker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.storage.JsonTr4cker;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.storage.StorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.ui.Ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.ui.UiManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Tr4cker ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        seedu.tr4cker.storage.Tr4cker tr4cker \u003d new JsonTr4cker(userPrefs.getTr4ckerFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        storage \u003d new StorageManager(tr4cker, userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s Tr4cker and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * The data from the sample Tr4cker will be used instead if {@code storage}\u0027s Tr4cker is not found,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * or an empty Tr4cker will be used instead if errors occur when reading {@code storage}\u0027s Tr4cker."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Optional\u003cReadOnlyTr4cker\u003e tr4ckerOptional;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        ReadOnlyTr4cker initialData;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            tr4ckerOptional \u003d storage.readTr4cker();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            if (!tr4ckerOptional.isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Tr4cker\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            initialData \u003d tr4ckerOptional.orElseGet(SampleDataUtil::getSampleTr4cker);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Tr4cker\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            initialData \u003d new seedu.tr4cker.model.Tr4cker();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Tr4cker\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            initialData \u003d new seedu.tr4cker.model.Tr4cker();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Tr4cker\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.info(\"Starting Tr4cker \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping TR4CKER ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 41,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private static final String LOG_FILE \u003d \"tr4cker.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "cwenling": 1,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_DISPLAYED_INDEX \u003d \"The module index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public static final String MESSAGE_INVALID_TODO_DISPLAYED_INDEX \u003d \"The todo index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 3,
      "yingqi0607": 1,
      "cwenling": 1,
      "-": 10,
      "ethan-l-m-e": 1
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 2,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Represents an error during conversion of data from one format to another."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static final ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 4,
      "-": 139
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true //partial word match still true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        String preppedWordLowerCase \u003d preppedWord.toLowerCase();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        Predicate\u003cString\u003e containsIgnoreCase \u003d w -\u003e w.toLowerCase().contains(preppedWordLowerCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                .anyMatch(containsIgnoreCase); //use preppedWord::equalsIgnoreCase for equals instead of contains"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * Returns true if {@code s} represents an integer"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * e.g. -1, 0, 1, 2, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * e.g. empty string, \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static boolean isInteger(String s) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 2,
      "hanweic53": 18,
      "-": 64,
      "ethan-l-m-e": 5
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ReadOnlyTr4cker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.daily.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.TaskDueInPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/** API of the Logic component. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns the Tr4cker."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @see seedu.tr4cker.model.Model#getTr4cker()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    ReadOnlyTr4cker getTr4cker();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tasks. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of pending tasks. */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredPendingTaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of expired tasks. */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredExpiredTaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of completed tasks. */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredCompletedTaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /** Returns an unmodifiable view of the list of modules. */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tasks for PlannerDay. */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    ObservableList\u003cTask\u003e getPlannerFilteredTaskList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of events. */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of todos. */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    ObservableList\u003cTodo\u003e getFilteredTodoList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /** Updates an unmodifiable view of the filtered list of tasks for Module tab. */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    void updateFilteredModuleList(Predicate\u003cModule\u003e predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /** Updates an unmodifiable view of the filtered list of tasks for Daily tab. */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    void updateFilteredTodoList(Predicate\u003cTodo\u003e predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Updates an unmodifiable view of the filtered list of tasks for Planner tab. */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    void updatePlannerFilteredTaskList(TaskDueInPredicate taskDueInPredicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Returns the user prefs\u0027 tr4cker file path. */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    Path getTr4ckerFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Returns the user prefs\u0027 GUI settings. */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Set the user prefs\u0027 GUI settings. */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 27,
      "yingqi0607": 7,
      "hanweic53": 6,
      "cwenling": 5,
      "-": 25,
      "ethan-l-m-e": 7
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.parser.Tr4ckerParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ReadOnlyTr4cker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.Event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.daily.Todo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.Module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.TaskDueInPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.storage.Storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Tr4ckerParser tr4ckerParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        tr4ckerParser \u003d new Tr4ckerParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Command command \u003d tr4ckerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            storage.saveTr4cker(model.getTr4cker());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public ReadOnlyTr4cker getTr4cker() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return model.getTr4cker();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredPendingTaskList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return model.getFilteredPendingTaskList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredExpiredTaskList() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return model.getFilteredExpiredTaskList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredCompletedTaskList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return model.getFilteredCompletedTaskList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return model.getFilteredModuleList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public ObservableList\u003cTask\u003e getPlannerFilteredTaskList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return model.getPlannerFilteredTaskList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return model.getFilteredEventList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public ObservableList\u003cTodo\u003e getFilteredTodoList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return model.getFilteredTodoList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        model.updateFilteredModuleList(predicate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public void updateFilteredTodoList(Predicate\u003cTodo\u003e predicate) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        model.updateFilteredTodoList(predicate);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void updatePlannerFilteredTaskList(TaskDueInPredicate taskDueInPredicate) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(taskDueInPredicate);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        model.updatePlannerFilteredTaskList(taskDueInPredicate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Path getTr4ckerFilePath() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return model.getTr4ckerFilePath();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 41,
      "yingqi0607": 11,
      "hanweic53": 10,
      "cwenling": 8,
      "-": 59,
      "ethan-l-m-e": 10
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_TASK_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Adds a task to TR4CKER."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Looks like you\u0027re trying to use the \" + COMMAND_WORD + \" command: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + \"Adds a task to TR4CKER\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + \"Compulsory Parameters: \" + PREFIX_NAME + \"NAME \" + PREFIX_TASK_DESCRIPTION + \"TASKDESCRIPTION\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + \"Optional Parameters: \" + PREFIX_DEADLINE + \"DEADLINE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULECODE (must be of existing module)\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + PREFIX_TAG + \"TAG...(more than one tag is allowed)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + \"(E.g. \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + PREFIX_NAME + \"CS2103T tP \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + PREFIX_DEADLINE + \"10-Oct-2021 1010 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + PREFIX_TASK_DESCRIPTION + \"Update User Guide \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS2103T\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + PREFIX_TAG + \"CS2103T \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + PREFIX_TAG + \"UG\" + \")\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in TR4CKER.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE \u003d \"Given module does not exist in TR4CKER.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Task}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (!model.hasValidModuleField(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MODULE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        commandResult.setHomeTab();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 16,
      "hanweic53": 15,
      "-": 32,
      "ethan-l-m-e": 11
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Tr4cker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Clears TR4CKER."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"TR4CKER has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        model.setTr4cker(new Tr4cker());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        commandResult.setHomeTab();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 7,
      "hanweic53": 4,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final LocalDate localDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final YearMonth yearMonth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /** TR4CKER shows Module tab. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private boolean showModules;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    /** TR4CKER shows Home tab. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private boolean showHome;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** TR4CKER shows Planner tab. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private boolean showPlanner;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /** TR4CKER shows Countdown tab. */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private boolean showCountdown;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /** TR4CKER shows Daily tab. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private boolean showDaily;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.localDate \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.yearMonth \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.showPlanner \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.showCountdown \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.showDaily \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.showHome \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.showPlanner \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.showCountdown \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.showDaily \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.showHome \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * {@code localDate} and {@code yearMonth}. For usage of PlannerCommand."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public CommandResult(String feedbackToUser, LocalDate localDate, YearMonth yearMonth) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.showPlanner \u003d true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.showCountdown \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        this.showDaily \u003d false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.showHome \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.localDate \u003d localDate;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.yearMonth \u003d yearMonth;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * For usage of CountdownCommand."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean isShowCountdown) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.showPlanner \u003d false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        this.showDaily \u003d false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.showCountdown \u003d isShowCountdown;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.showHome \u003d false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.localDate \u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.yearMonth \u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * For usage of ModuleCommand."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static CommandResult createModuleTabSwitchCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        CommandResult newCommandResult \u003d new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        newCommandResult.showModules \u003d true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        newCommandResult.showPlanner \u003d false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        newCommandResult.showCountdown \u003d false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        newCommandResult.showDaily \u003d false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        newCommandResult.showHome \u003d false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return newCommandResult;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * For usage of DailyCommand."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public static CommandResult createDailyTabSwitchCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        CommandResult newCommandResult \u003d new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        newCommandResult.showModules \u003d false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        newCommandResult.showPlanner \u003d false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        newCommandResult.showCountdown \u003d false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        newCommandResult.showDaily \u003d true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        newCommandResult.showHome \u003d false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return newCommandResult;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * For usage of HomeCommand."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static CommandResult createHomeTabSwitchCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        CommandResult newCommandResult \u003d new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        newCommandResult.showHome \u003d true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        newCommandResult.showModules \u003d false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        newCommandResult.showPlanner \u003d false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        newCommandResult.showCountdown \u003d false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        newCommandResult.showDaily \u003d false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return newCommandResult;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public void setHomeTab() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        showHome \u003d true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public boolean isShowModules() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return showModules;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public boolean isShowPlanner() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return showPlanner;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public boolean isShowHome() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return showHome;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public boolean isShowCountdown() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return showCountdown;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public boolean isShowDaily() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return showDaily;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public LocalDate getLocalDate() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return this.localDate;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public YearMonth getYearMonth() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return this.yearMonth;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 51,
      "yingqi0607": 25,
      "hanweic53": 23,
      "cwenling": 22,
      "-": 66,
      "ethan-l-m-e": 19
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/commands/CountdownCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static java.util.Objects.isNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_COUNTDOWN_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_COUNTDOWN_DAYS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_COUNTDOWN_DELETE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_COUNTDOWN_NEW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.model.countdown.EventDate.MESSAGE_FUTURE_CONSTRAINT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.task.exceptions.TaskConversionException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * Allows user to go to Countdown tab."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cwenling"
        },
        "content": "public class CountdownCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"countdown\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String MESSAGE_SWITCH_TAB_USAGE \u003d COMMAND_WORD + \": Switches to Countdown tab\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String MESSAGE_ADD_COUNTDOWN_USAGE \u003d COMMAND_WORD + \": Adds an event to list in Countdown\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + PREFIX_COUNTDOWN_NEW + \"NAME \" + PREFIX_COUNTDOWN_DATE + \"DATE\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + \"Note: NAME must be alphanumeric, spaces are possible, and DATE must be a valid date in the future!\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + \"Examples: \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_COUNTDOWN_NEW + \"Halloween Party \" + PREFIX_COUNTDOWN_DATE + \"31-Oct-2021\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String MESSAGE_DELETE_COUNTDOWN_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + \": Deletes an event from countdown list\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + PREFIX_COUNTDOWN_DELETE + \"INDEX\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + \"Note: INDEX must be a valid index!\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + \"Examples: \\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_COUNTDOWN_DELETE + \"1\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String MESSAGE_COUNT_DAYS_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + \": Count the number of events in the specified number of days\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + PREFIX_COUNTDOWN_DAYS + \"DAYS\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + \"Note: DAYS must be a valid non-negative number!\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + \"Examples: \\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_COUNTDOWN_DAYS + \"7\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String MESSAGE_GENERIC_COUNTDOWN_USAGE \u003d \"Countdown tab: Add an event,\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + \"delete an event, or switch to countdowns tab.\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + COMMAND_WORD + \" : Switches to Countdown tab\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_COUNTDOWN_NEW + \"NAME \" + PREFIX_COUNTDOWN_DATE + \"DATE\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + \" : Adds an event to list in Countdown\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_COUNTDOWN_DELETE + \"INDEX\" + \" : Deletes an event from countdown list\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String MESSAGE_SWITCH_TAB_SUCCESS \u003d \"Switched to Countdown tab!\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Deleted event from Countdowns: %1$s\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String MESSAGE_ADD_EVENT_SUCCESS \u003d \"New event added to Countdowns added: %1$s\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in TR4CKER.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String MESSAGE_COUNT_EVENTS_IN_DAYS_SUCCESS \u003d \"There are %s event(s) in %s days :\\n%s\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final int INVALID_QUERY_DAYS \u003d -1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final EventName eventName;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final EventDate eventDate;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final boolean isDeleteCountdown;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final int queryDays;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Constructor for CountdownCommand when user wants to switch to Countdown tab."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public CountdownCommand() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.eventName \u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.eventDate \u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.index \u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.isDeleteCountdown \u003d false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.queryDays \u003d INVALID_QUERY_DAYS;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Constructor for CountdownCommand when User wants to add an event."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public CountdownCommand(EventName eventName, EventDate eventDate) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.index \u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.isDeleteCountdown \u003d false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.queryDays \u003d INVALID_QUERY_DAYS;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Constructor for CountdownCommand when user wants to delete an event,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * or add an event from tasks list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public CountdownCommand(Index index, boolean isDeleteCountdown) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.eventName \u003d null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.eventDate \u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.isDeleteCountdown \u003d isDeleteCountdown;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.queryDays \u003d INVALID_QUERY_DAYS;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Constructor for CountdownCommand when user wants to list number of countdowns in {@code days}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public CountdownCommand(int queryDays) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.eventName \u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.eventDate \u003d null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.index \u003d null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.isDeleteCountdown \u003d false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.queryDays \u003d queryDays;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        List\u003cEvent\u003e eventList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // no valid parameters, is a switch tab command"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (isAllNull(eventName, eventDate, index) \u0026\u0026 queryDays \u003d\u003d INVALID_QUERY_DAYS) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return new CommandResult(MESSAGE_SWITCH_TAB_SUCCESS, true);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // is a delete or add from task command"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (isAllNull(eventName, eventDate) \u0026\u0026 queryDays \u003d\u003d INVALID_QUERY_DAYS) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            if (isDeleteCountdown) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                return executeCountdownDelete(model, eventList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                return executeCountdownAddFromTask(model);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // is a  add new countdown command"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (isAllNull(index) \u0026\u0026 queryDays \u003d\u003d INVALID_QUERY_DAYS) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return executeCountdownAddNew(model);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // is a count events in days command"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (isAllNull(eventName, eventDate, index) \u0026\u0026 queryDays !\u003d INVALID_QUERY_DAYS) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return executeCountEventsInDays(eventList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        throw new CommandException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private CommandResult executeCountEventsInDays(List\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        int numEventsInDays \u003d 0;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        StringBuilder listEvents \u003d new StringBuilder();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        for (Event event : eventList) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            if (event.getDaysRemaining() \u003c\u003d queryDays \u0026\u0026 event.getDaysRemaining() \u003e\u003d 0) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                numEventsInDays++;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                listEvents.append(String.format(\"%d. %s\\n\", numEventsInDays, event));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_COUNT_EVENTS_IN_DAYS_SUCCESS,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                numEventsInDays, queryDays, listEvents.toString()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private CommandResult executeCountdownAddFromTask(Model model) throws CommandException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        List\u003cTask\u003e taskList \u003d model.getFilteredPendingTaskList();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assert index !\u003d null;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d taskList.size()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Task taskToConvert \u003d taskList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Event eventToAdd;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            eventToAdd \u003d taskToConvert.toEvent();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        } catch (TaskConversionException tce) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new CommandException(MESSAGE_FUTURE_CONSTRAINT);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (model.hasEvent(eventToAdd)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        model.addEvent(eventToAdd);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_EVENT_SUCCESS, eventToAdd));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private CommandResult executeCountdownAddNew(Model model) throws CommandException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Event eventToAdd \u003d new Event(eventName, eventDate);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (model.hasEvent(eventToAdd)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        model.addEvent(eventToAdd);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_EVENT_SUCCESS, eventToAdd));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private CommandResult executeCountdownDelete(Model model, List\u003cEvent\u003e eventList) throws CommandException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assert index !\u003d null;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d eventList.size()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Event eventToDelete \u003d eventList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        model.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (this \u003d\u003d other) { // short circuit if same object"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        } else if (!(other instanceof CountdownCommand)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            CountdownCommand countdownCommand \u003d (CountdownCommand) other;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return (eventDate \u003d\u003d countdownCommand.eventDate || eventDate.equals(countdownCommand.eventDate))"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    \u0026\u0026 (eventName \u003d\u003d countdownCommand.eventName || eventName.equals(countdownCommand.eventName))"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    \u0026\u0026 (index \u003d\u003d countdownCommand.index || index.equals(countdownCommand.index))"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    \u0026\u0026 isDeleteCountdown \u003d\u003d countdownCommand.isDeleteCountdown;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private static final boolean isAllNull(Object... objects) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        for (Object object : objects) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            if (!isNull(object)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "cwenling": 237
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/commands/DailyCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "public class DailyCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"daily\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public static final String MESSAGE_SWITCH_TAB_USAGE \u003d COMMAND_WORD + \": Switches to Daily tab\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public static final String MESSAGE_SWITCH_TAB_SUCCESS \u003d \"Switched to Daily tab!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Constructor for DailyCommand when user wants to switch to Daily tab."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public DailyCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return CommandResult.createDailyTabSwitchCommandResult(MESSAGE_SWITCH_TAB_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        if (this \u003d\u003d other) { // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        } else if (!(other instanceof DailyCommand)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingqi0607": 35
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Deletes a task identified using it\u0027s displayed index from TR4CKER."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Looks like you\u0027re trying to use the \" + COMMAND_WORD + \" command: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + \"Deletes the task identified by the index number used in the specified task list\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + \"Compulsory Parameter: INDEX (must be a positive integer and valid index number)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + \"To delete task from Pending Tasks: (E.g. \" + COMMAND_WORD + \" 1)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + \"To delete task from Expired Tasks: (E.g. \" + COMMAND_WORD + \" expired 1)\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    protected final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredPendingTaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        commandResult.setHomeTab();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 13,
      "hanweic53": 10,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/commands/DeleteExpiredCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "public class DeleteExpiredCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public DeleteExpiredCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredExpiredTaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        commandResult.setHomeTab();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanweic53": 35
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/commands/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.model.Model.PREDICATE_SHOW_COMPLETED_TASKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.model.Model.PREDICATE_SHOW_PENDING_TASKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.task.CompletionStatus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.task.Deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.task.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.task.TaskDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * Marks the completion status of an existing task in TR4CKER."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Looks like you\u0027re trying to use the \" + COMMAND_WORD + \" command: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + \"Marks the Completion Status of the task identified by the index number used in the Pending Tasks list\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + \"Compulsory Parameter: INDEX (must be a positive integer and valid index number)\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + \"Optional Parameter: \" + PREFIX_COMPLETION_STATUS + \"COMPLETION_STATUS (0-100)\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + \"Please note the following:\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + \"1. Completion status can be increased or decreased but must be different from the current value\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + \"2. Completion status is a percentage of task done and therefore only accepts value from 0 - 100\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + \"3. Completion status is set to 100 by default if not entered\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + \"(E.g. \" + COMMAND_WORD + \" 2 \" + PREFIX_COMPLETION_STATUS + \"50)\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String MESSAGE_DONE_TASK_SUCCESS_DECREASE \u003d \"Decreased Completion Percentage of Task: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String MESSAGE_DONE_TASK_SUCCESS_INCREASE \u003d \"Increased Completion Percentage of Task: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String MESSAGE_COMPLETION_SAME \u003d \"Percentage must be different from current value.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final CompletionStatus completionStatus;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * @param index of the task in the filtered task list to mark as done"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * @param completionStatus new completion status of the task"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public DoneCommand(Index index, CompletionStatus completionStatus) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireNonNull(completionStatus);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.completionStatus \u003d completionStatus;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredPendingTaskList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Task taskToComplete \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Task completedTask \u003d createCompletedTask(taskToComplete, completionStatus);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        model.setTask(taskToComplete, completedTask);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        model.updateFilteredPendingTaskList(PREDICATE_SHOW_PENDING_TASKS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        model.updateFilteredCompletedTaskList(PREDICATE_SHOW_COMPLETED_TASKS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        if (completedTask.getCompletionStatus().compareTo(taskToComplete.getCompletionStatus()) \u003e 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    new CommandResult(String.format(MESSAGE_DONE_TASK_SUCCESS_INCREASE, completedTask));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            commandResult.setHomeTab();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    new CommandResult(String.format(MESSAGE_DONE_TASK_SUCCESS_DECREASE, completedTask));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            commandResult.setHomeTab();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToComplete}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * and new percentage with {@code completionStatus}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private static Task createCompletedTask(Task taskToComplete, CompletionStatus completionStatus)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assert taskToComplete !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Name initialName \u003d taskToComplete.getName();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Deadline initialDeadline \u003d taskToComplete.getDeadline();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CompletionStatus initialCompletionStatus \u003d taskToComplete.getCompletionStatus();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        TaskDescription initialTaskDescription \u003d taskToComplete.getTaskDescription();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        Set\u003cModuleCode\u003e initialModuleCode \u003d taskToComplete.getModuleCode();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Set\u003cTag\u003e initialTags \u003d taskToComplete.getTags();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (completionStatus.equals(initialCompletionStatus)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new CommandException(MESSAGE_COMPLETION_SAME);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return new Task(initialName, initialDeadline, completionStatus,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                initialTaskDescription, initialModuleCode, initialTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (!(other instanceof DoneCommand)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        DoneCommand e \u003d (DoneCommand) other;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u0026\u0026 completionStatus.equals(e.completionStatus);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 2,
      "hanweic53": 22,
      "cwenling": 99,
      "ethan-l-m-e": 3
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_TASK_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.model.Model.PREDICATE_SHOW_PENDING_TASKS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.ModuleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.task.CompletionStatus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.task.Deadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.task.TaskDescription;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Edits the details of an existing task in TR4CKER."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Looks like you\u0027re trying to use the \" + COMMAND_WORD + \" command: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + \"Edits details of the task identified by the index number used in the specified task list\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + \"Compulsory Parameters: INDEX (must be a positive integer) and at least 1 field to be edited\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + \"Fields that can be edited: \" + PREFIX_NAME + \"NAME \" + PREFIX_DEADLINE + \"DEADLINE \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + PREFIX_TASK_DESCRIPTION + \"DESCRIPTION\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + \"To edit task in Pending Tasks: \" + \"(E.g. \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + PREFIX_DEADLINE + \"10-Dec-2020 2300)\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + \"To edit task in Expired Tasks: \" + \"(E.g. \" + COMMAND_WORD + \" expired 1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + PREFIX_DEADLINE + \"10-Dec-2020 2300)\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in TR4CKER.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE \u003d \"Given module does not exist in TR4CKER.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    protected final Index index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    protected final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param index of the task in the filtered task list to edit"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param editTaskDescriptor details to edit the task with"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public EditCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(editTaskDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredPendingTaskList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (!taskToEdit.isSameTask(editedTask) \u0026\u0026 model.hasTask(editedTask)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (!model.hasValidModuleField(editedTask)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MODULE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assert taskToEdit !\u003d null : \"Task to edit should not be null here.\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assert editedTask !\u003d null : \"Edited task should not be null here.\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        model.updateFilteredPendingTaskList(PREDICATE_SHOW_PENDING_TASKS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        commandResult.setHomeTab();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * edited with {@code editTaskDescriptor}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    protected static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Name updatedName \u003d editTaskDescriptor.getName().orElse(taskToEdit.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Deadline updatedDeadline \u003d editTaskDescriptor.getDeadline().orElse(taskToEdit.getDeadline());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        CompletionStatus initialCompletionStatus \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                taskToEdit.getCompletionStatus(); // edit command does not allow editing completion status"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        TaskDescription updatedTaskDescription \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                editTaskDescriptor.getTaskDescription().orElse(taskToEdit.getTaskDescription());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        Set\u003cModuleCode\u003e updatedModuleCode \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                editTaskDescriptor.getModuleCode().orElse(taskToEdit.getModuleCode());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Set\u003cTag\u003e initialTags \u003d taskToEdit.getTags(); // edit command does not allow editing of tags"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return new Task(updatedName, updatedDeadline, initialCompletionStatus,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                updatedTaskDescription, updatedModuleCode, initialTags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Stores the details to edit the task with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * corresponding field value of the task."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        private Deadline deadline;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        private TaskDescription taskDescription;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        private Set\u003cModuleCode\u003e moduleCode;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        public EditTaskDescriptor() {}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            requireNonNull(toCopy);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            setDeadline(toCopy.deadline);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            setDescription(toCopy.taskDescription);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            setModuleCode(toCopy.moduleCode);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, deadline, taskDescription, moduleCode);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        public void setDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        public Optional\u003cDeadline\u003e getDeadline() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return Optional.ofNullable(deadline);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        public void setDescription(TaskDescription taskDescription) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        public Optional\u003cTaskDescription\u003e getTaskDescription() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            return Optional.ofNullable(taskDescription);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "         */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public void setModuleCode(Set\u003cModuleCode\u003e moduleCode) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            this.moduleCode \u003d (moduleCode !\u003d null) ? new HashSet\u003c\u003e(moduleCode) : null;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "         * Returns an unmodifiable module code set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code moduleCode} is null."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "         */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public Optional\u003cSet\u003cModuleCode\u003e\u003e getModuleCode() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            return (moduleCode !\u003d null)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    ? Optional.of(Collections.unmodifiableSet(moduleCode))"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    : Optional.empty();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            if (!(other instanceof EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    \u0026\u0026 getDeadline().equals(e.getDeadline())"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    \u0026\u0026 getTaskDescription().equals(e.getTaskDescription())"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    \u0026\u0026 getModuleCode().equals(e.getModuleCode());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 44,
      "yingqi0607": 9,
      "hanweic53": 21,
      "cwenling": 9,
      "-": 130,
      "ethan-l-m-e": 33
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/commands/EditExpiredCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.model.Model.PREDICATE_SHOW_EXPIRED_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.model.Model.PREDICATE_SHOW_PENDING_TASKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "public class EditExpiredCommand extends EditCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * @param index of the task in the filtered task list to edit"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * @param editTaskDescriptor details to edit the task with"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public EditExpiredCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        super(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredExpiredTaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        if (!taskToEdit.isSameTask(editedTask) \u0026\u0026 model.hasTask(editedTask)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        model.updateFilteredPendingTaskList(PREDICATE_SHOW_PENDING_TASKS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        model.updateFilteredExpiredTaskList(PREDICATE_SHOW_EXPIRED_TASKS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        commandResult.setHomeTab();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "hanweic53": 48
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting TR4CKER as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " * Finds and lists all tasks in tr4cker whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" homework assignment\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        model.updateFilteredPendingTaskList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredPendingTaskList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        commandResult.setHomeTab();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 8,
      "yingqi0607": 1,
      "hanweic53": 4,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 3,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/commands/HomeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanweic53"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "public class HomeCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"home\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String MESSAGE_CHANGE_TAB_ACKNOWLEDGEMENT \u003d \"Switched to Home tab!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return CommandResult.createHomeTabSwitchCommandResult(MESSAGE_CHANGE_TAB_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanweic53": 18
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.model.Model.PREDICATE_SHOW_EXPIRED_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.model.Model.PREDICATE_SHOW_PENDING_TASKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Lists all tasks in TR4CKER to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here are the tasks in your list:\" + \"\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        model.updateFilteredPendingTaskList(PREDICATE_SHOW_PENDING_TASKS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        model.updateFilteredExpiredTaskList(PREDICATE_SHOW_EXPIRED_TASKS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        ObservableList\u003cTask\u003e taskList \u003d model.getFilteredPendingTaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        String displayListNames \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d taskList.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            displayListNames +\u003d i + \". \" + taskList.get(i - 1).getName().toString() + \"\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(MESSAGE_SUCCESS + displayListNames);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        commandResult.setHomeTab();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 4,
      "yingqi0607": 12,
      "hanweic53": 5,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/commands/ModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_MODULE_DELETE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * Allows user to add or delete modules from TR4CKER."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "public class ModuleCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"modules\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String MESSAGE_SWITCH_TAB_USAGE \u003d COMMAND_WORD + \": Switches to Module tab\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Looks like you\u0027re trying to use the \" + COMMAND_WORD + \" command: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            + \"Adds/deletes a module from TR4CKER\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            + \"Add Module Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            + PREFIX_MODULE_NAME + \"MODULE_NAME \" + PREFIX_MODULE_CODE + \"MODULE_CODE\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            + \"Delete Module Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            + PREFIX_MODULE_DELETE + \"INDEX (must be a positive integer and valid index number)\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            + \"Example Add Module: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            + PREFIX_MODULE_NAME + \"Discrete Structures \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS1231S\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            + \"Example Delete Module: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            + PREFIX_MODULE_DELETE + \"2\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String MESSAGE_SWITCH_TAB_SUCCESS \u003d \"Switched to Module tab!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String MESSAGE_MODULE_ADD_SUCCESS \u003d \"New module added: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String MESSAGE_MODULE_DELETE_SUCCESS \u003d \"Deleted module: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in TR4CKER.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String MESSAGE_STILL_HAS_TASKS \u003d \"This module still has related tasks in TR4CKER.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private final Module toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private final Index toDeleteIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Constructor for ModuleCommand when user wants to switch to Module tab."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public ModuleCommand() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        this.toAdd \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        this.toDeleteIndex \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Constructor for ModuleCommand when user wants to add a module."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public ModuleCommand(Module toAdd) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        this.toDeleteIndex \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Constructor for ModuleCommand when user wants to delete a module."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public ModuleCommand(Index toDeleteIndex) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        requireNonNull(toDeleteIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        this.toAdd \u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        this.toDeleteIndex \u003d toDeleteIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (toAdd \u003d\u003d null \u0026\u0026 toDeleteIndex \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            return CommandResult.createModuleTabSwitchCommandResult(MESSAGE_SWITCH_TAB_SUCCESS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (toDeleteIndex \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            assert toAdd !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            if (model.hasModule(toAdd)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            model.addModule(toAdd);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_MODULE_ADD_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        List\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (toDeleteIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        Module moduleToDelete \u003d lastShownList.get(toDeleteIndex.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (model.hasRelatedTasks(moduleToDelete)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new CommandException(MESSAGE_STILL_HAS_TASKS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        model.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MODULE_DELETE_SUCCESS, moduleToDelete));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                || (other instanceof ModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u0026\u0026 (Objects.equals(toAdd, ((ModuleCommand) other).toAdd))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u0026\u0026 (Objects.equals(toDeleteIndex, ((ModuleCommand) other).toDeleteIndex)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ethan-l-m-e": 113
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/commands/PlannerCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_PLANNER_GOTO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.TaskDueInPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.util.GotoDateUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Allows user to go to Planner tab or go to specific date/month of calendar in Planner tab."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class PlannerCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"planner\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String MESSAGE_SWITCH_TAB_USAGE \u003d COMMAND_WORD + \": Switches to Planner tab\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String MESSAGE_GOTO_USAGE \u003d COMMAND_WORD + \": Goes to a specific date/month on Planner tab\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            + \"[\" + PREFIX_PLANNER_GOTO + \"DAY]\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            + \"Examples: \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_PLANNER_GOTO + \"today OR \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_PLANNER_GOTO + \"tdy\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_PLANNER_GOTO + \"tomorrow OR \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_PLANNER_GOTO + \"tmr\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_PLANNER_GOTO + \"12-2020 OR \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_PLANNER_GOTO + \"Dec-2020\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_PLANNER_GOTO + \"25-12-2020 OR \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_PLANNER_GOTO + \"25-Dec-2020\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String MESSAGE_SWITCH_TAB_SUCCESS \u003d \"Switched to Planner tab!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String MESSAGE_GOTO_DATE_SUCCESS \u003d \"Showed tasks on: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final LocalDate localDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final YearMonth yearMonth;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final TaskDueInPredicate taskDueInPredicate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Constructor for PlannerCommand when user wants to switch to Planner tab."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public PlannerCommand() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.message \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.localDate \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.yearMonth \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.taskDueInPredicate \u003d new TaskDueInPredicate(GotoDateUtil.getToday());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assert taskDueInPredicate !\u003d null : \"Predicate should not be null in here.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Constructor for PlannerCommand when user wants to switch to specific date/month."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public PlannerCommand(String message, LocalDate localDate, YearMonth yearMonth,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                          TaskDueInPredicate taskDueInPredicate) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireAllNonNull(message, taskDueInPredicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.localDate \u003d localDate;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.yearMonth \u003d yearMonth;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.taskDueInPredicate \u003d taskDueInPredicate;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (message \u003d\u003d null \u0026\u0026 localDate \u003d\u003d null \u0026\u0026 yearMonth \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            model.updatePlannerFilteredTaskList(taskDueInPredicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return new CommandResult(MESSAGE_SWITCH_TAB_SUCCESS, null, null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        model.updatePlannerFilteredTaskList(taskDueInPredicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String result \u003d String.format(MESSAGE_GOTO_DATE_SUCCESS, message);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return new CommandResult(result, localDate, yearMonth);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (this \u003d\u003d other) { // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else if (!(other instanceof PlannerCommand)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            PlannerCommand plannerCommand \u003d (PlannerCommand) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            if (message \u003d\u003d null \u0026\u0026 ((PlannerCommand) other).message \u003d\u003d null"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    \u0026\u0026 taskDueInPredicate.equals(plannerCommand.taskDueInPredicate)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    \u0026\u0026 localDate \u003d\u003d null \u0026\u0026 (plannerCommand.localDate \u003d\u003d null"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    \u0026\u0026 yearMonth \u003d\u003d null \u0026\u0026 (plannerCommand.yearMonth \u003d\u003d null))) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                assert message !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                return message.equals(plannerCommand.message) // instanceof handles not null"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                        \u0026\u0026 taskDueInPredicate.equals(plannerCommand.taskDueInPredicate)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                        || localDate \u003d\u003d null \u0026\u0026 plannerCommand.localDate \u003d\u003d null"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                        || yearMonth \u003d\u003d null \u0026\u0026 plannerCommand.yearMonth \u003d\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 104
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/commands/TagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_DELETE_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_NEW_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.model.Model.PREDICATE_SHOW_PENDING_TASKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Allows user to add or delete tags from a specified task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class TagCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds/Deletes tag for a task on TR4CKER\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            + \"[\" + PREFIX_NEW_TAG + \"NEW_TAG]... \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            + \"[\" + PREFIX_DELETE_TAG + \"TAG_TO_DELETE]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            + PREFIX_NEW_TAG + \"urgent \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            + PREFIX_DELETE_TAG + \"stillHaveTime\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Tags edited for Task: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String MESSAGE_SUCCESS_DUPLICATE_TAGS \u003d \"\\nAddition of duplicate tags detected: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String MESSAGE_SUCCESS_NON_EXISTING_TAGS \u003d \"\\nDeletion of non-existing tags detected: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Set\u003cTag\u003e tagsToAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Set\u003cTag\u003e tagsToDelete;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param index of the task in the filtered task list to edit the tags."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param tagsToAdd Tags to be added to the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param tagsToDelete Tags to be deleted from the task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public TagCommand(Index index, Set\u003cTag\u003e tagsToAdd, Set\u003cTag\u003e tagsToDelete) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.tagsToAdd \u003d tagsToAdd;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.tagsToDelete \u003d tagsToDelete;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredPendingTaskList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Set\u003cTag\u003e duplicateTags \u003d taskToEdit.addTags(tagsToAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Set\u003cTag\u003e nonExistingTags \u003d taskToEdit.deleteTags(tagsToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task editedTask \u003d new Task(taskToEdit.getName(), taskToEdit.getDeadline(), taskToEdit.getCompletionStatus(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                taskToEdit.getTaskDescription(), taskToEdit.getModuleCode(), taskToEdit.getTags());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assert editedTask !\u003d null : \"Edited task should not be null here.\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        model.updateFilteredPendingTaskList(PREDICATE_SHOW_PENDING_TASKS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedTask, duplicateTags, nonExistingTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Generates a command execution success message when tag(s) are added"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * to and/or removed from {@code taskToEdit}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private String generateSuccessMessage(Task taskToEdit, Set\u003cTag\u003e duplicateTags, Set\u003cTag\u003e nonExistingTags) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (duplicateTags.isEmpty() \u0026\u0026 nonExistingTags.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return String.format(MESSAGE_SUCCESS, taskToEdit);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else if (!duplicateTags.isEmpty() \u0026\u0026 nonExistingTags.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            message +\u003d String.format(MESSAGE_SUCCESS, taskToEdit);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            message +\u003d String.format(MESSAGE_SUCCESS_DUPLICATE_TAGS, duplicateTags);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else if (duplicateTags.isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            message +\u003d String.format(MESSAGE_SUCCESS, taskToEdit);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            message +\u003d String.format(MESSAGE_SUCCESS_NON_EXISTING_TAGS, nonExistingTags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            message +\u003d String.format(MESSAGE_SUCCESS, taskToEdit);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            message +\u003d String.format(MESSAGE_SUCCESS_DUPLICATE_TAGS, duplicateTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            message +\u003d String.format(MESSAGE_SUCCESS_NON_EXISTING_TAGS, nonExistingTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (!(other instanceof TagCommand)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TagCommand e \u003d (TagCommand) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                \u0026\u0026 tagsToAdd.equals(e.tagsToAdd)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                \u0026\u0026 tagsToDelete.equals(e.tagsToDelete);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 116,
      "hanweic53": 1,
      "ethan-l-m-e": 1
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/commands/TodoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.daily.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.task.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " * Allows users to add a todo task in Daily todo list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"todo\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Looks like you\u0027re trying to use the \" + COMMAND_WORD + \" command: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            + \"Adds the task identified by the index number used in the specified task list into Daily todo list\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            + \"Compulsory Parameter: INDEX (must be a positive integer and valid index number)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            + \"To add task from Pending Tasks: (E.g. \" + COMMAND_WORD + \" 1)\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public static final String MESSAGE_ADD_TODO_TASK_SUCCESS \u003d \"Added Daily Todo Task: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TODO_TASK \u003d \"This todo task already exists in Daily Todo List.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    protected final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public TodoCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredPendingTaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        Task taskToAdd \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        Name name \u003d taskToAdd.getName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        Deadline deadline \u003d taskToAdd.getDeadline();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        Todo todoToAdd \u003d new Todo(name, deadline);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        if (model.hasTodo(todoToAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TODO_TASK);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        model.addTodo(todoToAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_TODO_TASK_SUCCESS, todoToAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        if (!(other instanceof TodoCommand)) { // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                || (other instanceof TodoCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((TodoCommand) other).targetIndex));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingqi0607": 67
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_TASK_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.ModuleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.task.CompletionStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.task.Deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.task.TaskDescription;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DEADLINE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                        PREFIX_TASK_DESCRIPTION, PREFIX_MODULE_CODE, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TASK_DESCRIPTION)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        Deadline deadline;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DEADLINE).isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            deadline \u003d ParserUtil.parseDeadline(Deadline.DEFAULT_DATE_TODAY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            deadline \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        CompletionStatus completionStatus \u003d new CompletionStatus(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        TaskDescription taskDescription \u003d ParserUtil.parseDescription("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                argMultimap.getValue(PREFIX_TASK_DESCRIPTION).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        Set\u003cModuleCode\u003e moduleCode;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE_CODE).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            moduleCode \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        Task task \u003d new Task(name, deadline, completionStatus, taskDescription, moduleCode, tagList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return new AddCommand(task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 9,
      "yingqi0607": 2,
      "hanweic53": 7,
      "cwenling": 1,
      "-": 38,
      "ethan-l-m-e": 18
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hid/900\", {@code prefix} \u003d \"d/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * occurrences of \"d/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * {@code argsString} \u003d \"e/hi d/900\", {@code prefix} \u003d \"d/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "cwenling": 3,
      "-": 144
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE \u003d new Prefix(\"dl/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final Prefix PREFIX_TASK_DESCRIPTION \u003d new Prefix(\"des/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final Prefix PREFIX_COMPLETION_STATUS \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final Prefix PREFIX_DELETE_TAG \u003d new Prefix(\"del/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final Prefix PREFIX_NEW_TAG \u003d new Prefix(\"new/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final Prefix PREFIX_MODULE_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final Prefix PREFIX_MODULE_CODE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final Prefix PREFIX_MODULE_DELETE \u003d new Prefix(\"del/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final Prefix PREFIX_PLANNER_GOTO \u003d new Prefix(\"goto/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final Prefix PREFIX_COUNTDOWN_NEW \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final Prefix PREFIX_COUNTDOWN_TASK \u003d new Prefix(\"task/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final Prefix PREFIX_COUNTDOWN_DELETE \u003d new Prefix(\"del/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final Prefix PREFIX_COUNTDOWN_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final Prefix PREFIX_COUNTDOWN_DAYS \u003d new Prefix(\"days/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 5,
      "hanweic53": 1,
      "cwenling": 6,
      "-": 11,
      "ethan-l-m-e": 3
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/parser/CountdownCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_COUNTDOWN_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_COUNTDOWN_DAYS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_COUNTDOWN_DELETE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_COUNTDOWN_NEW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_COUNTDOWN_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.logic.commands.CountdownCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * Parses input arguments and creates a new CountdownCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": "public class CountdownCommandParser implements Parser\u003cCountdownCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CountdownCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * and returns an CountdownCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public CountdownCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                PREFIX_COUNTDOWN_NEW, PREFIX_COUNTDOWN_DATE, PREFIX_COUNTDOWN_TASK,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                PREFIX_COUNTDOWN_DELETE, PREFIX_COUNTDOWN_DAYS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // should not have preamble whatsoever"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String string \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (!string.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    CountdownCommand.MESSAGE_SWITCH_TAB_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // user wants to go to Countdown tab"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (areNonePrefixesPresent(argMultimap, PREFIX_COUNTDOWN_NEW, PREFIX_COUNTDOWN_DATE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                PREFIX_COUNTDOWN_TASK, PREFIX_COUNTDOWN_DELETE, PREFIX_COUNTDOWN_DAYS)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return new CountdownCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // user wants to add a new event"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (areAllPrefixesPresent(argMultimap, PREFIX_COUNTDOWN_NEW, PREFIX_COUNTDOWN_DATE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u0026\u0026 areNonePrefixesPresent(argMultimap, PREFIX_COUNTDOWN_DELETE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                PREFIX_COUNTDOWN_TASK, PREFIX_COUNTDOWN_DAYS)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return getCountdownCommandAdd(argMultimap);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // user wants to delete an event"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (areAllPrefixesPresent(argMultimap, PREFIX_COUNTDOWN_DELETE)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u0026\u0026 areNonePrefixesPresent(argMultimap, PREFIX_COUNTDOWN_NEW,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                PREFIX_COUNTDOWN_DATE, PREFIX_COUNTDOWN_TASK, PREFIX_COUNTDOWN_DAYS)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return getCountdownCommandDelete(argMultimap);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // user wants to add an event from tasks list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (areAllPrefixesPresent(argMultimap, PREFIX_COUNTDOWN_TASK)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u0026\u0026 areNonePrefixesPresent(argMultimap, PREFIX_COUNTDOWN_DATE,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                PREFIX_COUNTDOWN_DELETE, PREFIX_COUNTDOWN_NEW, PREFIX_COUNTDOWN_DAYS)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return getCountdownCommandAddFromTask(argMultimap);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // user wants to count number of events in x days"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (areNonePrefixesPresent(argMultimap, PREFIX_COUNTDOWN_DELETE, PREFIX_COUNTDOWN_DATE,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                PREFIX_COUNTDOWN_NEW, PREFIX_COUNTDOWN_TASK)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u0026\u0026 areAllPrefixesPresent(argMultimap, PREFIX_COUNTDOWN_DAYS)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return getCountdownCommand(argMultimap);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // insufficient params for add"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (areAnyPrefixesPresent(argMultimap, PREFIX_COUNTDOWN_NEW, PREFIX_COUNTDOWN_DATE)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u0026\u0026 !areAnyPrefixesPresent(argMultimap, PREFIX_COUNTDOWN_DELETE, PREFIX_COUNTDOWN_TASK)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    CountdownCommand.MESSAGE_ADD_COUNTDOWN_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        throw new ParseException(CountdownCommand.MESSAGE_GENERIC_COUNTDOWN_USAGE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private CountdownCommand getCountdownCommand(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        int numDays;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            numDays \u003d ParserUtil.parseNumDays(argMultimap.getValue(PREFIX_COUNTDOWN_DAYS).get());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    CountdownCommand.MESSAGE_COUNT_DAYS_USAGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return new CountdownCommand(numDays);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private CountdownCommand getCountdownCommandAddFromTask(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_COUNTDOWN_TASK).get());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    CountdownCommand.MESSAGE_SWITCH_TAB_USAGE), pe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return new CountdownCommand(index, false); // false since has task prefix"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private CountdownCommand getCountdownCommandDelete(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_COUNTDOWN_DELETE).get());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    CountdownCommand.MESSAGE_DELETE_COUNTDOWN_USAGE), pe);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return new CountdownCommand(index, true); // true since have delete prefix"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private CountdownCommand getCountdownCommandAdd(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            EventName eventName \u003d ParserUtil.parseEventName(argMultimap.getValue(PREFIX_COUNTDOWN_NEW).get());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            EventDate eventDate \u003d ParserUtil.parseEventDate(argMultimap.getValue(PREFIX_COUNTDOWN_DATE).get());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return new CountdownCommand(eventName, eventDate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    CountdownCommand.MESSAGE_ADD_COUNTDOWN_USAGE), pe);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Returns true if any of the prefixes contains non empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private static boolean areAnyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireAllNonNull(argumentMultimap, prefixes);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Returns true if all of the prefixes contain non empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static boolean areAllPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireAllNonNull(argumentMultimap, prefixes);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Returns true if all of the prefixes contain empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static boolean areNonePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireAllNonNull(argumentMultimap, prefixes);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return Stream.of(prefixes).noneMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cwenling": 156
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/parser/DailyCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.logic.commands.DailyCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " * Parses input arguments and creates a new DailyCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "public class DailyCommandParser implements Parser\u003cDailyCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DailyCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * and returns an DailyCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public DailyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        // user wants to go to Daily tab"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        String string \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        if (!string.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                    DailyCommand.MESSAGE_SWITCH_TAB_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return new DailyCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingqi0607": 29
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.logic.commands.DeleteExpiredCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        String[] trimmedArgsTokens \u003d args.trim().split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        int lengthArgsTokens \u003d trimmedArgsTokens.length;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assert lengthArgsTokens \u003e 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        boolean isDeleteExpiredTask \u003d lengthArgsTokens \u003d\u003d 2 \u0026\u0026 trimmedArgsTokens[0].equals(\"expired\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        if (!(lengthArgsTokens \u003d\u003d 1 || isDeleteExpiredTask)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            if (isDeleteExpiredTask) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(trimmedArgsTokens[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                return new DeleteExpiredCommand(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(trimmedArgsTokens[0]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                return new DeleteCommand(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        } catch (ParseException | ArrayIndexOutOfBoundsException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 5,
      "hanweic53": 20,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/parser/DoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * Parses input arguments and creates a new DoneCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * and returns a DoneCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public DoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_COMPLETION_STATUS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_COMPLETION_STATUS)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                return new DoneCommand(index, ParserUtil.parseCompletionStatus((Integer.toString(100))));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                return new DoneCommand(index,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                        ParserUtil.parseCompletionStatus(argMultimap.getValue(PREFIX_COMPLETION_STATUS).get()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    DoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * Returns true if any of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        requireAllNonNull(argumentMultimap, prefixes);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanweic53": 17,
      "cwenling": 34
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_TASK_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.logic.commands.EditExpiredCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Parses input arguments and creates a new EditCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        boolean isEditExpiredTask \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        if (args.trim().length() \u003e 6 \u0026\u0026 args.trim().substring(0, 7).equals(\"expired\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            isEditExpiredTask \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        ArgumentMultimap argMultimap \u003d getArgMultimap(args, isEditExpiredTask);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            index \u003d ParserUtil.parseTaskIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            throw new ParseException(pe.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        EditCommand.EditTaskDescriptor editTaskDescriptor \u003d new EditCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            editTaskDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DEADLINE).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            editTaskDescriptor.setDeadline(ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TASK_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            editTaskDescriptor.setDescription("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    ParserUtil.parseDescription(argMultimap.getValue(PREFIX_TASK_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE_CODE).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            if (argMultimap.getValue(PREFIX_MODULE_CODE).get().equals(\"del\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                editTaskDescriptor.setModuleCode(new HashSet\u003c\u003e()); // for deleting module code"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                editTaskDescriptor.setModuleCode("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                        ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE_CODE).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        if (isEditExpiredTask) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            return new EditExpiredCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return new EditCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private ArgumentMultimap getArgMultimap(String args, boolean isEditExpiredTask) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            if (isEditExpiredTask) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                return ArgumentTokenizer.tokenize(args.trim().substring(8), PREFIX_NAME, PREFIX_DEADLINE,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                        PREFIX_TASK_DESCRIPTION, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                return ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DEADLINE,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                        PREFIX_TASK_DESCRIPTION, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 12,
      "yingqi0607": 1,
      "hanweic53": 26,
      "cwenling": 2,
      "-": 33,
      "ethan-l-m-e": 16
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 5,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/parser/ModuleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_MODULE_DELETE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.logic.commands.ModuleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * Parses input arguments and creates a new ModuleCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "public class ModuleCommandParser implements Parser\u003cModuleCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ModuleCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * and returns an ModuleCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public ModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                args, PREFIX_MODULE_NAME, PREFIX_MODULE_CODE, PREFIX_MODULE_DELETE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // user wants to go to Module tab"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_NAME, PREFIX_MODULE_CODE, PREFIX_MODULE_DELETE)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            String string \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            if (!string.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                        ModuleCommand.MESSAGE_SWITCH_TAB_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            return new ModuleCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // user wants to add a new Module"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_MODULE_NAME)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u0026\u0026 arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_MODULE_DELETE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u0026\u0026 argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            String moduleName \u003d argMultimap.getValue(PREFIX_MODULE_NAME).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            String moduleCode \u003d argMultimap.getValue(PREFIX_MODULE_CODE).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            Module module \u003d ParserUtil.parseModule(moduleName, moduleCode);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            return new ModuleCommand(module);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // user wants to delete an existing Module"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_NAME, PREFIX_MODULE_CODE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u0026\u0026 arePrefixesPresent(argMultimap, PREFIX_MODULE_DELETE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u0026\u0026 argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_MODULE_DELETE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            return new ModuleCommand(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Returns true if any of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ethan-l-m-e": 67
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.task.CompletionStatus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.task.Deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.task.TaskDescription;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.model.util.NaturalDateUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String MESSAGE_INVALID_DAYS \u003d \"Number of days given is not a non-zero  unsigned integer.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * @throws ParseException if the specified task index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static Index parseTaskIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        if (StringUtil.isInteger(trimmedIndex) \u0026\u0026 !StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        } else if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Parses a {@code String deadline} into a {@code Deadline}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * @throws ParseException if the given {@code deadline} is invalid."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static Deadline parseDeadline(String deadline) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String trimmedDeadline \u003d deadline.trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        if (NaturalDateUtil.isNaturalDeadline(trimmedDeadline)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            trimmedDeadline \u003d NaturalDateUtil.convertToDateTime(trimmedDeadline);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        if (!Deadline.isDeadlineWithTime(trimmedDeadline)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            trimmedDeadline +\u003d Deadline.DEFAULT_TIME;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (!Deadline.isValidDeadline(trimmedDeadline)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new ParseException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        if (!Deadline.isFutureDeadline(trimmedDeadline)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            throw new ParseException(Deadline.MESSAGE_FUTURE_CONSTRAINT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return new Deadline(trimmedDeadline, true);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Parses a {@code String tr4cker} into an {@code description}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @throws ParseException if the given {@code tr4cker} is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public static TaskDescription parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        if (!TaskDescription.isValidTaskDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            throw new ParseException(TaskDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return new TaskDescription(trimmedDescription);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Parses a {@code String completionStatus} into an {@code CompletionStatus}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * @throws ParseException if the given {@code completionStatus} is invalid."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static CompletionStatus parseCompletionStatus(String completionStatus) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireNonNull(completionStatus);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String trimmedCompletionStatus \u003d completionStatus.trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        int trimmedCompletionStatusInt;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            trimmedCompletionStatusInt \u003d Integer.parseInt(trimmedCompletionStatus);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        } catch (NumberFormatException numberFormatException) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new ParseException(CompletionStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (!CompletionStatus.isValidCompletionStatus(trimmedCompletionStatusInt)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new ParseException(CompletionStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return new CompletionStatus(trimmedCompletionStatusInt);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Parses a {@code String name} and {@code String moduleCode} into a {@code Module}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * @throws ParseException if the given {@code moduleName} or {@code moduleCode} is invalid."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static Module parseModule(String moduleName, String moduleCode) throws ParseException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        requireAllNonNull(moduleName, moduleCode);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        String trimmedName \u003d moduleName.trim();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        String trimmedModuleCode \u003d moduleCode.trim();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (!Module.isValidModuleName(trimmedName)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new ParseException(Module.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(trimmedModuleCode)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new ParseException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return new Module(trimmedName, new ModuleCode(trimmedModuleCode));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Parses a {@code String moduleCode} into a {@code Set\u003cModuleCode\u003e}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * @throws ParseException if the given {@code moduleCode} is invalid."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static Set\u003cModuleCode\u003e parseModuleCode(String moduleCode) throws ParseException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        final Set\u003cModuleCode\u003e moduleCodeSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        String trimmedModuleCode \u003d moduleCode.trim();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(trimmedModuleCode)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new ParseException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        moduleCodeSet.add(new ModuleCode(moduleCode));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return moduleCodeSet;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Parses a {@code String eventName} into a {@code EventName}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * @throws ParseException if the given {@code eventName} is invalid."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static EventName parseEventName(String eventName) throws ParseException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireNonNull(eventName);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String trimmedEventName \u003d eventName.trim();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (!EventName.isValidName(trimmedEventName)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new ParseException(EventName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return new EventName(trimmedEventName);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Parses a {@code String eventDate} into a {@code EventDate}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * @throws ParseException if the given {@code eventName} is invalid."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static EventDate parseEventDate(String eventDate) throws ParseException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireNonNull(eventDate);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String trimmedEventDate \u003d eventDate.trim();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (!EventDate.isValidDate(trimmedEventDate)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new ParseException(EventDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (!EventDate.isFutureDate(trimmedEventDate)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new ParseException(EventDate.MESSAGE_FUTURE_CONSTRAINT);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return new EventDate(trimmedEventDate, true);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Parses a {@code String numDays} into an {@code int numDays}."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Leading and trailing whitespace will be trimmed."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * @throws ParseException if the {@code numDays} is invalid."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static int parseNumDays(String numDays) throws ParseException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireNonNull(numDays);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String trimmedNumDays \u003d numDays.trim();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        int numDaysInt;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            numDaysInt \u003d Integer.parseInt(trimmedNumDays);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DAYS);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (numDaysInt \u003c 0) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DAYS);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return numDaysInt;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 8,
      "yingqi0607": 8,
      "hanweic53": 30,
      "cwenling": 86,
      "-": 84,
      "ethan-l-m-e": 39
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/parser/PlannerCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_PLANNER_GOTO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.PlannerCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.TaskDueInPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.util.GotoDateUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Parses input arguments and creates a new PlannerCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class PlannerCommandParser implements Parser\u003cPlannerCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PlannerCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * and returns an PlannerCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public PlannerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PLANNER_GOTO);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // user wants to go to Planner tab"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PLANNER_GOTO)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            String string \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            if (!string.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                        PlannerCommand.MESSAGE_SWITCH_TAB_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            assert string.isEmpty() : \"There should not be any input after planner here.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return new PlannerCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // user wants to goto a specific day/date/month"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return parseGotoDay(argMultimap.getValue(PREFIX_PLANNER_GOTO).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns true if any of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireAllNonNull(argumentMultimap, prefixes);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Parses {@code String gotoDay} into a {@code PlannerCommand}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @throws ParseException if the given {@code gotoDay} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static PlannerCommand parseGotoDay(String gotoDay) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(gotoDay);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String trimmedGotoDay \u003d gotoDay.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        boolean isToday;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        boolean isTomorrow;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        boolean isValidGotoDate;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        boolean isValidGotoMonth;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        isToday \u003d GotoDateUtil.checkToday(trimmedGotoDay);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        isTomorrow \u003d GotoDateUtil.checkTomorrow(trimmedGotoDay);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        isValidGotoDate \u003d GotoDateUtil.isValidGotoDate(trimmedGotoDay);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        isValidGotoMonth \u003d GotoDateUtil.isValidGotoMonth(trimmedGotoDay);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate localDate \u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        YearMonth yearMonth \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TaskDueInPredicate taskDueInPredicate;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (isToday) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            localDate \u003d GotoDateUtil.getToday();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            message \u003d GotoDateUtil.parseGotoDay(localDate) + \" (TODAY)\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            taskDueInPredicate \u003d new TaskDueInPredicate();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else if (isTomorrow) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            localDate \u003d GotoDateUtil.getTomorrow();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            message \u003d GotoDateUtil.parseGotoDay(localDate) + \" (TOMORROW)\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            taskDueInPredicate \u003d new TaskDueInPredicate(localDate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else if (isValidGotoDate) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            localDate \u003d GotoDateUtil.splitGotoDay(trimmedGotoDay);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            message \u003d GotoDateUtil.parseGotoDay(localDate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            taskDueInPredicate \u003d new TaskDueInPredicate(localDate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else if (isValidGotoMonth) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            yearMonth \u003d GotoDateUtil.splitGotoMonth(trimmedGotoDay);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            message \u003d \"01-\" + GotoDateUtil.parseGotoMonth(yearMonth);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            taskDueInPredicate \u003d new TaskDueInPredicate(yearMonth);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new ParseException(PlannerCommand.MESSAGE_GOTO_USAGE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assert message !\u003d null : \"Message should not be null here.\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assert taskDueInPredicate !\u003d null : \"Predicate should not be null here.\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return new PlannerCommand(message, localDate, yearMonth, taskDueInPredicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 103
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/parser/TagCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_DELETE_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_NEW_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Parses input arguments and creates a new TagCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class TagCommandParser implements Parser\u003cTagCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TagCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * and returns an TagCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public TagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NEW_TAG, PREFIX_DELETE_TAG);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NEW_TAG, PREFIX_DELETE_TAG)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    TagCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assert index !\u003d null : \"Index of task should not be null here.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Set\u003cTag\u003e tagListToAdd \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_NEW_TAG));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Set\u003cTag\u003e tagListToDelete \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_DELETE_TAG));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return new TagCommand(index, tagListToAdd, tagListToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns true if any of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireAllNonNull(argumentMultimap, prefixes);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 60
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/parser/TodoCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.logic.commands.TodoCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " * Parses input arguments and creates a new TodoCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "public class TodoCommandParser implements Parser\u003cTodoCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TodoCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * and returns a TodoCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public TodoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        String[] trimmedArgsTokens \u003d args.trim().split(\" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        int lengthArgsTokens \u003d trimmedArgsTokens.length;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assert lengthArgsTokens \u003e 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        if (!(lengthArgsTokens \u003d\u003d 1)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(trimmedArgsTokens[0]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return new TodoCommand(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingqi0607": 31
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/parser/Tr4ckerParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.logic.commands.CountdownCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.logic.commands.DailyCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.logic.commands.ModuleCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.PlannerCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.logic.commands.TodoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class Tr4ckerParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        case TagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return new TagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return new DoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        case TodoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            return new TodoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        case ModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            return new ModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        case PlannerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return new PlannerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        case CountdownCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return new CountdownCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        case DailyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            return new DailyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        case HomeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            return new HomeCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 22,
      "yingqi0607": 8,
      "hanweic53": 4,
      "cwenling": 8,
      "-": 62,
      "ethan-l-m-e": 4
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.daily.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.model.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/** The API of the Model component. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** {@code Predicate} that always evaluate to true. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    /** {@code Predicate} that evaluates to true when task is not expired. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_PENDING_TASKS \u003d task -\u003e Deadline.isFutureDeadline(task.getDeadline().toString())"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            \u0026\u0026 !task.isCompleted();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    /** {@code Predicate} that evaluates to true when task is expired. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_EXPIRED_TASKS \u003d task -\u003e !Deadline.isFutureDeadline(task.getDeadline().toString())"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            \u0026\u0026 !task.isCompleted();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    /** {@code Predicate} that evaluates to true when task is completed. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_COMPLETED_TASKS \u003d Task::isCompleted;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /** {@code Predicate} that always evaluate to true. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /** {@code Predicate} that always evaluate to true. */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    Predicate\u003cTodo\u003e PREDICATE_SHOW_ALL_TODOS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Replaces user prefs data with the data in {@code userPrefs}. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Returns the user prefs. */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Returns the user prefs\u0027 GUI settings. */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Sets the user prefs\u0027 GUI settings. */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Returns the user prefs\u0027 Tr4cker file path. */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    Path getTr4ckerFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Sets the user prefs\u0027 Tr4cker file path. */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    void setTr4ckerFilePath(Path tr4ckerFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Replaces Tr4cker data with the data in {@code tr4cker}. */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    void setTr4cker(ReadOnlyTr4cker tr4cker);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Returns the Tr4cker. */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    ReadOnlyTr4cker getTr4cker();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Returns true if a task with the same identity as {@code task} exists in Tr4cker. */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /** Returns true if a task with the same module code as {@code module} exists in Tr4cker. */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    boolean hasRelatedTasks(Module module);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Deletes the given task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * The task must exist in Tr4cker."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Adds the given task."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * {@code task} must not already exist in Tr4cker."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /** Returns true if a module with the same identity as {@code module} exists in Tr4cker. */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    boolean hasModule(Module module);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /** Returns true if a {@code task} has a module code that exists in Tr4cker, or if"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * it\u0027s module field is null."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    boolean hasValidModuleField(Task task);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Deletes the given module."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * The module must exist in Tr4cker."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    void deleteModule(Module target);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * {@code module} must not already exist in Tr4cker."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    void addModule(Module module);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * {@code target} must exist in the tr4cker."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in Tr4cker."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /** Returns true if an event with the same identity as {@code event} exists in Tr4cker. */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    boolean hasEvent(Event event);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Deletes the given event."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * The event must exist in Tr4cker."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    void deleteEvent(Event target);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Adds the given event."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * {@code event} must not already exist in Tr4cker."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    void addEvent(Event event);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /** Returns true if a todo with the same identity as {@code todo} exists in Tr4cker. */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    boolean hasTodo(Todo task);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Deletes the given todo."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * The todo must exist in Tr4cker."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    void deleteTodo(Todo target);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Adds the given todo."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * {@code todo} must not already exist in Tr4cker."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    void addTodo(Todo task);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list. */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Returns an unmodifiable view of the filtered pending task list. */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredPendingTaskList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    /** Returns an unmodifiable view of the filtered expired task list. */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredExpiredTaskList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    /** Returns an unmodifiable view of the filtered completed task list. */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredCompletedTaskList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /** Returns an unmodifiable view of the list of modules. */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list for PlannerDay. */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    ObservableList\u003cTask\u003e getPlannerFilteredTaskList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /** Returns an unmodifiable view of the filtered completed task list. */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /** Returns an unmodifiable view of the filtered todo list.*/"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    ObservableList\u003cTodo\u003e getFilteredTodoList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Updates the filter of the filtered pending task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    void updateFilteredPendingTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * Updates the filter of the filtered expired task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    void updateFilteredExpiredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * Updates the filter of the filtered completed task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    void updateFilteredCompletedTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Updates the filter of the filtered module list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    void updateFilteredModuleList(Predicate\u003cModule\u003e predicate);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Updates the filter of the filtered daily todo list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    void updateFilteredTodoList(Predicate\u003cTodo\u003e predicate);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate} for Planner tab."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    void updatePlannerFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Updates the filter of the filtered event list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    void updateFilteredEventList(Predicate\u003cEvent\u003e predicate);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 53,
      "yingqi0607": 28,
      "hanweic53": 30,
      "cwenling": 28,
      "-": 35,
      "ethan-l-m-e": 33
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.daily.Todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.model.task.Deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Represents the in-memory model of TR4CKER data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Tr4cker tr4cker;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredPendingTasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredExpiredTasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredCompletedTasks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private final FilteredList\u003cModule\u003e filteredModules;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final FilteredList\u003cTask\u003e plannerFilteredTasks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final FilteredList\u003cEvent\u003e filteredEvents;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private final FilteredList\u003cTodo\u003e filteredTodos;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Initializes a ModelManager with the given tr4cker and userPrefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public ModelManager(ReadOnlyTr4cker tr4cker, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireAllNonNull(tr4cker, userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Initializing with TR4CKER: \" + tr4cker + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.tr4cker \u003d new Tr4cker(tr4cker);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.tr4cker.getTaskList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        filteredPendingTasks \u003d new FilteredList\u003c\u003e(this.tr4cker.getTaskList().filtered("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            x -\u003e Deadline.isFutureDeadline(x.getDeadline().toString()) \u0026\u0026 !x.isCompleted()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        filteredExpiredTasks \u003d new FilteredList\u003c\u003e(this.tr4cker.getTaskList().filtered("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            x -\u003e !Deadline.isFutureDeadline(x.getDeadline().toString()) \u0026\u0026 !x.isCompleted()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        filteredCompletedTasks \u003d new FilteredList\u003c\u003e(this.tr4cker.getTaskList().filtered("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            Task::isCompleted));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        filteredModules \u003d new FilteredList\u003c\u003e(this.tr4cker.getModuleList().filtered(x -\u003e true));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        plannerFilteredTasks \u003d new FilteredList\u003c\u003e(this.tr4cker.getTaskList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        filteredEvents \u003d new FilteredList\u003c\u003e(this.tr4cker.getEventList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        filteredTodos \u003d new FilteredList\u003c\u003e(this.tr4cker.getTodoList().filtered(x -\u003e true));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this(new Tr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Path getTr4ckerFilePath() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return userPrefs.getTr4ckerFilePath();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setTr4ckerFilePath(Path tr4ckerFilePath) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(tr4ckerFilePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        userPrefs.setTr4ckerFilePath(tr4ckerFilePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TR4CKER \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setTr4cker(ReadOnlyTr4cker tr4cker) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.tr4cker.resetData(tr4cker);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public ReadOnlyTr4cker getTr4cker() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return tr4cker;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return tr4cker.hasTask(task);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public boolean hasRelatedTasks(Module module) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return tr4cker.hasRelatedTasks(module);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        tr4cker.removeTask(target);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        tr4cker.addTask(task);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        updateFilteredPendingTaskList(PREDICATE_SHOW_PENDING_TASKS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        tr4cker.setTask(target, editedTask);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public boolean hasEvent(Event task) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return tr4cker.hasEvent(task);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        tr4cker.removeEvent(target);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void addEvent(Event task) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        tr4cker.addEvent(task);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return tr4cker.hasModule(module);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public boolean hasValidModuleField(Task task) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return tr4cker.hasValidModuleField(task);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        tr4cker.removeModule(target);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        tr4cker.addModule(module);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        updateFilteredModuleList(x -\u003e true);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public boolean hasTodo(Todo task) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return tr4cker.hasTodo(task);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public void deleteTodo(Todo target) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        tr4cker.removeTodo(target);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public void addTodo(Todo task) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        tr4cker.addTodo(task);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        updateFilteredTodoList(PREDICATE_SHOW_ALL_TODOS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * backed by the internal list of {@code versionedTr4cker}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * backed by the internal list of {@code versionedTr4cker}."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredPendingTaskList() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return filteredPendingTasks;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * backed by the internal list of {@code versionedTr4cker}."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredExpiredTaskList() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return filteredExpiredTasks;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * backed by the internal list of {@code versionedTr4cker}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredCompletedTaskList() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return filteredCompletedTasks;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Module}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * backed by the internal list of {@code versionedTr4cker}."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return filteredModules;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * backed by the internal list of {@code versionedTr4cker} for PlannerDay."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Should only show current\u0027s day tasks by default."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public ObservableList\u003cTask\u003e getPlannerFilteredTaskList() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return plannerFilteredTasks;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Event}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * backed by the internal list of {@code versionedTr4cker}."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return filteredEvents;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Todo}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * backed by the internal list of {@code versionedTr4cker}."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public ObservableList\u003cTodo\u003e getFilteredTodoList() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return filteredTodos;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void updateFilteredPendingTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        filteredPendingTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public void updateFilteredExpiredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        filteredExpiredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public void updateFilteredCompletedTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        filteredCompletedTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        filteredModules.setPredicate(predicate);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public void updateFilteredTodoList(Predicate\u003cTodo\u003e predicate) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        filteredTodos.setPredicate(predicate);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void updatePlannerFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        plannerFilteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        filteredEvents.setPredicate(predicate);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return tr4cker.equals(other.tr4cker)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                \u0026\u0026 filteredPendingTasks.equals(other.filteredPendingTasks)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u0026\u0026 plannerFilteredTasks.equals(other.plannerFilteredTasks)"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u0026\u0026 filteredEvents.equals(other.filteredEvents);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 82,
      "yingqi0607": 35,
      "hanweic53": 42,
      "cwenling": 40,
      "-": 106,
      "ethan-l-m-e": 42
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/ReadOnlyTr4cker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.daily.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Unmodifiable view of Tr4cker."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public interface ReadOnlyTr4cker {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns an unmodifiable view of the tasks list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * This list will not contain any duplicate tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Returns an unmodifiable view of the events list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * This list will not contain any duplicate events."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    ObservableList\u003cEvent\u003e getEventList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Returns an unmodifiable view of the modules list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    ObservableList\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Returns an unmodifiable view of the daily todo list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * This list will not contain any duplicate todos."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    ObservableList\u003cTodo\u003e getTodoList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 7,
      "yingqi0607": 7,
      "cwenling": 7,
      "-": 10,
      "ethan-l-m-e": 6
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    Path getTr4ckerFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/Tr4cker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.UniqueEventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.daily.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.daily.UniqueDailyList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Wraps all data at TR4CKER level."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Duplicates are not allowed (by .isSameTask comparison)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class Tr4cker implements ReadOnlyTr4cker {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final UniqueModuleList modules;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final UniqueEventList events;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private final UniqueDailyList todos;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        events \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        todos \u003d new UniqueDailyList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Tr4cker() {}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Creates an Tr4cker using the Tasks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Tr4cker(ReadOnlyTr4cker toBeCopied) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Replaces the contents of the event list with {@code events}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * {@code events} must not contain duplicate events."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.events.setEvents(events);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Replaces the contents of the module list with {@code modules}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        this.modules.setModules(modules);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Replaces the contents of the daily list with {@code todos}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * {@code todos} must not contain duplicate todos."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public void setTodos(List\u003cTodo\u003e todos) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        this.todos.setTodos(todos);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Resets the existing data of this {@code Tr4cker} with {@code newData}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void resetData(ReadOnlyTr4cker newData) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        setEvents(newData.getEventList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        setModules(newData.getModuleList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in Tr4cker."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Returns true if a task with the same module code as {@code module} exists in Tr4cker."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public boolean hasRelatedTasks(Module module) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            if (task.getModuleCode().contains(module.moduleCode)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Adds a task to Tr4cker."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * The task must not already exist in Tr4cker."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void addTask(Task p) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        tasks.add(p);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * {@code target} must exist in Tr4cker."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in Tr4cker."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Removes {@code key} from this {@code Tr4cker}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * {@code key} must exist in Tr4cker."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    //// event-level operations"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Returns true if a event with the same identity as {@code event} exists in Tr4cker."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return events.contains(event);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Adds an event to Tr4cker."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * The event must not already exist in Tr4cker."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void addEvent(Event p) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        events.add(p);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Removes {@code key} from this {@code Tr4cker}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * {@code key} must exist in Tr4cker."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void removeEvent(Event key) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        events.remove(key);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    //// module-level operations"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in Tr4cker."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return modules.contains(module);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Returns true if the {@code task} has a module code that exists in Tr4cker, or if"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * it\u0027s module field is null."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public boolean hasValidModuleField(Task task) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (task.getModuleCode().isEmpty()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return task.getModuleCode().stream().anyMatch(modules::containsCode);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Adds a module to Tr4cker."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * The module must not already exist in Tr4cker."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void addModule(Module m) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        modules.add(m);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Removes {@code key} from this {@code Tr4cker}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * {@code key} must exist in Tr4cker."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void removeModule(Module key) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        modules.remove(key);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in Tr4cker."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public boolean hasTodo(Todo task) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return todos.contains(task);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Adds a todo task in Daily tab."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * The task must not already exist in Daily tab."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public void addTodo(Todo task) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        todos.add(task);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Removes {@code key} from this {@code Tr4cker}."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * {@code key} must exist in Tr4cker."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public void removeTodo(Todo key) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        todos.remove(key);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return tasks.asUnmodifiableObservableList().size() + \" tasks\""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                + events.asUnmodifiableObservableList().size() + \" events\""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                + modules.asUnmodifiableObservableList().size() + \" modules\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                + todos.asUnmodifiableObservableList().size() + \" todos\";"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        tasks.sortTasksAccordingToDeadline();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        events.sortEventsByDate();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return events.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return modules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public ObservableList\u003cTodo\u003e getTodoList() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        todos.sortTodosAccordingToDeadline();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return todos.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                || (other instanceof Tr4cker // instanceof handles nulls"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u0026\u0026 tasks.equals(((Tr4cker) other).tasks)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u0026\u0026 events.equals(((Tr4cker) other).events))"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u0026\u0026 modules.equals(((Tr4cker) other).modules);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return tasks.hashCode() + events.hashCode() + modules.hashCode();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 40,
      "yingqi0607": 43,
      "cwenling": 59,
      "-": 76,
      "ethan-l-m-e": 65
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private Path tr4ckerFilePath \u003d Paths.get(\"data\" , \"tr4cker.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        setTr4ckerFilePath(newUserPrefs.getTr4ckerFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Path getTr4ckerFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return tr4ckerFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setTr4ckerFilePath(Path tr4ckerFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(tr4ckerFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.tr4ckerFilePath \u003d tr4ckerFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                \u0026\u0026 tr4ckerFilePath.equals(o.tr4ckerFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return Objects.hash(guiSettings, tr4ckerFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + tr4ckerFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 11,
      "cwenling": 1,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/countdown/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "package seedu.tr4cker.model.countdown;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * Represents an Event in the Countdowns list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final EventName eventName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final EventDate eventDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    // to consider adding: date time instead  of date"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    // description"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public Event(EventName eventName, EventDate eventDate) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireAllNonNull(eventName, eventDate);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public EventName getEventName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return eventName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public EventDate getEventDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return eventDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Returns the number of days remaining to the event as an int."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Returns 0 if event has passed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public int getDaysRemaining() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return getEventDate().getDaysTill();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Returns true if both events have the same name."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * This defines a weaker notion of equality between two events."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public boolean isSameEvent(seedu.tr4cker.model.countdown.Event otherEvent) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return otherEvent !\u003d null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u0026\u0026 otherEvent.getEventName().equals(getEventName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Returns true if both events have the same identity and data fields."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * This defines a stronger notion of equality between two events."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (!(other instanceof seedu.tr4cker.model.countdown.Event)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        seedu.tr4cker.model.countdown.Event otherTask \u003d (seedu.tr4cker.model.countdown.Event) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return otherTask.getEventName().equals(getEventName())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u0026\u0026 otherTask.getEventDate().equals(getEventDate());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return Objects.hash(eventName, eventDate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        builder.append(getEventName())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                .append(getEventDate());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cwenling": 88
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/countdown/EventDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "package seedu.tr4cker.model.countdown;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * Represents the date of an event in TR4CKER."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": "public class EventDate {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            \"Invalid format to input date. Please ensure the following:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    + \"1. Enter a valid date\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    + \"2. Formats accepted: dd-MM-yyyy dd-MMM-yyyy\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    + \"(e.g. 25-01-2021 25-Jan-2021)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    + \"3. First alphabet of Month is in upper-case, (e.g. Feb instead of feb)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    + \"4. Date should be in the future\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String MESSAGE_FUTURE_CONSTRAINT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            \"Date should be in the future\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String VALIDATION_REGEX_MM \u003d \"\\\\d{2}-\\\\d{2}-\\\\d{4}\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String VALIDATION_REGEX_MMM \u003d \"\\\\d{2}-[a-zA-Z]{3}-\\\\d{4}\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-[MM][MMM]-yyyy\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String DEFAULT_DATE_TODAY \u003d LocalDate.now().format(DATE_TIME_FORMAT).split(\" \")[0];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Constructs a {@code EventDate}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * @param isNewEvent If event is a new event added from command line."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public EventDate(String date, boolean isNewEvent) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (isNewEvent) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            checkArgument(isFutureDate(date), MESSAGE_FUTURE_CONSTRAINT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            // would mean that you cant add events that have passed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.date \u003d LocalDate.parse(date, DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Returns the date of a event."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * @return Date of event."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            LocalDate.parse(test, DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static boolean isDate(String test) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return test.matches(VALIDATION_REGEX_MM) || test.matches(VALIDATION_REGEX_MMM);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Returns true if a given string is a future date."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static boolean isFutureDate(String test) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        LocalDate now \u003d LocalDate.now();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return LocalDate.parse(test, DATE_TIME_FORMAT).isAfter(now);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Returns the number of days remaining to the event as an int."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Returns -1 if event has passed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public int getDaysTill() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        int daysUntil \u003d (int) getCurrentDate().until(date, DAYS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (daysUntil \u003c 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return daysUntil;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Returns the current LocalDate, for use in {@code getDaysTill}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public LocalDate getCurrentDate() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return LocalDate.now();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"dd-MMM-yyyy\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                || (other instanceof seedu.tr4cker.model.countdown.EventDate // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u0026\u0026 date.equals(((seedu.tr4cker.model.countdown.EventDate) other).date)); // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cwenling": 119
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/countdown/EventName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "package seedu.tr4cker.model.countdown;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * Represents a Task\u0027s name in Tr4cker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "public class EventName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            \"Event names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * The first character of the event name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public final String eventName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Constructs a {@code EventName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public EventName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.eventName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return eventName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                || (other instanceof seedu.tr4cker.model.countdown.EventName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u0026\u0026 eventName.equals(((seedu.tr4cker.model.countdown.EventName) other).eventName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return eventName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cwenling": 59
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/countdown/UniqueEventList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "package seedu.tr4cker.model.countdown;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * A list of events that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * An event is considered unique by comparing using {@code Event#isSameEvent(Event)}. As such, adding and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * updating of events uses Event#isSameEvent(Event) for equality so as to ensure that the event being added"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * or updated is unique in terms of identity in the UniqueEventList. However, the removal of a event uses"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * n#equals(Object) so as to ensure that the event with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * @see Event#isSameEvent(Event)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": "public class UniqueEventList implements Iterable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Returns true if the list contains an equivalent event as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public boolean contains(Event toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEvent);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Adds an event to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * The event must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void add(Event toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Removes the equivalent event from the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * The event must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void remove(Event toRemove) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Replaces the contents of this list with another {@code UniqueEventList}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void setEvents(UniqueEventList replacement) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Replaces the contents of this list with {@code events}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * {@code events} must not contain duplicate events."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireAllNonNull(events);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (!eventsAreUnique(events)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        internalList.setAll(events);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Sorts the the list according to date, starting from the earliest upcoming event."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Events which have passed will be at the back of the list in no particular order."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void sortEventsByDate() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        LocalDate now \u003d LocalDate.now();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Collections.sort(internalList, (event1, event2) -\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                return event1.getEventDate().getDate().isBefore(now) \u0026\u0026 event2.getEventDate().getDate().isBefore(now)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                        ? 0 : event1.getEventDate().getDate().isBefore(now)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                        ? 1 : event2.getEventDate().getDate().isBefore(now)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                        ? -1 : event1.getEventDate().getDate().compareTo(event2.getEventDate().getDate());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                throw new IllegalArgumentException(e);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        });"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public Iterator\u003cEvent\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                || (other instanceof seedu.tr4cker.model.countdown.UniqueEventList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u0026\u0026 internalList.equals(((seedu.tr4cker.model.countdown.UniqueEventList) other).internalList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Returns true if {@code events} contains only unique events."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private boolean eventsAreUnique(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size() - 1; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            for (int j \u003d i + 1; j \u003c events.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                if (events.get(i).isSameEvent(events.get(j))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Gets the first upcoming event in the sorted list of events."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * @return Earliest upcoming event."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public Event firstEvent() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (internalUnmodifiableList.size() \u003c 1) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        sortEventsByDate();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return internalUnmodifiableList.get(0);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Gets the second upcoming event in the sorted list of events."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * @return Second earliest upcoming event."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public Event secondEvent() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (internalUnmodifiableList.size() \u003c 2) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        sortEventsByDate();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return internalUnmodifiableList.get(1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cwenling": 166
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/countdown/exceptions/DuplicateEventException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "package seedu.tr4cker.model.countdown.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * Signals that the operation will result in duplicate Events (Events are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "public class DuplicateEventException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public DuplicateEventException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        super(\"Operation would result in duplicate events\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cwenling": 11
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/countdown/exceptions/EventNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "package seedu.tr4cker.model.countdown.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * Signals that the operation is unable to find the specified event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "public class EventNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cwenling": 7
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/daily/Todo.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "package seedu.tr4cker.model.daily;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static seedu.tr4cker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.task.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " * Represents a Todo task in Daily tab."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "public class Todo {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public Todo(Name name, Deadline deadline) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        requireAllNonNull(name, deadline);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Returns name of a todo task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Returns deadline of a todo task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public Deadline getDeadline() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Returns true if both todos of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * This defines a weaker notion of equality between two todos."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public boolean isSameTodo(Todo otherTodo) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        if (otherTodo \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return otherTodo !\u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                \u0026\u0026 otherTodo.getName().equals(getName())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                \u0026\u0026 (otherTodo.getDeadline().equals(getDeadline()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Returns true if both todos have the same identity and data fields."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * This defines a stronger notion of equality between two todos."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        if (!(other instanceof Todo)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        Todo otherTodo \u003d (Todo) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return otherTodo.getName().equals(getName())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                \u0026\u0026 otherTodo.getDeadline().equals(getDeadline());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return Objects.hash(name, deadline);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                .append(\" Deadline: \")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                .append(getDeadline());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingqi0607": 89
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/daily/UniqueDailyList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "package seedu.tr4cker.model.daily;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static seedu.tr4cker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.daily.exceptions.DuplicateTodoException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.daily.exceptions.TodoNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " * A list of todos that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " * An todo is considered unique by comparing using {@code Todo#isSameTodo(Todo)}. As such, adding and"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " * updating of todos uses Todo#isSameTodo(Todo) for equality so as to ensure that the todo being added"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " * or updated is unique in terms of identity in the UniqueTodoList. However, the removal of a todo uses"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " * n#equals(Object) so as to ensure that the todo with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " * @see Todo#isSameTodo(Todo)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "public class UniqueDailyList implements Iterable\u003cTodo\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private final ObservableList\u003cTodo\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private final ObservableList\u003cTodo\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Returns true if the list contains an equivalent todo as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public boolean contains(Todo toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTodo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Adds a todo to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * The todo must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public void add(Todo toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            throw new DuplicateTodoException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Removes the equivalent todo from the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * The todo must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public void remove(Todo toRemove) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            throw new TodoNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Replaces the contents of this list with another {@code UniqueDailyList}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public void setTodos(UniqueDailyList replacement) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Replaces the contents of this list with {@code todos}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * {@code todos} must not contain duplicate todos."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public void setTodos(List\u003cTodo\u003e todos) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        requireAllNonNull(todos);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        if (!todosAreUnique(todos)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            throw new DuplicateTodoException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        internalList.setAll(todos);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Sorts the the list according to deadline"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public void sortTodosAccordingToDeadline() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        Collections.sort(internalList, new Comparator\u003cTodo\u003e() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            public int compare(Todo task1, Todo task2) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                    return task1.getDeadline().getDateTime().compareTo(task2.getDeadline().getDateTime());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                    throw new IllegalArgumentException(e);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public ObservableList\u003cTodo\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public Iterator\u003cTodo\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                || (other instanceof UniqueDailyList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueDailyList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private boolean todosAreUnique(List\u003cTodo\u003e todos) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        for (int i \u003d 0; i \u003c todos.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            for (int j \u003d i + 1; j \u003c todos.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                if (todos.get(i).isSameTodo(todos.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingqi0607": 138
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/daily/exceptions/DuplicateTodoException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "package seedu.tr4cker.model.daily.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " * Signals that the operation will result in duplicate Todos (Todos are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "public class DuplicateTodoException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public DuplicateTodoException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        super(\"Operation would result in duplicate daily todo tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingqi0607": 11
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/daily/exceptions/TodoNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "package seedu.tr4cker.model.daily.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " * Signals that the operation is unable to find the specified todo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "public class TodoNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "yingqi0607": 6
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/module/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "package seedu.tr4cker.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * Represents a Module in TR4CKER."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidModuleName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \"Module names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public final String moduleName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Constructs a {@code Module}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * @param moduleName A valid module name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * @param moduleCode A valid module code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public Module(String moduleName, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        requireAllNonNull(moduleName, moduleCode);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        checkArgument(isValidModuleName(moduleName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Returns true if a given string is a valid module name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static boolean isValidModuleName(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Returns true if both modules have the same module code."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * This defines a weaker notion of equality between two modules."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public boolean isSameModule(Module otherModule) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (otherModule \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return otherModule !\u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u0026\u0026 moduleCode.equals(otherModule.moduleCode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Returns true if both modules have the same identity and data fields."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * This defines a stronger notion of equality between two modules."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                || (other instanceof Module // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u0026\u0026 moduleName.equals(((Module) other).moduleName)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((Module) other).moduleCode));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return moduleCode.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return \"[ \" + moduleCode.toString() + \" | \" + moduleName + \" ]\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ethan-l-m-e": 75
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/module/ModuleCode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "package seedu.tr4cker.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * Represents a Module in TR4CKER."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * Guarantees: immutable; module code name is valid as declared in {@link #isValidModuleCode(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "public class ModuleCode {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Module codes are case-insensitive, should only contain \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            + \"alphanumeric characters, and it should not be blank or contain any spaces\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            + \"\\\"DEL\\\" is not a valid module code\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public final String codeName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * @param codeName A valid module code."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public ModuleCode(String codeName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        requireNonNull(codeName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        checkArgument(isValidModuleCode(codeName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        this.codeName \u003d codeName.toUpperCase(); // All module codes are uppercase"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Returns true if a given string is a valid module code."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static boolean isValidModuleCode(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return test.matches(VALIDATION_REGEX)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u0026\u0026 !test.toLowerCase().equals(\"del\"); // module code cannot be del"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                || (other instanceof ModuleCode // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u0026\u0026 codeName.equals(((ModuleCode) other).codeName)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return codeName.hashCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return codeName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ethan-l-m-e": 56
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/module/UniqueModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "package seedu.tr4cker.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * A list of modules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * A module is considered unique by comparing using {@code Module#isSameModule(Module)}. As such, adding and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * updating of modules uses Module#isSameModule(Module) for equality so as to ensure that the module being added"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * or updated is unique in terms of identity in the UniqueModuleList. However, the removal of a task uses"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * n#equals(Object) so as to ensure that the module with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * @see Module#isSameModule(Module)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Returns true if the list contains an equivalent Module as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public boolean contains(Module toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameModule);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Returns true if the list contains a Module with the given module code."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public boolean containsCode(ModuleCode toCheck) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return internalList.stream().anyMatch(x -\u003e x.moduleCode.equals(toCheck));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void add(Module toAdd) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * The module must exist in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void remove(Module toRemove) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Replaces the contents of this list with another {@code UniqueModuleList}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void setModules(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Replaces the contents of this list with {@code modules}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        requireAllNonNull(modules);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (!modulesAreUnique(modules)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        internalList.setAll(modules);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                || (other instanceof UniqueModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Returns true if {@code tasks} contains only unique modules."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size() - 1; i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            for (int j \u003d i + 1; j \u003c modules.size(); j++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                if (modules.get(i).isSameModule(modules.get(j))) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ethan-l-m-e": 129
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/module/exceptions/DuplicateModuleException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "package seedu.tr4cker.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * Signals that the operation will result in duplicate Modules (Modules are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * the same module codes)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "public class DuplicateModuleException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public DuplicateModuleException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        super(\"Operation would result in duplicate modules\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ethan-l-m-e": 11
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/module/exceptions/ModuleNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "package seedu.tr4cker.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * Signals that the operation is unable to find the specified module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "public class ModuleNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ethan-l-m-e": 6
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/planner/PlannerDay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.util.GotoDateUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Represents the calendar in Planner tab."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class PlannerDay {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Date of the PlannerDay. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final LocalDate localDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Constructor for PlannerDay."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param localDate Date in the calendar."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public PlannerDay(LocalDate localDate) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(localDate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.localDate \u003d localDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns date associated to PlannerDay."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return Local date."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public LocalDate getLocalDate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return this.localDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns the date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return Date of PlannerDay."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public int getDay() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return localDate.getDayOfMonth();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Returns the day of the date represented by 1 to 7 (1 for Monday, 7 for Sunday)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return 1 to 7 depending on the day."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public int getDayOfWeek() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return localDate.getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns the month in number representation."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return Number representation of month of date."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public int getMonth() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return localDate.getMonthValue();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns the month in string representation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return String representation of month of date."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String getMonthName() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return localDate.getMonth().name();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Returns the year."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return Year of PlannerDay."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return localDate.getYear();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Creates the first day of the month."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return A new PlannerDay with first day of month."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public PlannerDay createFirstDayOfMonth() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate firstDay \u003d this.localDate.withDayOfMonth(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return new PlannerDay(firstDay);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns the current date."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return Current date."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static PlannerDay getCurrDay() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return new PlannerDay(LocalDate.now());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns the previous date."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return Previous date."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public PlannerDay getPrevDay() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate prevDay \u003d this.localDate.minusDays(1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return new PlannerDay(prevDay);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns the next date."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return Next date."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public PlannerDay getNextDay() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate nextDay \u003d this.localDate.plusDays(1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return new PlannerDay(nextDay);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (!(other instanceof PlannerDay)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        PlannerDay plannerDay \u003d (PlannerDay) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return this.getDay() \u003d\u003d plannerDay.getDay()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                \u0026\u0026 this.getMonthName().equals(plannerDay.getMonthName())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                \u0026\u0026 this.getYear() \u003d\u003d plannerDay.getYear();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return GotoDateUtil.parseGotoDay(localDate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 139
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Represents a Tag in TR4CKER."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 3,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/task/CompletionStatus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "package seedu.tr4cker.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * Represents a Task\u0027s completion status in Tr4cker."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCompletionStatus(int)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "public class CompletionStatus {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \"Completion status percentage should be an integer value, ranging only between 0 and 100\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Constructs a {@code CompletionStatus}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * @param percentage A valid percentage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public CompletionStatus(int percentage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        checkArgument(isValidCompletionStatus(percentage), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        value \u003d percentage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Returns if a given string is a valid percentage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * @param test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static boolean isValidCompletionStatus(int test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return test \u003e\u003d 0 \u0026\u0026 test \u003c\u003d 100;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return value + \"%\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                || (other instanceof CompletionStatus // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u0026\u0026 this.value \u003d\u003d ((CompletionStatus) other).value); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public int compareTo(CompletionStatus other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return Integer.compare(value, other.value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "cwenling": 3,
      "ethan-l-m-e": 51
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/task/Deadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * Represents a Task\u0027s deadline time in Tr4cker."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDeadline(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": "public class Deadline {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            \"Invalid format to input Deadline. Please ensure the following:\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    + \"1. Enter a valid date and time (in 24Hr)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    + \"2. Formats accepted: dd-MM-yyyy HHmm and dd-MMM-yyyy HHmm\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    + \"(e.g. 25-01-2021 1800 and 25-Jan-2021 1800)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    + \"3. First alphabet of Month is in upper-case, (e.g. Feb instead of feb)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    + \"4. Natural dates accepted: days of week (e.g. Today, Monday, Sunday)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    + \"If deadline date/time is not entered, it will be set to today/2359 by default\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String MESSAGE_FUTURE_CONSTRAINT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            \"Deadline should be a time in the future\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String VALIDATION_REGEX_MM \u003d \"\\\\d{2}-\\\\d{2}-\\\\d{4} \\\\d{4}\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String VALIDATION_REGEX_MMM \u003d \"\\\\d{2}-[a-zA-Z]{3}-\\\\d{4} \\\\d{4}\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-[MM][MMM]-yyyy HHmm\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String DEFAULT_TIME \u003d \" 2359\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String DEFAULT_DATE_TODAY \u003d LocalDateTime.now().format(DATE_TIME_FORMAT).split(\" \")[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Constructs a {@code Deadline}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * @param deadline A valid deadline time."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * @param isNewTask if deadline belongs to a new Task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public Deadline(String deadline, boolean isNewTask) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        checkArgument(isValidDeadline(deadline), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        if (isNewTask) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            checkArgument(isFutureDeadline(deadline), MESSAGE_FUTURE_CONSTRAINT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        dateTime \u003d LocalDateTime.parse(deadline, DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns the deadline of a task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return Date time of task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return this.dateTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Returns true if a given string is a valid deadline time."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static boolean isValidDeadline(String test) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            LocalDateTime.parse(test, DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static boolean isDeadlineWithTime(String test) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return test.matches(VALIDATION_REGEX_MM) || test.matches(VALIDATION_REGEX_MMM);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * Returns true if a given string is a future time."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static boolean isFutureDeadline(String test) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return LocalDateTime.parse(test, DATE_TIME_FORMAT).isAfter(now);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return dateTime.format(DateTimeFormatter.ofPattern(\"dd-MMM-yyyy HHmm\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                || (other instanceof Deadline // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                \u0026\u0026 dateTime.equals(((Deadline) other).dateTime)); // state check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return dateTime.hashCode();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Returns the Date only component of {@code dateTime}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public String toDate() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return toString().split(\" \")[0];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 12,
      "hanweic53": 38,
      "cwenling": 26,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/task/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Represents a Task\u0027s name in Tr4cker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * The first character of the tr4cker must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public final String taskName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        taskName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                \u0026\u0026 taskName.equals(((Name) other).taskName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return taskName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 4,
      "hanweic53": 5,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/task/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getName().taskName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 5,
      "hanweic53": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.ModuleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.task.exceptions.TaskConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Represents a Task in TR4CKER."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private final CompletionStatus completionStatus;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private final TaskDescription taskDescription;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private final Set\u003cModuleCode\u003e moduleCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public Task(Name name, Deadline deadline, CompletionStatus completionStatus,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                TaskDescription taskDescription, Set\u003cModuleCode\u003e moduleCode, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        requireAllNonNull(name, deadline, completionStatus, taskDescription, tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        this.completionStatus \u003d completionStatus;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public Deadline getDeadline() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public CompletionStatus getCompletionStatus() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return completionStatus;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public TaskDescription getTaskDescription() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return taskDescription;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public Set\u003cModuleCode\u003e getModuleCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return Collections.unmodifiableSet(moduleCode);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Adds tag(s) to existing tags."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param tags Tags to be added."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return A set of duplicated tags."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Set\u003cTag\u003e addTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Set\u003cTag\u003e duplicateTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            if (this.tags.contains(tag)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                duplicateTags.add(tag);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return duplicateTags;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Deletes tag(s) from existing tags (if there exists)."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param tags Tags to be deleted."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return A set of non existing tags."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Set\u003cTag\u003e deleteTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Set\u003cTag\u003e nonExistingTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            if (!this.tags.contains(tag)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                nonExistingTags.add(tag);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            this.tags.remove(tag);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return nonExistingTags;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns true if both tasks of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                \u0026\u0026 otherTask.getName().equals(getName())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u0026\u0026 (otherTask.getDeadline().equals(getDeadline()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return completionStatus.value \u003d\u003d 100;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns true if both tasks have the same identity and data fields."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * This defines a stronger notion of equality between two tasks."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return otherTask.getName().equals(getName())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u0026\u0026 otherTask.getDeadline().equals(getDeadline())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u0026\u0026 otherTask.getCompletionStatus().equals(getCompletionStatus())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                \u0026\u0026 otherTask.getTaskDescription().equals(getTaskDescription())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u0026\u0026 otherTask.getModuleCode().equals(getModuleCode())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                \u0026\u0026 otherTask.getTags().equals(getTags());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return Objects.hash(name, deadline, completionStatus, taskDescription, moduleCode, tags);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                .append(\" Deadline: \")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                .append(getDeadline())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                .append(\" CompletionStatus: \")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                .append(getCompletionStatus())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                .append(getTaskDescription())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                .append(\" ModuleCode: \");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        getModuleCode().forEach(builder::append);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Returns an Event with data from this Task."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public Event toEvent() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        EventName eventName \u003d new EventName(name.taskName);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        EventDate eventDate;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            eventDate \u003d new EventDate(deadline.toDate(), true);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new TaskConversionException();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return new Event(eventName, eventDate);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 52,
      "yingqi0607": 8,
      "hanweic53": 4,
      "cwenling": 25,
      "-": 77,
      "ethan-l-m-e": 21
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/task/TaskDescription.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Represents a Task\u0027s description in TR4CKER."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTaskDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "public class TaskDescription {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * The first character of the tr4cker must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Constructs a {@code description}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param description A valid TR4CKER."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public TaskDescription(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        checkArgument(isValidTaskDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public static boolean isValidTaskDescription(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                || (other instanceof TaskDescription // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                \u0026\u0026 value.equals(((TaskDescription) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 5,
      "yingqi0607": 12,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/task/TaskDueInPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.util.GotoDateUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Deadline} is the deadline user wanted."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class TaskDueInPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final LocalDate dueDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Constructor for TaskDueInPredicate with dueDate to be current time. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public TaskDueInPredicate() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.dueDate \u003d GotoDateUtil.getToday();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Constructor for TaskDueInPredicate with dueDate to be inputted date. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public TaskDueInPredicate(LocalDate dueDate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(dueDate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Constructor for TaskDueInPredicate with dueDate to be inputted month. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public TaskDueInPredicate(YearMonth month) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.dueDate \u003d month.atDay(1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate taskDate \u003d task.getDeadline().getDateTime().toLocalDate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return taskDate.isEqual(dueDate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                || (other instanceof TaskDueInPredicate) // instanceof handles null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                \u0026\u0026 this.dueDate.equals(((TaskDueInPredicate) other).dueDate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 49
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/task/UniqueTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * A list of tasks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * updating of tasks uses Task#isSameTask(Task) for equality so as to ensure that the task being added"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * or updated is unique in terms of identity in the UniqueTaskList. However, the removal of a task uses"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * n#equals(Object) so as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Sorts the the list according to deadline"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public void sortTasksAccordingToDeadline() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        Collections.sort(internalList, new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            public int compare(Task task1, Task task2) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    return task1.getDeadline().getDateTime().compareTo(task2.getDeadline().getDateTime());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                    throw new IllegalArgumentException(e);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 138,
      "yingqi0607": 17
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/task/exceptions/DuplicateTaskException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Signals that the operation will result in duplicate Tasks (Tasks are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 11
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/task/exceptions/TaskConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "package seedu.tr4cker.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * Signals that the task cannot be converted to a Countdown event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "public class TaskConversionException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public TaskConversionException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        super(\"Task cannot be converted to an event\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cwenling": 10
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/task/exceptions/TaskNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 6
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/util/GotoDateUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Contains utility methods for PlannerCommandParser to check validity of goto dates."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class GotoDateUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-[MM][MMM]-yyyy\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static final DateTimeFormatter MONTH_FORMAT \u003d DateTimeFormatter.ofPattern(\"[MM][MMM]-yyyy\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static final DateTimeFormatter STRING_DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MMM-yyyy\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static final DateTimeFormatter STRING_MONTH_FORMAT \u003d DateTimeFormatter.ofPattern(\"MMM-yyyy\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns true if a given string is a valid goto date."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param test Input string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return true if a given string is a valid goto date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static boolean isValidGotoDate(String test) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            LocalDate.parse(test, DATE_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns true if a given string is a valid goto month."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param test Input string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return true if a given string is a valid goto month."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static boolean isValidGotoMonth(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            YearMonth.parse(test, MONTH_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns a LocalDate object of the input gotoDay."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param gotoDay Checked gotoDay."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return LocalDate of input."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static LocalDate splitGotoDay(String gotoDay) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return LocalDate.parse(gotoDay, DATE_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns a YearMonth object of the input gotoMonth."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param gotoMonth Checked gotoMonth."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return YearMonth of input."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static YearMonth splitGotoMonth(String gotoMonth) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return YearMonth.parse(gotoMonth, MONTH_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Parses a LocalDate to a string representation."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param gotoDay GotoDay."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return String representation of the GotoDay."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static String parseGotoDay(LocalDate gotoDay) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return gotoDay.format(STRING_DATE_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Parses a YearMonth to a string representation."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param gotoMonth GotoMonth."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return String representation of the GotoMonth."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static String parseGotoMonth(YearMonth gotoMonth) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return gotoMonth.format(STRING_MONTH_FORMAT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Checks if user\u0027s input is \"today\" or \"tdy\"."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param gotoDay User\u0027s input."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return True if matches."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static boolean checkToday(String gotoDay) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return gotoDay.contentEquals(\"today\") || gotoDay.contentEquals(\"tdy\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Gets today\u0027s date."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return LocalDate object of today\u0027s date."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static LocalDate getToday() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return LocalDate.now();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Checks if user\u0027s input is \"tomorrow\" or \"tmr\"."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param gotoDay User\u0027s input."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return True if matches."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static boolean checkTomorrow(String gotoDay) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return gotoDay.contentEquals(\"tomorrow\") || gotoDay.contentEquals(\"tmr\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Gets tomorrow\u0027s date."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return LocalDate object of tomorrow\u0027s date."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static LocalDate getTomorrow() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return LocalDate.now().plusDays(1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 126
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/util/NaturalDateUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "package seedu.tr4cker.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static java.time.DayOfWeek.FRIDAY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static java.time.DayOfWeek.MONDAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static java.time.DayOfWeek.SATURDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static java.time.DayOfWeek.SUNDAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static java.time.DayOfWeek.THURSDAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static java.time.DayOfWeek.TUESDAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static java.time.DayOfWeek.WEDNESDAY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static java.time.temporal.TemporalAdjusters.next;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "public class NaturalDateUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String MESSAGE_DAY \u003d \"Please enter a valid day of the week in full, e.g. Saturday\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String MESSAGE_TIME \u003d \"Please enter a valid time in 24Hr format\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[a-zA-Z]{5,}\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String VALIDATION_REGEX_TIME \u003d \"[a-zA-Z]{5,} \\\\d{4}\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MMM-yyyy\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static final Map\u003cString, DayOfWeek\u003e DAYS_OF_WEEK;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        DAYS_OF_WEEK \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        DAYS_OF_WEEK.put(\"MONDAY\", MONDAY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        DAYS_OF_WEEK.put(\"TUESDAY\", TUESDAY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        DAYS_OF_WEEK.put(\"WEDNESDAY\", WEDNESDAY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        DAYS_OF_WEEK.put(\"THURSDAY\", THURSDAY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        DAYS_OF_WEEK.put(\"FRIDAY\", FRIDAY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        DAYS_OF_WEEK.put(\"SATURDAY\", SATURDAY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        DAYS_OF_WEEK.put(\"SUNDAY\", SUNDAY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * Returns true if a given string is a Natural Deadline."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static boolean isNaturalDeadline(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return test.matches(VALIDATION_REGEX) || test.matches(VALIDATION_REGEX_TIME);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * Converts a natural date-time input into a formatted DateTime String."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * @param naturalDateTime natural date-time input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * @return formatted DateTime String"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static String convertToDateTime(String naturalDateTime) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assert isNaturalDeadline(naturalDateTime);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        String [] deadlineTokens \u003d naturalDateTime.split(\" \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        int unitsOfDeadline \u003d deadlineTokens.length;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assert unitsOfDeadline \u003d\u003d 1 || unitsOfDeadline \u003d\u003d 2;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return parse(deadlineTokens, unitsOfDeadline \u003d\u003d 2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static String parse(String[] deadlineTokens, boolean hasTime) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        String dateTime;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        String dayOfDeadline \u003d deadlineTokens[0].toUpperCase();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        if (dayOfDeadline.equals(\"TODAY\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            dateTime \u003d LocalDate.now().format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            if (!DAYS_OF_WEEK.containsKey(dayOfDeadline)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                throw new ParseException(MESSAGE_DAY);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            dateTime \u003d LocalDate.now().with(next(DAYS_OF_WEEK.get(dayOfDeadline)))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    .format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        if (hasTime) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                LocalTime.parse(deadlineTokens[1], DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                dateTime +\u003d \" \" + deadlineTokens[1];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                throw new ParseException(MESSAGE_TIME);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanweic53": 89
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ReadOnlyTr4cker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Tr4cker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.daily.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.task.CompletionStatus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.task.Deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.task.TaskDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Contains utility methods for populating {@code Tr4cker} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return new Task[] {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            new Task(new Name(\"CS2100 Lab 1\"), new Deadline(\"10-Jun-2020 1800\", false),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    new CompletionStatus(90), new TaskDescription(\"Warmup lab practice\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    getModuleCodeSet(\"CS2100\"), getTagSet(\"Urgent\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            new Task(new Name(\"CS2100 Lab 2\"), new Deadline(\"10-Aug-2020 1800\", false),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    new CompletionStatus(90), new TaskDescription(\"First official lab\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    getModuleCodeSet(\"CS2100\"), getTagSet(\"demo\", \"Important\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            new Task(new Name(\"GEQ1000 Tutorial 3\"), new Deadline(\"10-Oct-2019 1800\", false),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    new CompletionStatus(90), new TaskDescription(\"Too much reasoning\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    getModuleCodeSet(\"GEQ1000\"), getTagSet(\"tutorial\", \"origami\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            new Task(new Name(\"GER1000 Graded Assignment 4\"), new Deadline(\"20-Oct-2019 1800\", false),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    new CompletionStatus(80), new TaskDescription(\"Chapter 3 - Sampling Methods\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    getModuleCodeSet(\"GER1000\"), getTagSet(\"graded\", \"assignment\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            new Task(new Name(\"Team meeting\"), new Deadline(\"19-Sep-2020 1000\", false),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    new CompletionStatus(100), new TaskDescription(\"Discuss v1.2\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    getModuleCodeSet(\"CS2103T\"), getTagSet(\"meeting\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            new Task(new Name(\"Team meeting\"), new Deadline(\"25-Oct-2020 1000\", false),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    new CompletionStatus(100), new TaskDescription(\"Discuss v1.3\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    getModuleCodeSet(\"CS2103T\"), getTagSet(\"meeting\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            new Task(new Name(\"Thai Lesson\"), new Deadline(\"27-Oct-2020 1000\", false),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    new CompletionStatus(100), new TaskDescription(\"Learning new consonants\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    getModuleCodeSet(\"LAT1201\"), getTagSet(\"lesson\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            new Task(new Name(\"Thai Listening Quiz 2\"), new Deadline(\"27-Oct-2020 2000\", false),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    new CompletionStatus(100), new TaskDescription(\"Pages 1-43\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    getModuleCodeSet(\"LAT1201\"), getTagSet(\"listening\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            new Task(new Name(\"OP2 Pitch Meeting\"), new Deadline(\"27-Oct-2020 2130\", false),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    new CompletionStatus(100), new TaskDescription(\"Prepare materials for meeting\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    getModuleCodeSet(\"CS2101\"), getTagSet(\"op2\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            new Task(new Name(\"CS2103T Mock Exam\"), new Deadline(\"30-Oct-2020 1600\", false),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    new CompletionStatus(0), new TaskDescription(\"Read instructions\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    getModuleCodeSet(\"CS2103T\"), getTagSet(\"mock\", \"practical\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            new Task(new Name(\"CS2100 Assignment 3\"), new Deadline(\"31-Oct-2020 2359\", false),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    new CompletionStatus(80), new TaskDescription(\"Boolean algebra\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    getModuleCodeSet(\"CS2100\"), getTagSet(\"graded\", \"assignment\")),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            new Task(new Name(\"GEQ1000 Quiz 6\"), new Deadline(\"05-Nov-2020 2359\", false),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    new CompletionStatus(50), new TaskDescription(\"Design quiz\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    getModuleCodeSet(\"GEQ1000\"), getTagSet(\"graded\", \"readings\")),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            new Task(new Name(\"CS1101S Mission\"), new Deadline(\"10-Oct-2021 1800\", false),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    new CompletionStatus(100), new TaskDescription(\"A very fun mission\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    getModuleCodeSet(\"CS1101S\"), getTagSet(\"Mission\", \"Fun\")),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            new Task(new Name(\"CS1101S Quiz\"), new Deadline(\"11-Sep-2021 2359\", false),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    new CompletionStatus(0), new TaskDescription(\"A quiz that\u0027s too hard for me\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    getModuleCodeSet(\"CS1101S\"), getTagSet(\"Quiz\", \"2Hard4Me\")),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            new Task(new Name(\"CS2100 MidTerms\"), new Deadline(\"12-Oct-2021 1200\", false),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    new CompletionStatus(20), new TaskDescription(\"Need do cheat sheet\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    getModuleCodeSet(\"CS2100\"), getTagSet(\"cheatSheetsFTW\")),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            new Task(new Name(\"CS2103T Project\"), new Deadline(\"13-Sep-2021 1500\", false),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    new CompletionStatus(50), new TaskDescription(\"I love project work\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    getModuleCodeSet(\"CS2103T\"), getTagSet(\"EthanSGKK\")),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            new Task(new Name(\"CS2101 OP2\"), new Deadline(\"14-Apr-2021 1010\", false),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    new CompletionStatus(0), new TaskDescription(\"All the best Good Luck\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    getModuleCodeSet(\"CS2101\"), getTagSet(\"20Percent\")),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            new Task(new Name(\"CS1231S Graded Assignment\"), new Deadline(\"25-Dec-2021 0000\", false),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    new CompletionStatus(1), new TaskDescription(\"JustDueet\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    getModuleCodeSet(\"CS1231S\"), getTagSet(\"Assignment\"))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        };"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static Module[] getSampleModules() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return new Module[] {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            new Module(\"Asking Questions\", new ModuleCode(\"GEQ1000\")),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            new Module(\"Quantitative Reasoning\", new ModuleCode(\"GER1000\")),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            new Module(\"Programming Methodology\", new ModuleCode(\"CS1101S\")),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            new Module(\"Computer Organization\", new ModuleCode(\"CS2100\")),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            new Module(\"Software Engineering\", new ModuleCode(\"CS2103T\")),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            new Module(\"Effective Communication for Computing Professionals\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    new ModuleCode(\"CS2101\")),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            new Module(\"Discrete Structures\", new ModuleCode(\"CS1231S\")),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            new Module(\"Thai 1\", new ModuleCode(\"LAT1201\"))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static Event[] getSampleEvents() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return new Event[]{"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            new Event(new EventName(\"CS2103T Final Exam\"), new EventDate(\"02-Dec-2020\", false)),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            new Event(new EventName(\"CS2103T Practical Exam Dry Run\"),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    new EventDate(\"30-10-2020\", false)),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            new Event(new EventName(\"CS2103T Practical Exam\"), new EventDate(\"13-Nov-2020\", false)),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            new Event(new EventName(\"Han Wei Birthday\"), new EventDate(\"09-10-2020\", false)),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            new Event(new EventName(\"CS2101 OP2 Demo\"), new EventDate(\"03-11-2020\", false)),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            new Event(new EventName(\"CS2101 OP2 Pitch\"), new EventDate(\"06-11-2020\", false)),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            new Event(new EventName(\"Christmas\"), new EventDate(\"25-Dec-2020\", false)),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        };"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public static Todo[] getSampleTodos() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return new Todo[] {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            new Todo(new Name(\"GEQ1000 Tutorial 3\"), new Deadline(\"10-Oct-2019 1800\", false)),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            new Todo(new Name(\"GER1000 Graded Assignment 4\"), new Deadline(\"20-Oct-2019 1800\", false)),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            new Todo(new Name(\"CS2103T Project\"), new Deadline(\"13-Sep-2021 1500\", false)),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            new Todo(new Name(\"CS2100 MidTerms\"), new Deadline(\"12-Oct-2021 1200\", false)),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            new Todo(new Name(\"CS2101 OP2\"), new Deadline(\"14-Apr-2021 1010\", false)),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            new Todo(new Name(\"CS1231S Graded Assignment\"), new Deadline(\"25-Dec-2021 0000\", false))"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        };"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static ReadOnlyTr4cker getSampleTr4cker() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        Tr4cker sampleTr4cker \u003d new Tr4cker();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        for (Module sampleModule : getSampleModules()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            sampleTr4cker.addModule(sampleModule);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        for (Task sampleTask : getSampleTasks()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            sampleTr4cker.addTask(sampleTask);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        for (Event sampleEvent : getSampleEvents()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            sampleTr4cker.addEvent(sampleEvent);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        for (Todo sampleTodo : getSampleTodos()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            sampleTr4cker.addTodo(sampleTodo);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return sampleTr4cker;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static Set\u003cModuleCode\u003e getModuleCodeSet(String codeName) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        Set\u003cModuleCode\u003e newSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        newSet.add(new ModuleCode(codeName));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return newSet;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 37,
      "yingqi0607": 16,
      "hanweic53": 29,
      "cwenling": 20,
      "-": 25,
      "ethan-l-m-e": 31
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/storage/JsonAdaptedDaily.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "package seedu.tr4cker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.daily.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.task.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " * Jackson-friendly version of {@link Todo}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "public class JsonAdaptedDaily {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Todo\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private final String deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Constructs a {@code JsonAdaptedDaily} with the given todo details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public JsonAdaptedDaily(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                            @JsonProperty(\"deadline\") String deadline) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Converts a given {@code Todo} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public JsonAdaptedDaily(Todo source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        name \u003d source.getName().taskName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        deadline \u003d source.getDeadline().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Todo} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public Todo toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        if (deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                    Deadline.class.getSimpleName()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        if (!Deadline.isValidDeadline(deadline)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            throw new IllegalValueException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        final Deadline modelDeadline \u003d new Deadline(deadline, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return new Todo(modelName, modelDeadline);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingqi0607": 64
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/storage/JsonAdaptedEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "package seedu.tr4cker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * Jackson-friendly version of {@link Event}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": "class JsonAdaptedEvent {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final String eventName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final String eventDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Constructs a {@code JsonAdaptedEvent} with the given event details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public JsonAdaptedEvent(@JsonProperty(\"eventName\") String eventName,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                            @JsonProperty(\"eventDate\") String eventDate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Converts a given {@code Event} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public JsonAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        eventName \u003d source.getEventName().eventName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        eventDate \u003d source.getEventDate().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Converts this Jackson-friendly adapted event object into the model\u0027s {@code Event} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted event."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (eventName \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    EventName.class.getSimpleName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (!EventName.isValidName(eventName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new IllegalValueException(EventName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        final EventName modelName \u003d new EventName(eventName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (eventDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    EventDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (!EventDate.isValidDate(eventDate)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new IllegalValueException(EventDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        final EventDate modelDate \u003d new EventDate(eventDate, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return new Event(modelName, modelDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cwenling": 67
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/storage/JsonAdaptedModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "package seedu.tr4cker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * Jackson-friendly version of {@link Module}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "public class JsonAdaptedModule {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private final String moduleName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public JsonAdaptedModule(@JsonProperty(\"moduleName\") String moduleName,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                      @JsonProperty(\"moduleCode\") String moduleCode) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public JsonAdaptedModule(Module source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        this.moduleName \u003d source.moduleName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        this.moduleCode \u003d source.moduleCode.codeName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Module} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (moduleName \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"moduleName\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (!Module.isValidModuleName(moduleName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new IllegalValueException(Module.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    ModuleCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new IllegalValueException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return new Module(moduleName, new ModuleCode(moduleCode));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ethan-l-m-e": 59
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/storage/JsonAdaptedModuleCode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "package seedu.tr4cker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.ModuleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "public class JsonAdaptedModuleCode {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private final String codeName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Constructs a {@code JsonAdaptedModuleCode} with the given {@code codeName}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public JsonAdaptedModuleCode(String codeName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        this.codeName \u003d codeName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Converts a given {@code ModuleCode} into this class for Jackson use."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public JsonAdaptedModuleCode(ModuleCode source) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        codeName \u003d source.codeName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public String getCodeName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return codeName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public ModuleCode toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(codeName)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return new ModuleCode(codeName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ethan-l-m-e": 45
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/storage/JsonAdaptedTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.ModuleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.task.CompletionStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.task.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.task.TaskDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "class JsonAdaptedTask {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final String deadline;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private final int completionStatus;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private final List\u003cJsonAdaptedModuleCode\u003e moduleCode \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"name\") String name, @JsonProperty(\"deadline\") String deadline,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                           @JsonProperty(\"completionStatus\") int completionStatus,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                           @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                           @JsonProperty(\"moduleCode\") List\u003cJsonAdaptedModuleCode\u003e moduleCode,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        this.completionStatus \u003d completionStatus;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (moduleCode !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            this.moduleCode.addAll(moduleCode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        name \u003d source.getName().taskName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        deadline \u003d source.getDeadline().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        completionStatus \u003d source.getCompletionStatus().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        description \u003d source.getTaskDescription().value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        moduleCode.addAll(source.getModuleCode().stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                .map(JsonAdaptedModuleCode::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        final List\u003cTag\u003e taskTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            taskTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        final List\u003cModuleCode\u003e taskModuleCode \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        for (JsonAdaptedModuleCode code : moduleCode) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            taskModuleCode.add(code.toModelType());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    Deadline.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (!Deadline.isValidDeadline(deadline)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new IllegalValueException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        final Deadline modelDeadline \u003d new Deadline(deadline, false);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        no null check for CompletionStatus"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "         */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (!CompletionStatus.isValidCompletionStatus(completionStatus)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new IllegalValueException(CompletionStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        final CompletionStatus modelCompletionStatus \u003d new CompletionStatus(completionStatus);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                    TaskDescription.class.getSimpleName()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        if (!TaskDescription.isValidTaskDescription(description)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            throw new IllegalValueException(TaskDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        final TaskDescription modelTaskDescription \u003d new TaskDescription(description);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        final Set\u003cModuleCode\u003e modelModuleCode \u003d new HashSet\u003c\u003e(taskModuleCode);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(taskTags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return new Task("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                modelName,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                modelDeadline,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                modelCompletionStatus,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                modelTaskDescription,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                modelModuleCode,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                modelTags);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 17,
      "yingqi0607": 10,
      "hanweic53": 3,
      "cwenling": 9,
      "-": 60,
      "ethan-l-m-e": 32
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/storage/JsonSerializableTr4cker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ReadOnlyTr4cker;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Tr4cker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.daily.Todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * An Immutable Tr4cker that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": "@JsonRootName(value \u003d \"tr4cker\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "class JsonSerializableTr4cker {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Task list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Events list contains duplicate event(s).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Module list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TODO \u003d \"Daily todo list contains duplicate todo(s).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE \u003d \"Given module does not exist in TR4CKER.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private final List\u003cJsonAdaptedModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private final List\u003cJsonAdaptedDaily\u003e todos \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Constructs a {@code JsonSerializableTr4cker} with the given tasks \u0026 modules."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public JsonSerializableTr4cker(@JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                                   @JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                                   @JsonProperty(\"modules\") List\u003cJsonAdaptedModule\u003e modules,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                                   @JsonProperty(\"todos\") List\u003cJsonAdaptedDaily\u003e todos) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.events.addAll(events);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        this.modules.addAll(modules);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        this.todos.addAll(todos);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Converts a given {@code ReadOnlyTr4cker} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTr4cker}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public JsonSerializableTr4cker(ReadOnlyTr4cker source) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        events.addAll(source.getEventList().stream().map(JsonAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        modules.addAll(source.getModuleList().stream().map(JsonAdaptedModule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        todos.addAll(source.getTodoList().stream().map(JsonAdaptedDaily::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Converts tasks into the model\u0027s {@code Tr4cker} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private void tasksToModelType(Tr4cker tr4cker) throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            if (tr4cker.hasTask(task)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            if (!tr4cker.hasValidModuleField(task)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                throw new IllegalValueException(MESSAGE_INVALID_MODULE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            tr4cker.addTask(task);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void modulesToModelType(Tr4cker tr4cker) throws IllegalValueException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        for (JsonAdaptedModule jsonAdaptedModule : modules) { // Must add modules first."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            Module module \u003d jsonAdaptedModule.toModelType();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            if (tr4cker.hasModule(module)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            tr4cker.addModule(module);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Converts events into the model\u0027s {@code Tr4cker} object."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private void eventsToModelType(Tr4cker tr4cker) throws IllegalValueException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        for (JsonAdaptedEvent jsonAdaptedEvent : events) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            Event event \u003d jsonAdaptedEvent.toModelType();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            if (tr4cker.hasEvent(event)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            tr4cker.addEvent(event);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Converts todos into the model\u0027s {@code Tr4cker} object."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private void todosToModelType(Tr4cker tr4cker) throws IllegalValueException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        for (JsonAdaptedDaily jsonAdaptedDaily : todos) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            Todo todo \u003d jsonAdaptedDaily.toModelType();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            if (tr4cker.hasTodo(todo)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TODO);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            tr4cker.addTodo(todo);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Converts this Tr4cker into the model\u0027s {@code Tr4cker} object."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public Tr4cker toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Tr4cker tr4cker \u003d new Tr4cker();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        modulesToModelType(tr4cker);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        tasksToModelType(tr4cker);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        eventsToModelType(tr4cker);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        todosToModelType(tr4cker);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return tr4cker;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 20,
      "yingqi0607": 23,
      "cwenling": 38,
      "-": 35,
      "ethan-l-m-e": 17
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/storage/JsonTr4cker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ReadOnlyTr4cker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * A class to access Tr4cker data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class JsonTr4cker implements Tr4cker {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTr4cker.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public JsonTr4cker(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Path getTr4ckerFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Optional\u003cReadOnlyTr4cker\u003e readTr4cker() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return readTr4cker(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Similar to {@link #readTr4cker()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Optional\u003cReadOnlyTr4cker\u003e readTr4cker(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Optional\u003cJsonSerializableTr4cker\u003e jsonTr4cker \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                filePath, JsonSerializableTr4cker.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (!jsonTr4cker.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return Optional.of(jsonTr4cker.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void saveTr4cker(ReadOnlyTr4cker tr4cker) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        saveTr4cker(tr4cker, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Similar to {@link #saveTr4cker(ReadOnlyTr4cker)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void saveTr4cker(ReadOnlyTr4cker tr4cker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(tr4cker);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTr4cker(tr4cker), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 80
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ReadOnlyTr4cker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public interface Storage extends Tr4cker, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    Path getTr4ckerFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    Optional\u003cReadOnlyTr4cker\u003e readTr4cker() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    void saveTr4cker(ReadOnlyTr4cker tr4cker) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 32
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ReadOnlyTr4cker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Manages storage of Tr4cker data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private Tr4cker tr4cker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code Tr4cker} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public StorageManager(Tr4cker tr4cker, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.tr4cker \u003d tr4cker;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tr4cker methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Path getTr4ckerFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return tr4cker.getTr4ckerFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Optional\u003cReadOnlyTr4cker\u003e readTr4cker() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return readTr4cker(tr4cker.getTr4ckerFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Optional\u003cReadOnlyTr4cker\u003e readTr4cker(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return tr4cker.readTr4cker(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void saveTr4cker(ReadOnlyTr4cker tr4cker) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        saveTr4cker(tr4cker, this.tr4cker.getTr4ckerFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void saveTr4cker(ReadOnlyTr4cker tr4cker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        this.tr4cker.saveTr4cker(tr4cker, filePath); // JsonTr4cker saves model.Tr4cker."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // todo save module list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 78,
      "ethan-l-m-e": 2
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/storage/Tr4cker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ReadOnlyTr4cker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Represents a storage for {@link seedu.tr4cker.model.Tr4cker}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public interface Tr4cker {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    Path getTr4ckerFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns Tr4cker data as a {@link ReadOnlyTr4cker}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    Optional\u003cReadOnlyTr4cker\u003e readTr4cker() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @see #getTr4ckerFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    Optional\u003cReadOnlyTr4cker\u003e readTr4cker(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Saves the given {@link ReadOnlyTr4cker} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param tr4cker cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    void saveTr4cker(ReadOnlyTr4cker tr4cker) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @see #saveTr4cker(ReadOnlyTr4cker)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    void saveTr4cker(ReadOnlyTr4cker tr4cker, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 45
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Represents a storage for {@link seedu.tr4cker.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Saves the given {@link seedu.tr4cker.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "         * @see seedu.tr4cker.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 5,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/ui/CompletedTaskListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "package seedu.tr4cker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanweic53"
        },
        "content": " * Panel containing the list of expired tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanweic53"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "public class CompletedTaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static final String FXML \u003d \"CompletedTaskListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExpiredTaskListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private ListView\u003cTask\u003e completedTaskListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * Creates a {@code TaskListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public CompletedTaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        completedTaskListView.setItems(taskList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        completedTaskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanweic53": 49
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/ui/ExpiredTaskListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "package seedu.tr4cker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanweic53"
        },
        "content": " * Panel containing the list of expired tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanweic53"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "public class ExpiredTaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static final String FXML \u003d \"ExpiredTaskListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExpiredTaskListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private ListView\u003cTask\u003e expiredTaskListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * Creates a {@code TaskListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public ExpiredTaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        expiredTaskListView.setItems(taskList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        expiredTaskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanweic53": 49
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-t10-2.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 2,
      "-": 99,
      "ethan-l-m-e": 1
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import javafx.scene.control.MenuBar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.ui.countdown.CountdownTabWindow;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.ui.daily.DailyPanel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.ui.daily.DailyTabWindow;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.ui.module.ModuleListPanel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.ui.planner.PlannerTabWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    // Tabs"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static final String TAB_HIGHLIGHT_COLOR \u003d \"-fx-background-color: #7ed5ea\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private static final int HOME \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private static final int DAILY \u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private static final int MODULE \u003d 2;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private static final int COUNTDOWN \u003d 3;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private static final int PLANNER \u003d 4;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Stage primaryStage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private ExpiredTaskListPanel expiredTaskListPanel;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private CompletedTaskListPanel completedTaskListPanel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private ModuleListPanel moduleListPanel;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private PlannerTabWindow plannerTabWindow;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private CountdownTabWindow countdownTabWindow;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final HelpWindow helpWindow;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private DailyTabWindow dailyTabWindow;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private DailyPanel dailyListPanel;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private StackPane expiredTaskListPanelPlaceholder;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private StackPane completedTaskListPanelPlaceholder;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Module tab content."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private StackPane moduleListPanelPlaceholder;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Planner tab content."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private StackPane plannerTabWindowPlaceholder;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Countdown tab content."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private StackPane countdownTabWindowPlaceholder;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Daily tab content."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private StackPane dailyTabWindowPlaceholder;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Tab related objects"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private MenuBar menuBar;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private Label tabHome;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private Label tabDaily;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private Label tabModule;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private Label tabCountdown;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private Label tabPlanner;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        MainWindow.logic \u003d logic;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        setTabColors(0);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static Logic getLogic() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return logic;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredPendingTaskList());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        expiredTaskListPanel \u003d new ExpiredTaskListPanel(logic.getFilteredExpiredTaskList());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        expiredTaskListPanelPlaceholder.getChildren().add(expiredTaskListPanel.getRoot());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        completedTaskListPanel \u003d new CompletedTaskListPanel(logic.getFilteredCompletedTaskList());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        completedTaskListPanelPlaceholder.getChildren().add(completedTaskListPanel.getRoot());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTr4ckerFilePath());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        /*Modules */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        moduleListPanel \u003d new ModuleListPanel(logic.getFilteredModuleList(), logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        moduleListPanelPlaceholder.getChildren().add(moduleListPanel.getRoot());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        /*Planner */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        plannerTabWindow \u003d new PlannerTabWindow(logic);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        plannerTabWindowPlaceholder.getChildren().add(plannerTabWindow.getRoot());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        /*Countdown*/"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        countdownTabWindow \u003d new CountdownTabWindow(logic);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        countdownTabWindowPlaceholder.getChildren().add(countdownTabWindow.getRoot());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        /*Daily*/"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        dailyTabWindow \u003d new DailyTabWindow(logic);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        dailyTabWindowPlaceholder.getChildren().add(dailyTabWindow.getRoot());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Sets color of tab with specified {@code index} to be the {@code TAB_HIGHLIGHT_COLOR}."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * @param index index of tab starting from 0."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private void setTabColors(int index) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        for (int i \u003d 0; i \u003c menuBar.getMenus().size(); i++) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            if (i !\u003d index) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                menuBar.getMenus().get(i).setStyle(\"\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                menuBar.getMenus().get(i).setStyle(TAB_HIGHLIGHT_COLOR);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Tab switch to main page."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void handleShowTabHome() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        tabPane.getSelectionModel().select(HOME);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        setTabColors(HOME);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        logger.info(\"Homepage tab is selected\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Tab switch to daily page."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void handleShowTabDaily() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        tabPane.getSelectionModel().select(DAILY);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        setTabColors(DAILY);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Tab switch to modules page."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void handleShowTabModule() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        tabPane.getSelectionModel().select(MODULE);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        setTabColors(MODULE);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Tab switch to countdown page."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void handleShowTabCountdown() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        tabPane.getSelectionModel().select(COUNTDOWN);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        setTabColors(COUNTDOWN);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        logger.info(\"Countdown tab is selected\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Tab switch to planner page."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void handleShowTabPlanner() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        tabPane.getSelectionModel().select(PLANNER);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        setTabColors(PLANNER);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public TaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public ExpiredTaskListPanel getExpiredTaskListPanel() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return expiredTaskListPanel;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public CompletedTaskListPanel getCompletedTaskListPanel() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return completedTaskListPanel;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @see seedu.tr4cker.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            plannerTabWindow.updateIndicator();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            if (commandResult.isShowHome()) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                handleShowTabHome();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            if (commandResult.isShowModules()) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                handleShowTabModule();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            if (commandResult.isShowPlanner()) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                plannerTabWindow.updateCalendar(commandResult);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                handleShowTabPlanner();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            if (commandResult.isShowCountdown()) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                handleShowTabCountdown();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            if (commandResult.isShowDaily()) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                handleShowTabDaily();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 41,
      "yingqi0607": 20,
      "hanweic53": 28,
      "cwenling": 16,
      "-": 177,
      "ethan-l-m-e": 113
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "hanweic53": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/ui/TaskCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Tr4cker level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private Label completionStatus;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private FlowPane moduleCode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Creates a {@code TaskCode} with the given {@code Task} and index to display."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        name.setText(task.getName().taskName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        deadline.setText(task.getDeadline().toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        description.setText(task.getTaskDescription().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        completionStatus.setText(\"Progress | \" + task.getCompletionStatus().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        task.getModuleCode().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                .forEach(code -\u003e moduleCode.getChildren().add(new Label(code.codeName)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        task.getTags().stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 14,
      "yingqi0607": 2,
      "hanweic53": 2,
      "cwenling": 1,
      "-": 57,
      "ethan-l-m-e": 5
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/ui/TaskListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Creates a {@code TaskListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 49
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/soccat.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/PastelTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 7,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/ui/countdown/CountdownEventCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "package seedu.tr4cker.ui.countdown;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * An UI component that displays information of a {@code Event}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": "public class CountdownEventCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private static final String FXML \u003d \"CountdownEventListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Tr4cker level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public final Event event;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private Label eventName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private Label eventDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private Label daysRemaining;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Creates a {@code CountdownEventCard} with the given {@code Event} and index to display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public CountdownEventCard(Event event, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        eventName.setText(event.getEventName().eventName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        eventDate.setText(event.getEventDate().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        int daysLeft \u003d event.getDaysRemaining();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (daysLeft \u003c 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            daysRemaining.setText(\"Over!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            daysRemaining.setText(daysLeft + \" days!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        if (!(other instanceof seedu.tr4cker.ui.countdown.CountdownEventCard)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        seedu.tr4cker.ui.countdown.CountdownEventCard card \u003d (seedu.tr4cker.ui.countdown.CountdownEventCard) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u0026\u0026 event.equals(card.event);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cwenling": 76
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/ui/countdown/CountdownEventListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "package seedu.tr4cker.ui.countdown;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.ui.UiPart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * Panel containing the list of events in Countdown."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": "public class CountdownEventListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private static final String FXML \u003d \"CountdownEventListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CountdownEventListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private Label countdownEventListPanel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private ListView\u003cEvent\u003e eventListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Creates a {@code CountdownEventsListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public CountdownEventListPanel(ObservableList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        logger.fine(\"Initialising Countdown Events List panel...\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        eventListView.setItems(eventList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        eventListView.setCellFactory(listView -\u003e new EventListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        logger.fine(\"Created Countdown Events List panel.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Event} using a {@code CountdownEventCard}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    static class EventListViewCell extends ListCell\u003cEvent\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        protected void updateItem(Event event, boolean empty) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            super.updateItem(event, empty);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            if (empty || event \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                setGraphic(new CountdownEventCard(event, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cwenling": 57
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/ui/countdown/CountdownTabWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "package seedu.tr4cker.ui.countdown;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.logic.Logic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.ui.planner.PlannerCalendarPanel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * An UI component that displays Countdown tab."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": "public class CountdownTabWindow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private static final String FXML \u003d \"CountdownTabWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PlannerCalendarPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final CountdownEventListPanel countdownEventsListPanel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private StackPane countdownListPanelPlaceholder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Constructor for CountdownTabWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * @param logic Logic of TR4CKER."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public CountdownTabWindow(Logic logic) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        logger.fine(\"Initialising Countdown Tab Window...\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        this.countdownEventsListPanel \u003d new CountdownEventListPanel(logic.getFilteredEventList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        countdownListPanelPlaceholder.getChildren().add(countdownEventsListPanel.getRoot());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        logger.fine(\"Created Countdown Tab Window.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cwenling": 37
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/ui/daily/DailyPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "package seedu.tr4cker.ui.daily;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.daily.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " * Panel containing the list of todos in Daily."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "public class DailyPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private static final String FXML \u003d \"DailyPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DailyPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private ListView\u003cTodo\u003e dailyTodosListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Creates a {@code TaskListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public DailyPanel(ObservableList\u003cTodo\u003e todoList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        dailyTodosListView.setItems(todoList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        dailyTodosListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTodo\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        protected void updateItem(Todo task, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                setGraphic(new TodoCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingqi0607": 50
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/ui/daily/DailyTabWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "package seedu.tr4cker.ui.daily;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.logic.Logic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "public class DailyTabWindow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private static final String FXML \u003d \"DailyTabWindow.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DailyPanel.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private final DailyPanel dailyPanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private StackPane dailyPanelPlaceholder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Constructor for DailyTabWindow."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * @param logic Logic of TR4CKER."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public DailyTabWindow(Logic logic) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        logger.fine(\"Initialising Daily Tab Window...\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        this.dailyPanel \u003d new DailyPanel(logic.getFilteredTodoList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        dailyPanelPlaceholder.getChildren().add(dailyPanel.getRoot());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        logger.fine(\"Created Daily Tab Window.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingqi0607": 33
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/ui/daily/TodoCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "package seedu.tr4cker.ui.daily;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.daily.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " * An UI component that displays information of a {@code Todo}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "public class TodoCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private static final String FXML \u003d \"TodoCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Tr4cker level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public final Todo task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Creates a {@code TodoCode} with the given {@code Todo} and index to display."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public TodoCard(Todo task, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        name.setText(task.getName().taskName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        deadline.setText(task.getDeadline().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        if (!(other instanceof TodoCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        TodoCard card \u003d (TodoCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingqi0607": 65
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/ui/module/ModuleCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "package seedu.tr4cker.ui.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * An UI component that displays information of a {@code Module}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "public class ModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private static final String FXML \u003d \"ModuleCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Tr4cker level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public final Module module;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private Label moduleName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private ListView\u003cTask\u003e smallTaskListView;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Creates a {@code ModuleCard} with the given {@code Module} and index to display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public ModuleCard(Module module, int displayedIndex, ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        id.setText(displayedIndex + \") \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        moduleName.setText(module.moduleName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        moduleCode.setText(module.moduleCode.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        smallTaskListView.setItems(taskList.filtered(task -\u003e task.getModuleCode().contains(module.moduleCode)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        smallTaskListView.setCellFactory(listView -\u003e new ModuleTasksListViewCell());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        smallTaskListView.setPrefHeight(smallTaskListView.getItems().size() * 40 + 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code SmallTaskCard}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    class ModuleTasksListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                setGraphic(new SmallTaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ethan-l-m-e": 72
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/ui/module/ModuleListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "package seedu.tr4cker.ui.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.ui.TaskListPanel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * Panel containing the list of modules."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "public class ModuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private static final String FXML \u003d \"ModuleListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private final ObservableList\u003cTask\u003e taskObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private ListView\u003cModule\u003e moduleListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Creates a {@code TaskListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e moduleList, ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        moduleListView.setItems(moduleList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        moduleListView.setCellFactory(listView -\u003e new ModuleListViewCell());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        this.taskObservableList \u003d taskList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleCard}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        protected void updateItem(Module module, boolean empty) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                setGraphic(new ModuleCard(module, getIndex() + 1, taskObservableList).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ethan-l-m-e": 54
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/ui/module/SmallTaskCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "package seedu.tr4cker.ui.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * An UI component that displays truncated information of a {@code Task}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "public class SmallTaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private static final String FXML \u003d \"SmallTaskCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Tr4cker level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Creates a {@code SmallTaskCard} with the given {@code task} and index to display."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public SmallTaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        name.setText(task.getName().taskName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        deadline.setText(task.getDeadline().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        if (!(other instanceof SmallTaskCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        SmallTaskCard card \u003d (SmallTaskCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ethan-l-m-e": 64
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/ui/planner/PlannerCalendarPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.ui.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.planner.PlannerDay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.ui.UiPart;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * An UI component that displays information of PlannerCalendarPanel."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Displays the calendar."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class PlannerCalendarPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static final String FXML \u003d \"PlannerCalendarPanel.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static int count;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PlannerCalendarPanel.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final PlannerDay plannerDay;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final ArrayList\u003cPlannerDayCard\u003e plannerDayCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private GridPane calendarTable;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private Label calendarMonthYear;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private VBox vbox;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Creates a {@code PlannerCalendarPanel} with the given {@code PlannerDay} to display."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public PlannerCalendarPanel(PlannerDay plannerDay) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Initialising Planner Calendar panel...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(plannerDay);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.plannerDay \u003d plannerDay;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.calendarMonthYear.setText(plannerDay.getMonthName() + \" \" + plannerDay.getYear());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.calendarMonthYear.setId(\"month-year-label\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        vbox.getStyleClass().add(\"vbox\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        calendarTable.getStyleClass().add(\"calendarGrid\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        PlannerDay startDay \u003d plannerDay.createFirstDayOfMonth();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        fillCalendarTable(startDay, null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Created Planner Calendar panel.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Fills up the calendar with dates of the current month."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param startDay First day of the month."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param localDate User\u0027s specified date (can be null or not)."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void fillCalendarTable(PlannerDay startDay, LocalDate localDate) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Filling up calendar table with start day: \" + startDay.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(startDay);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        int index \u003d startDay.getDayOfWeek();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        PlannerDay currDay \u003d startDay;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (index !\u003d 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            for (int i \u003d index - 1; i \u003e 0; i--) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                currDay \u003d currDay.getPrevDay();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            setCurrentMonth(currDay.getMonth());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            setCurrentYear(currDay.getYear());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        count++;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        for (int row \u003d 0; row \u003c 6; row++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            for (int col \u003d 0; col \u003c 7; col++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                PlannerDayCard plannerDayCard \u003d new PlannerDayCard(currDay);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                plannerDayCards.add(plannerDayCard);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                calendarTable.add(plannerDayCard.getRoot(), col, row);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                highlightDay(startDay, currDay, localDate, plannerDayCard);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                currDay \u003d currDay.getNextDay();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Filled calendar view with start date: \" + startDay.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Checks the days and set the colour and highlight dates."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param startDay Start day."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param currDay Current day."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param localDate User\u0027s specified date (can be null or not)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param plannerDayCard Planner Day Card."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private void highlightDay(PlannerDay startDay, PlannerDay currDay,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                              LocalDate localDate, PlannerDayCard plannerDayCard) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireAllNonNull(startDay, currDay, plannerDayCard);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (localDate !\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            if (currDay.getDay() \u003d\u003d localDate.getDayOfMonth()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    \u0026\u0026 currDay.getMonth() \u003d\u003d localDate.getMonthValue()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                plannerDayCard.setToday();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            if (currDay.getDay() \u003d\u003d startDay.getDay()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    \u0026\u0026 currDay.getMonth() \u003d\u003d startDay.getMonth()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                plannerDayCard.setToday();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (currDay.getMonth() \u003d\u003d startDay.getMonth()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            plannerDayCard.setSameMonthColour();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            plannerDayCard.setDifferentMonthColour();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Sets the current month of the calendar."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setCurrentMonth(int month) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Sets the current year of the calendar."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setCurrentYear(int year) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Clears the calendar."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void clearCalendar() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Clearing calendar...\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.calendarMonthYear.setText(\"\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        for (PlannerDayCard plannerDayCard : plannerDayCards) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            plannerDayCard.clear();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Cleared calendar.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Changes the month and year of calendar."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param yearMonth Year month user specified."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void changeCalendarMonthYear(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(yearMonth);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String label \u003d yearMonth.getMonth().name() + \" \" + yearMonth.getYear();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Changing calendar month year to: \" + label);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.calendarMonthYear.setText(label);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.calendarMonthYear.setId(\"month-year-label\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Changed calendar month year to: \" + label);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Updates indicator of all Planner Day Cards."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void updateIndicator() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Updating indicators...\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        for (PlannerDayCard plannerDayCard : plannerDayCards) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            plannerDayCard.updateIndicator();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Updated indicators.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 179
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/ui/planner/PlannerDayCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.ui.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.planner.PlannerDay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.TaskDueInPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.ui.MainWindow;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.ui.UiPart;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * An UI component that displays information of PlannerDay."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Displays details of a day in the calendar."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class PlannerDayCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static final String FXML \u003d \"PlannerDayCard.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PlannerDayCard.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final PlannerDay plannerDay;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private Circle circle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private Label dateNumber;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private Rectangle coverUp;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private Rectangle indicator;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Creates a {@code PlannerDayCard} with the given {@code PlannerDay} to display."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public PlannerDayCard(PlannerDay plannerDay) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Initialising plannerDayCard...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(plannerDay);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.plannerDay \u003d plannerDay;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        dateNumber.setText(Integer.toString(plannerDay.getDay()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        circle.setId(\"circle-not-today\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        setIndicator();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Clears the date number and highlight of a PlannerDayCard."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Clearing dates...\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        dateNumber.setText(\"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        circle.setId(\"circle-not-today\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Cleared dates.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Sets the date of the same month to be black colour."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setSameMonthColour() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        dateNumber.setId(\"same-month-colour\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Sets the date of the same month to be grey colour."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setDifferentMonthColour() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        dateNumber.setId(\"different-month-colour\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Highlights the date."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setToday() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        circle.setId(\"circle-today\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Sets the indicator of a Planner Day Card depending on number of tasks due on that day."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private void setIndicator() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Setting indicators...\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        setNoIndicator();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        ObservableList\u003cTask\u003e filteredList \u003d MainWindow.getLogic().getFilteredTaskList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate localDate \u003d plannerDay.getLocalDate();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        int numOfTasks \u003d filteredList.filtered(new TaskDueInPredicate(localDate)).size();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (numOfTasks \u003d\u003d 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            setNoIndicator();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else if (numOfTasks \u003c\u003d 2) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            setGreenIndicator();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            setRedIndicator();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Set indicators.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Sets indicator to no colour (0 tasks)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private void setNoIndicator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        coverUp.setId(\"indicator-no-tasks\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        indicator.setId(\"invisible\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Sets indicator to green colour (1 or 2 tasks)."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private void setGreenIndicator() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        coverUp.setId(\"invisible\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        indicator.setId(\"indicator-green\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Sets indicator to red colour (more than 2 tasks)."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private void setRedIndicator() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        coverUp.setId(\"invisible\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        indicator.setId(\"indicator-red\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Updates indicator of Planner Day Card."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void updateIndicator() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        setIndicator();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 139
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/ui/planner/PlannerTabWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.ui.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.planner.PlannerDay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.TaskDueInPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.util.GotoDateUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.ui.UiPart;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * An UI component that displays Planner tab."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Displays the calendar and tasks list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class PlannerTabWindow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static final String FXML \u003d \"PlannerTabWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PlannerCalendarPanel.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final PlannerCalendarPanel plannerCalendarPanel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final PlannerTaskListPanel plannerTaskListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private StackPane plannerCalendarPanelPlaceholder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private StackPane plannerTaskListPanelPlaceholder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Constructor for PlannerTabWindow."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param logic Logic of TR4CKER."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public PlannerTabWindow(Logic logic) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Initialising Planner Tab Window...\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.plannerCalendarPanel \u003d new PlannerCalendarPanel(PlannerDay.getCurrDay());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.plannerTaskListPanel \u003d new PlannerTaskListPanel(logic.getPlannerFilteredTaskList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logic.updatePlannerFilteredTaskList(new TaskDueInPredicate());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        updateToLocalDate(GotoDateUtil.getToday());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        plannerCalendarPanelPlaceholder.getChildren().add(plannerCalendarPanel.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        plannerTaskListPanelPlaceholder.getChildren().add(plannerTaskListPanel.getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Created Planner Tab Window.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Updates calendar aspect of Planner tab."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param commandResult CommandResult being passed in."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void updateCalendar(CommandResult commandResult) { // from mainwindow"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(commandResult);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Updating calendar with command result: \" + commandResult);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate localDate \u003d commandResult.getLocalDate();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        YearMonth yearMonth \u003d commandResult.getYearMonth();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (localDate \u003d\u003d null \u0026\u0026 yearMonth \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            updateToLocalDate(GotoDateUtil.getToday());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else if (localDate !\u003d null \u0026\u0026 yearMonth \u003d\u003d null) { // user wants to go to specified date"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            updateToLocalDate(localDate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else if (localDate \u003d\u003d null) { // user wants to go to specified month"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            updateToYearMonth(yearMonth);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Updated calendar with command result: \" + commandResult);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Updates calendar view to reflect user\u0027s input (specific date)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param localDate User\u0027s input."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private void updateToLocalDate(LocalDate localDate) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(localDate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Updating calendar view to: \" + GotoDateUtil.parseGotoDay(localDate));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        int year \u003d localDate.getYear();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        int month \u003d localDate.getMonthValue();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        int date \u003d localDate.getDayOfMonth();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        plannerCalendarPanel.setCurrentYear(year);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        plannerCalendarPanel.setCurrentMonth(month);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate newDate \u003d LocalDate.of(year, month, 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate userInput \u003d LocalDate.of(year, month, date);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        YearMonth newYearMonth \u003d YearMonth.of(year, month);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        PlannerDay newDay \u003d new PlannerDay(newDate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        plannerCalendarPanel.clearCalendar();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        plannerCalendarPanel.changeCalendarMonthYear(newYearMonth);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        plannerCalendarPanel.fillCalendarTable(newDay, userInput);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        plannerTaskListPanel.updateTitle(GotoDateUtil.parseGotoDay(localDate));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Updated calendar view to \" + GotoDateUtil.parseGotoDay(localDate));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Updates calendar view to reflect user\u0027s input (specific month)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param yearMonth User\u0027s input."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private void updateToYearMonth(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(yearMonth);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Updating calendar view to \" + GotoDateUtil.parseGotoMonth(yearMonth));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        int year \u003d yearMonth.getYear();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        int month \u003d yearMonth.getMonthValue();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        plannerCalendarPanel.setCurrentYear(year);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        plannerCalendarPanel.setCurrentMonth(month);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate firstDayOfMonth \u003d yearMonth.atDay(1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        PlannerDay newDay \u003d new PlannerDay(firstDayOfMonth);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        plannerCalendarPanel.clearCalendar();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        plannerCalendarPanel.changeCalendarMonthYear(yearMonth);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        plannerCalendarPanel.fillCalendarTable(newDay, null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        plannerTaskListPanel.updateTitle(\"01-\" + GotoDateUtil.parseGotoMonth(yearMonth));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Updated calendar view to \" + GotoDateUtil.parseGotoMonth(yearMonth));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Updates indicator in calendar panel."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void updateIndicator() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        plannerCalendarPanel.updateIndicator();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 135
    }
  },
  {
    "path": "src/main/java/seedu/tr4cker/ui/planner/PlannerTaskListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.ui.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.ui.TaskCard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.ui.UiPart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Panel containing the list of tasks in Planner."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class PlannerTaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static final String FXML \u003d \"PlannerTaskListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PlannerTaskListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private Label plannerTaskListPanelTitle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Creates a {@code PlannerTaskListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public PlannerTaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Initialising Planner Task List panel...\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(taskList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Created Planner Task List panel.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Updates the title of the task list panel."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param title New title."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void updateTitle(String title) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Updating date of planner task list panel to: \" + title);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        plannerTaskListPanelTitle.setText(\"Tasks due on: \" + title);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        logger.fine(\"Updated date of planner task list panel to: \" + title);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    static class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 73
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter your command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "hanweic53": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/CompletedTaskListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    \u003cPane fx:id\u003d\"completedTaskListPanelTitleHolder\" minHeight\u003d\"40.0\" prefHeight\u003d\"40.0\" styleClass\u003d\"all-tasks\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            \u003cLabel fx:id\u003d\"completedTaskListPanelTitle\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                   prefHeight\u003d\"30.0\" prefWidth\u003d\"${completedTaskListPanelTitleHolder.width}\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                   text\u003d\"Completed Tasks\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    \u003c/Pane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    \u003cListView fx:id\u003d\"completedTaskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "hanweic53": 19
    }
  },
  {
    "path": "src/main/resources/view/CountdownEventListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u003cLabel fx:id\u003d\"eventName\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$eventName\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" right\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u003cLabel fx:id\u003d\"eventDate\" styleClass\u003d\"cell_small_label_deadline\" text\u003d\"\\$eventDate\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u003cLabel fx:id\u003d\"daysRemaining\" styleClass\u003d\"cell_small_label_completionStatus\" text\u003d\"\\$eventDate\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cwenling"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "cwenling": 46
    }
  },
  {
    "path": "src/main/resources/view/CountdownEventListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    \u003cPane fx:id\u003d\"countdownEventListPanelTitleHolder\" minHeight\u003d\"40.0\" prefHeight\u003d\"40.0\" styleClass\u003d\"all-tasks\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            \u003cLabel fx:id\u003d\"countdownEventListPanelTitle\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                prefHeight\u003d\"30.0\" prefWidth\u003d\"${countdownEventListPanelTitleHolder.width}\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                text\u003d\"Upcoming Events\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    \u003c/Pane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    \u003cListView fx:id\u003d\"eventListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "cwenling": 19
    }
  },
  {
    "path": "src/main/resources/view/CountdownTabWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        \u003cSplitPane dividerPositions\u003d\"0.5\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                   AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                   AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            \u003citems\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u003cAnchorPane prefHeight\u003d\"400.0\" prefWidth\u003d\"1000.0\" minWidth\u003d\"650\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                        \u003cVBox AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                              AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"countdownListPanelPlaceholder\" prefHeight\u003d\"400.0\" prefWidth\u003d\"300.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            \u003c/items\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "cwenling": 26
    }
  },
  {
    "path": "src/main/resources/view/DailyPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    \u003cPane fx:id\u003d\"dailyPanelTitleHolder\" minHeight\u003d\"40.0\" prefHeight\u003d\"40.0\" styleClass\u003d\"all-tasks\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            \u003cLabel fx:id\u003d\"dailyListPanelTitle\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                   prefHeight\u003d\"30.0\" prefWidth\u003d\"${dailyPanelTitleHolder.width}\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                   text\u003d\"Daily todos\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    \u003c/Pane\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    \u003cListView fx:id\u003d\"dailyTodosListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yingqi0607": 16
    }
  },
  {
    "path": "src/main/resources/view/DailyTabWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        \u003cSplitPane dividerPositions\u003d\"0.5\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                   AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                   AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            \u003citems\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                \u003cAnchorPane prefHeight\u003d\"400.0\" prefWidth\u003d\"300.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                        \u003cVBox AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                              AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"dailyPanelPlaceholder\" prefHeight\u003d\"400.0\" prefWidth\u003d\"300.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            \u003c/items\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "yingqi0607": 26
    }
  },
  {
    "path": "src/main/resources/view/ExpiredTaskListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    \u003cPane fx:id\u003d\"expiredTaskListPanelTitleHolder\" minHeight\u003d\"40.0\" prefHeight\u003d\"40.0\" styleClass\u003d\"all-tasks\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            \u003cLabel fx:id\u003d\"expiredTaskListPanelTitle\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                   prefHeight\u003d\"30.0\" prefWidth\u003d\"${expiredTaskListPanelTitleHolder.width}\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                   text\u003d\"Expired Tasks\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    \u003c/Pane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    \u003cListView fx:id\u003d\"expiredTaskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "hanweic53": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003cfx:root minHeight\u003d\"775\" minWidth\u003d\"1300\" onCloseRequest\u003d\"#handleExit\" title\u003d\"TR4CKER\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    \u003cImage url\u003d\"@/images/soccat.png\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        \u003cURL value\u003d\"@PastelTheme.css\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "              \u003cLabel fx:id\u003d\"tabHome\" onMouseClicked\u003d\"#handleShowTabHome\" text\u003d\"Home\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "              \u003cLabel fx:id\u003d\"tabDaily\" onMouseClicked\u003d\"#handleShowTabDaily\" text\u003d\"Daily\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "          \u003cMenu\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "              \u003cLabel fx:id\u003d\"tabModule\" onMouseClicked\u003d\"#handleShowTabModule\" text\u003d\"Modules\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "          \u003cMenu\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "              \u003cLabel fx:id\u003d\"tabCountdown\" onMouseClicked\u003d\"#handleShowTabCountdown\" text\u003d\"Countdown\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "          \u003cMenu\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "              \u003cLabel fx:id\u003d\"tabPlanner\" onMouseClicked\u003d\"#handleShowTabPlanner\" text\u003d\"Planner\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        \u003cPane fx:id\u003d\"Header\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" styleClass\u003d\"header\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "          \u003cLabel fx:id\u003d\"labelHeader\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefHeight\u003d\"${Header.height}\" prefWidth\u003d\"${Header.width}\" text\u003d\"TR4CKER\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        \u003c/Pane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        \u003cTabPane fx:id\u003d\"tabPane\" style\u003d\"-fx-tab-max-height: -10;\" tabClosingPolicy\u003d\"UNAVAILABLE\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "          \u003ctabs\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003cTab text\u003d\"Home\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                \u003cVBox fx:id\u003d\"taskList\" minWidth\u003d\"900\" prefHeight\u003d\"110.0\" prefWidth\u003d\"1550.0\" styleClass\u003d\"pane-no-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                  \u003cSplitPane dividerPositions\u003d\"0.33, 0.66\" minWidth\u003d\"900\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" prefWidth\u003d\"300\" minWidth\u003d\"-Infinity\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"expiredTaskListPanelPlaceholder\" prefWidth\u003d\"300\" minWidth\u003d\"-Infinity\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"completedTaskListPanelPlaceholder\" prefWidth\u003d\"300\" minWidth\u003d\"-Infinity\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                  \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "              \u003c/content\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003cTab text\u003d\"Daily\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                \u003cStackPane fx:id\u003d\"dailyTabWindowPlaceholder\" prefHeight\u003d\"110.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "              \u003c/content\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003cTab text\u003d\"Module\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"moduleListPanelPlaceholder\" prefWidth\u003d\"900\" minWidth\u003d\"-Infinity\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "              \u003c/content\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003cTab text\u003d\"Countdown\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                \u003cStackPane fx:id\u003d\"countdownTabWindowPlaceholder\" prefHeight\u003d\"110.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "              \u003c/content\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003cTab text\u003d\"Planner\"\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                \u003cStackPane fx:id\u003d\"plannerTabWindowPlaceholder\" prefHeight\u003d\"110.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "              \u003c/content\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "          \u003c/tabs\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "          \u003c!-- Soccat --\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        \u003cHBox maxHeight\u003d\"250\" minHeight\u003d\"130\" styleClass\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cwenling"
        },
        "content": "          \u003cImageView fitWidth\u003d\"175.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            \u003cimage\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cwenling"
        },
        "content": "              \u003cImage url\u003d\"@../images/soccat.png\" /\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            \u003c/image\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "              \u003cInsets bottom\u003d\"40.0\" top\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cwenling"
        },
        "content": "          \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cwenling"
        },
        "content": "          \u003cVBox spacing\u003d\"3\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "              \u003cInsets bottom\u003d\"5\" left\u003d\"5\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"200\" minHeight\u003d\"130\" prefHeight\u003d\"190\" prefWidth\u003d\"1100\" styleClass\u003d\"interaction-pane\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" right\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"command-pane\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 14,
      "yingqi0607": 2,
      "hanweic53": 27,
      "cwenling": 11,
      "-": 40,
      "ethan-l-m-e": 40
    }
  },
  {
    "path": "src/main/resources/view/ModuleCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "\u003cHBox id\u003d\"moduleCardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"40\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003cHBox fx:id\u003d\"moduleCard\" alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"5\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u003cLabel fx:id\u003d\"moduleCode\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$moduleCode\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u003cLabel fx:id\u003d\"moduleName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$moduleName\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003cListView fx:id\u003d\"smallTaskListView\" minHeight\u003d\"-10\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ethan-l-m-e": 44
    }
  },
  {
    "path": "src/main/resources/view/ModuleListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \u003cPane fx:id\u003d\"moduleListPanelTitleHolder\" minHeight\u003d\"40.0\" prefHeight\u003d\"40.0\" styleClass\u003d\"all-tasks\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003cLabel fx:id\u003d\"moduleListPanelTitle\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                   prefHeight\u003d\"30.0\" prefWidth\u003d\"${moduleListPanelTitleHolder.width}\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                   text\u003d\"All Modules\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \u003c/Pane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \u003cListView fx:id\u003d\"moduleListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ethan-l-m-e": 19
    }
  },
  {
    "path": "src/main/resources/view/PastelTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "/** PastelTheme Palette"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * -fx-background-color: #eecfcf; (Pink TaskList bg)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * -fx-background-color: #ff6699; (Red Tag)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * -fx-background-color: derive(#97b5b7, 20%); (Background green)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "@font-face {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    font-family: \u0027Caveat Brush\u0027, cursive;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    src: url(\u0027../fonts/CaveatBrush-Regular.ttf\u0027);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    -fx-background-color: derive(#97b5b7, 20%);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    background-color: #97b5b7; /* Used in the default.html file */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ".header{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    -fx-background-color: #47505f;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ".header .label{"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    -fx-font-size: 30pt;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    -fx-font-family: \"Caveat Brush\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    -fx-text-alignment: center;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cwenling"
        },
        "content": ".all-tasks {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    -fx-background-color: #90BCF0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cwenling"
        },
        "content": ".all-tasks .label {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    -fx-font-size: 25pt;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    -fx-font-family: \"Caveat Brush\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "#taskListView, #expiredTaskListView, #completedTaskListView, .list-cell:empty{"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    -fx-background-color: #eecfcf;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    -fx-background-color: derive(#97b5b7, 20%);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    -fx-base: #97b5b7;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    -fx-control-inner-background: #97b5b7;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    -fx-background-color: #97b5b7;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    -fx-background-color: derive(#97b5b7, 20%);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    -fx-background-color: derive(#97b5b7, 20%);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    -fx-background-color: #eecfcf;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap: 0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-background-color: #CDEDFD;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-background-color: #C2D8FA;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    //-fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-border-color: #396AB7;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-border-width: 4;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-font-family: \"Tw Cen MT\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-font-family: \"Century Gothic\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ".cell_small_label_completionStatus {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-font-family: \"Consolas\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-background-color: #DBD424;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-padding: 2 5 2 5;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.3), 5, 0.5, 1.5, 1.5);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ".cell_small_label_deadline {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-font-family: \"Consolas\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-background-color: #3FFB73;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-padding: 2 5 2 5;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.3), 5, 0.5, 1.5, 1.5);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ".cell_small_label_moduleCode {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-font-family: \"Consolas\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-background-color: #ff6699;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-padding: 2 5 2 5;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.3), 5, 0.5, 1.5, 1.5);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     -fx-background-color: derive(#97b5b7, 20%);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ".pane-no-border {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     -fx-background-color: derive(#97b5b7, 20%);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ".interaction-pane {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    -fx-background-color: #fde6fb;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    -fx-border-color: #46505F;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    -fx-border-width: 3px;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ".command-pane {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    -fx-background-color: #F6FCFF;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    -fx-border-color: #46505F;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    -fx-border-width: 3px;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    -fx-background-color: #fde6fb;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-font-family: \"Caveat Brush\", Brush Script MT;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    -fx-font-size: 15pt;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    -fx-text-fill: #796f6f;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    -fx-background-color: #eed4d4;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    -fx-background-color: derive(#97b5b7, 30%);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    -fx-border-color: derive(#97b5b7, 25%);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    -fx-background-color: derive(#97b5b7, 30%);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    -fx-border-color: derive(#97b5b7, 30%);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    -fx-background-color: derive(#97b5b7, 30%);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    -fx-background-color: derive(#97b5b7, 50%);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    -fx-background-color: #F8D8ED;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    -fx-font-size: 18pt;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    -fx-font-family: \"Caveat Brush\";"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    -fx-background-color: #97b5b7;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    -fx-background-color: #97b5b7;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    -fx-background-color: #97b5b7;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    -fx-background-color: #97b5b7;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    -fx-background-color: derive(#97b5b7, 25%);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    -fx-background-color: #46505F;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "/*.scroll-bar .thumb {*/"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "/*    -fx-background-color: #FAC2D8;*/"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "/*    -fx-background-insets: 3;*/"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "/*    -fx-border-color: black;*/"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "/*    -fx-border-width: 3.5;*/"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "/*.scroll-bar .increment-button, .scroll-bar .decrement-button {*/"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "/*    -fx-background-color: transparent;*/"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "/*    -fx-padding: 0 0 0 0;*/"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "/*.scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {*/"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "/*    -fx-shape: \" \";*/"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "/*.scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {*/"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "/*    -fx-padding: 1 8 1 8;*/"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "/*.scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {*/"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "/*    -fx-padding: 8 1 8 1;*/"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "#filterField, #taskListPanel, #taskWebpage {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "/*module tab\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d*/"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ".list-cell:filled #moduleListCardPane {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-background-color: derive(#97b5b7, 20%);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "#moduleListCardPane {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-background-color: derive(#97b5b7, 20%);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "#smallTaskListView {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-padding: 0 0 0 11;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-background-color: derive(#97b5b7, 20%);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "#smallTaskListView .list-cell:filled {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "   -fx-background-radius: 7px;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "#smallTaskListView .scroll-bar {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-opacity: 0;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "#moduleListView {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-background-color: derive(#97b5b7, 20%);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "#moduleListView .list-cell:empty {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-background-color: derive(#97b5b7, 20%);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "#moduleCard {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-background-radius: 7px;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-background-color: derive(#33cccc, 20%)"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "#moduleCard {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-background-radius: 7px;"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-background-color: derive(#33cccc, 20%)"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "#moduleCardPane {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-background-color: derive(#97b5b7, 20%);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "#moduleName, #moduleCode {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-font-size: 20;"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-font-family: \"Caveat Brush\";"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-opacity: 0.7;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "#moduleCode .label {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-background-color: #ff6699;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-font-size: 13;"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-font-family: \"Consolas\";"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.3), 5, 0.5, 1.5, 1.5);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "/*planner tab\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d*/"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "#month-year-label {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-font-family: \"Century Schoolbook\";"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "#same-month-colour {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-font-size: 9pt;"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "#different-month-colour {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-font-size: 9pt;"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-opacity: 0.5;"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ".vbox {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-background-color: #FCEEF7;"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.5), 2, 0.5, 2, 2.5);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ".calendarGrid Line {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-stroke: #ec97cf;"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-stroke-width: 1.5;"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "#circle-not-today {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-stroke: #FCEEF7;"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-stroke-width: 2;"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "#circle-today {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-stroke: #d55291;"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-stroke-width: 2;"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "#indicator-no-tasks {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-fill: #FCEEF7;"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "#indicator-green {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-fill: #1da15f;"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "#indicator-red {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-fill: #DC143C;"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "#invisible {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    -fx-fill: transparent;"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "/*others\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d*/"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-background-color: #5CE3EC;"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-font-size: 13;"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-font-family: \"Consolas\";"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.3), 5, 0.5, 1.5, 1.5);"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 98,
      "yingqi0607": 27,
      "hanweic53": 71,
      "cwenling": 10,
      "ethan-l-m-e": 87,
      "-": 255
    }
  },
  {
    "path": "src/main/resources/view/PlannerCalendarPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003cVBox fx:id\u003d\"vbox\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"388.0\" prefWidth\u003d\"473.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        \u003cStackPane alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"63.0\" prefWidth\u003d\"474.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                \u003cLabel fx:id\u003d\"calendarMonthYear\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefHeight\u003d\"49.0\" prefWidth\u003d\"306.0\" text\u003d\"monthYear\" StackPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "      \u003cStackPane prefHeight\u003d\"63.0\" prefWidth\u003d\"435.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003cGridPane alignment\u003d\"CENTER\" prefHeight\u003d\"35.0\" prefWidth\u003d\"660.0\" StackPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "              \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "              \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "              \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "              \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefHeight\u003d\"18.0\" prefWidth\u003d\"61.0\" text\u003d\"MON\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefHeight\u003d\"18.0\" prefWidth\u003d\"61.0\" text\u003d\"TUES\" textAlignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefHeight\u003d\"18.0\" prefWidth\u003d\"63.0\" text\u003d\"WED\" textAlignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefHeight\u003d\"18.0\" prefWidth\u003d\"62.0\" text\u003d\"THUR\" textAlignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefHeight\u003d\"18.0\" prefWidth\u003d\"62.0\" text\u003d\"FRI\" textAlignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefHeight\u003d\"18.0\" prefWidth\u003d\"61.0\" text\u003d\"SAT\" textAlignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefHeight\u003d\"18.0\" prefWidth\u003d\"68.0\" text\u003d\"SUN\" GridPane.columnIndex\u003d\"6\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "         \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "         \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003cInsets left\u003d\"20.0\" right\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "         \u003c/padding\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "      \u003cStackPane prefHeight\u003d\"164.0\" prefWidth\u003d\"423.0\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "             \u003cGridPane fx:id\u003d\"calendarTable\" alignment\u003d\"CENTER\" gridLinesVisible\u003d\"true\" prefHeight\u003d\"274.0\" prefWidth\u003d\"423.0\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                 \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                     \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                     \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                     \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                     \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                     \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                     \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                     \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                 \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                 \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                     \u003cRowConstraints minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                     \u003cRowConstraints minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                     \u003cRowConstraints minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                     \u003cRowConstraints minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                     \u003cRowConstraints minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                     \u003cRowConstraints minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                 \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "             \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"20.0\" right\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "         \u003c/padding\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 72
    }
  },
  {
    "path": "src/main/resources/view/PlannerDayCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import javafx.scene.shape.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "      \u003cCircle fx:id\u003d\"circle\" fill\u003d\"#ffffff00\" layoutX\u003d\"15.5\" layoutY\u003d\"14.0\" radius\u003d\"12.0\" stroke\u003d\"#d55291\" strokeType\u003d\"INSIDE\" strokeWidth\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "      \u003cLabel fx:id\u003d\"dateNumber\" contentDisplay\u003d\"RIGHT\" layoutX\u003d\"11.0\" layoutY\u003d\"5.0\" text\u003d\"Date Number\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "      \u003cRectangle fx:id\u003d\"coverUp\" fill\u003d\"DODGERBLUE\" height\u003d\"12.0\" layoutX\u003d\"49.3\" layoutY\u003d\"37.3\" stroke\u003d\"TRANSPARENT\" strokeType\u003d\"INSIDE\" width\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "      \u003cRectangle fx:id\u003d\"indicator\" height\u003d\"10.0\" layoutX\u003d\"51.0\" layoutY\u003d\"39.0\" stroke\u003d\"TRANSPARENT\" strokeMiterLimit\u003d\"0.0\" strokeType\u003d\"INSIDE\" width\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "      \u003c/Rectangle\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 15
    }
  },
  {
    "path": "src/main/resources/view/PlannerTabWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "      \u003cSplitPane dividerPositions\u003d\"0.5\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                 AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                 AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        \u003citems\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003cAnchorPane prefHeight\u003d\"400.0\" prefWidth\u003d\"300.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                  \u003cVBox AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                        AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"plannerCalendarPanelPlaceholder\" prefHeight\u003d\"400.0\" prefWidth\u003d\"300.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003cAnchorPane prefHeight\u003d\"400.0\" prefWidth\u003d\"300.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                  \u003cVBox AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                        AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"plannerTaskListPanelPlaceholder\" prefHeight\u003d\"400.0\" prefWidth\u003d\"300.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        \u003c/items\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "      \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 35
    }
  },
  {
    "path": "src/main/resources/view/PlannerTaskListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    \u003cPane fx:id\u003d\"plannerTaskListPanelTitleHolder\" minHeight\u003d\"40.0\" prefHeight\u003d\"40.0\" styleClass\u003d\"all-tasks\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003cLabel fx:id\u003d\"plannerTaskListPanelTitle\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                   prefHeight\u003d\"30.0\" prefWidth\u003d\"${plannerTaskListPanelTitleHolder.width}\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                   text\u003d\"Tasks\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    \u003c/Pane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 19
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "hanweic53": 2,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/SmallTaskCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        \u003cVBox fx:id\u003d\"smallTaskCard\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"40\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u003cInsets bottom\u003d\"0\" left\u003d\"15\" right\u003d\"5\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$moduleCode\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$moduleName\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ethan-l-m-e": 40
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "               \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "         \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label_deadline\" text\u003d\"\\$deadline\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "               \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "         \u003cLabel fx:id\u003d\"completionStatus\" styleClass\u003d\"cell_small_label_completionStatus\" text\u003d\"\\$completionStatus\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "               \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"moduleCode\" prefHeight\u003d\"9.0\" prefWidth\u003d\"130.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" prefHeight\u003d\"9.0\" prefWidth\u003d\"130.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "               \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 28,
      "hanweic53": 1,
      "-": 20,
      "ethan-l-m-e": 1
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    \u003cPane fx:id\u003d\"taskListPanelTitleHolder\" minHeight\u003d\"40.0\" prefHeight\u003d\"40.0\" styleClass\u003d\"all-tasks\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            \u003cLabel fx:id\u003d\"taskListPanelTitle\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                   prefHeight\u003d\"30.0\" prefWidth\u003d\"${taskListPanelTitleHolder.width}\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                   text\u003d\"Pending Tasks\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    \u003c/Pane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "yingqi0607": 1,
      "hanweic53": 1,
      "cwenling": 9,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/TodoCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                    \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label_deadline\" text\u003d\"\\$deadline\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                    \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                    \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                \u003c/VBox.margin\u003e\u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yingqi0607": 45
    }
  },
  {
    "path": "src/test/data/JsonSerializableTr4ckerTest/duplicateTaskTr4cker.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  \"tasks\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \"name\": \"Duplicate Task\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    \"deadline\": \"20-Oct-2021 1800\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \"completionStatus\": 0,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    \"description\": \"description 1\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \"moduleCode\" : [ ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \"tagged\": [ \"urgent\" ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \"name\": \"Duplicate Task\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    \"deadline\": \"20-Oct-2021 1800\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \"completionStatus\": 0,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \"description\": \"description 1\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \"moduleCode\" : [ ],"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \"tagged\": [ \"urgent\" ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  \"events\" : ["
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "      \"eventName\": \"Event1 Name\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": "      \"eventDate\": \"01-01-2021\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "  \"modules\" : ["
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "      \"moduleName\": \"Module3 Name\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "      \"moduleCode\": \"Module3Code\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "  \"todos\" : ["
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "      \"name\": \"Todo1 Name\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "      \"deadline\": \"12-Jul-2021 0600\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "yingqi0607": 11,
      "hanweic53": 2,
      "cwenling": 7,
      "-": 3,
      "ethan-l-m-e": 9
    }
  },
  {
    "path": "src/test/data/JsonSerializableTr4ckerTest/invalidTaskTr4cker.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  \"tasks\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \"name\": \"Invalid Task\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    \"deadline\": \"99990000 8888\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \"completionStatus\": -1,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    \"description\": \"description\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "  \"events\" : [ {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "      \"eventName\": \"Event1 Name\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "      \"eventDate\": \"01-01-2021\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "  \"modules\" : [ {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    \"moduleName\": \"Module3 Name\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    \"moduleCode\": \"Module3Code\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "  \"todos\": [ {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    \"name\": \"Invalid Task\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    \"deadline\": \"99990000 8888\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "yingqi0607": 11,
      "cwenling": 4,
      "-": 2,
      "ethan-l-m-e": 2
    }
  },
  {
    "path": "src/test/data/JsonSerializableTr4ckerTest/typicalTasksTr4cker.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  \"_comment\": \"TR4CKER save file which contains the same Task values as in TypicalTasks#getTypicalTr4cker()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  \"tasks\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    \"name\" : \"Task1Name\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    \"deadline\" : \"20-Oct-2021 1800\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \"completionStatus\" : 0,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \"description\" : \"Task 1 description\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    \"tagged\" : [ \"homework\" ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    \"name\" : \"Task2 Name\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    \"deadline\" : \"30-09-2021 2359\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \"completionStatus\" : 0,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    \"description\" : \"Task 2 description\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    \"tagged\" : [ \"graded\", \"assignment\" ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    \"name\" : \"Task3 Name\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    \"deadline\" : \"10-03-2021 1200\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \"completionStatus\" : 0,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    \"description\" : \"Task 3 description\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    \"tagged\" : [ \"homework\" ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    \"name\" : \"Task4 Name\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    \"deadline\" : \"21-09-2021 1500\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \"completionStatus\" : 0,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    \"description\" : \"Task 4 description\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    \"name\" : \"Task5 Name\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    \"deadline\" : \"10-10-2021 1010\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \"completionStatus\" : 0,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    \"description\" : \"Task 5 description\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    \"tagged\" : [ \"homework\" ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    \"name\" : \"Task6 Name\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    \"deadline\" : \"25-12-2021 0000\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \"completionStatus\" : 0,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    \"description\" : \"Task 6 description\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    \"tagged\" : [ \"homework\" ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    \"name\" : \"Task7 Name\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    \"deadline\" : \"01-01-2021 0000\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \"completionStatus\" : 0,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    \"description\" : \"Task 7 description\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    \"tagged\" : [ \"homework\" ]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  \"events\" : ["
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cwenling"
        },
        "content": "      \"eventName\": \"Event1 Name\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cwenling"
        },
        "content": "      \"eventDate\": \"01-01-2021\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "      \"eventName\": \"Event2 Name\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cwenling"
        },
        "content": "      \"eventDate\": \"10-10-2020\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cwenling"
        },
        "content": "      \"eventName\": \"Event3 Name\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cwenling"
        },
        "content": "      \"eventDate\": \"30-11-2020\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "  \"modules\" : ["
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "      \"moduleName\": \"Module1 Name\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "      \"moduleCode\": \"Module1Code\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "      \"moduleName\": \"Module2 Name\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "      \"moduleCode\": \"Module2Code\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "      \"moduleName\": \"Module3 Name\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "      \"moduleCode\": \"Module3Code\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "  \"todos\" : ["
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "      \"name\": \"Todo1 Name\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "      \"deadline\": \"12-Jul-2021 0600\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "      \"name\": \"Todo2 Name\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "      \"deadline\": \"27-Sep-2021 2359\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "      \"name\": \"Todo3 Name\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "      \"deadline\": \"20-Oct-2021 1800\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 10,
      "yingqi0607": 18,
      "hanweic53": 12,
      "cwenling": 13,
      "-": 9,
      "ethan-l-m-e": 20
    }
  },
  {
    "path": "src/test/data/JsonTr4ckerStorageTest/invalidAndValidTaskTr4cker.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  \"tasks\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    \"name\": \"Valid Task\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    \"deadline\": \"01-01-2021 0000\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \"completionStatus\": 0,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    \"description\": \"valid description\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    \"name\": \"Task With Invalid Deadline Field\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    \"deadline\": \"100-01-2021\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \"completionStatus\": 0,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    \"description\": \"invalid description\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "yingqi0607": 2,
      "hanweic53": 4,
      "-": 4,
      "ethan-l-m-e": 2
    }
  },
  {
    "path": "src/test/data/JsonTr4ckerStorageTest/invalidTaskTr4cker.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "  \"tasks\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \"name\": \"Task with invalid name field: Ta!sk Du@e\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    \"deadline\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    \"completionStatus\": -1,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    \"description\": \"invalid description\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "yingqi0607": 1,
      "cwenling": 1,
      "-": 3,
      "ethan-l-m-e": 2
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  \"tr4ckerFilePath\" : \"tr4cker.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cwenling": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "  \"tr4ckerFilePath\" : \"tr4cker.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cwenling": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        another \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(one.compareTo(another), 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotEquals(one, null);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(one.equals(index));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 15,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        final Index fifthTaskIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(fifthTaskIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(fifthTaskIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(fifthTaskIndex.equals(fifthTaskIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(fifthTaskIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(fifthTaskIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(fifthTaskIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 9,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/soccat.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 2,
      "-": 139,
      "ethan-l-m-e": 2
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.DEADLINE_DESC_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.DESCRIPTION_DESC_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.EVENT_DATE_DESC_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.EVENT_NAME_DESC_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.NAME_DESC_1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_EVENT_DATE_1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_EVENT_NAME_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.MANUAL_TASK1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.logic.commands.CountdownCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ReadOnlyTr4cker;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Tr4cker;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.UserPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.Event;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.storage.JsonTr4cker;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.storage.StorageManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        JsonTr4cker tr4ckerStorage \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                new JsonTr4cker(temporaryFolder.resolve(\"tr4cker.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        StorageManager storage \u003d new StorageManager(tr4ckerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // Setup LogicManager with JsonTr4ckerIoExceptionThrowingStub"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        JsonTr4cker tr4ckerStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                new JsonTr4ckerIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionTr4cker.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        StorageManager storage \u003d new StorageManager(tr4ckerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_1 + DEADLINE_DESC_1"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                + DESCRIPTION_DESC_1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(MANUAL_TASK1).withTags().build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedModel.addTask(expectedTask);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String expectedMessage1 \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage1, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String addCountdown \u003d CountdownCommand.COMMAND_WORD + EVENT_NAME_DESC_1 + EVENT_DATE_DESC_1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Event expectedEvent \u003d new Event(new EventName(VALID_EVENT_NAME_1), new EventDate(VALID_EVENT_DATE_1, false));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        expectedModel.addEvent(expectedEvent);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String expectedMessage2 \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertCommandFailure(addCountdown, CommandException.class, expectedMessage2, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredTaskList().remove(0));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void getPlannerFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getPlannerFilteredTaskList().remove(0));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void getFilteredEventList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredEventList().remove(0));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void getTr4cker_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(logic.getTr4cker().getClass(), Tr4cker.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void getGuiSettings_success() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(logic.getGuiSettings().getClass(), GuiSettings.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static class JsonTr4ckerIoExceptionThrowingStub extends JsonTr4cker {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        private JsonTr4ckerIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        public void saveTr4cker(ReadOnlyTr4cker tr4cker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 50,
      "yingqi0607": 2,
      "hanweic53": 3,
      "cwenling": 23,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.getTypicalTr4cker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        model \u003d new ModelManager(getTypicalTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void execute_newTask_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedModel.addTask(validTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertCommandSuccess(new AddCommand(validTask), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validTask), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task taskInList \u003d model.getTr4cker().getTaskList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertCommandFailure(new AddCommand(taskInList), model, AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 19,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ReadOnlyTr4cker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Tr4cker;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.daily.Todo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.Module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void constructor_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void execute_taskAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validTask).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validTask), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTask(validTask);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_TASK, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        Task homework \u003d new TaskBuilder().withName(\"homework\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        Task assignment \u003d new TaskBuilder().withName(\"assignment\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        AddCommand addTask1Command \u003d new AddCommand(homework);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        AddCommand addTask2Command \u003d new AddCommand(assignment);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(addTask1Command.equals(addTask1Command));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        AddCommand addTask1CommandCopy \u003d new AddCommand(homework);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(addTask1Command.equals(addTask1CommandCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(addTask1Command.equals(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(addTask1Command.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(addTask1Command.equals(addTask2Command));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        public Path getTr4ckerFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        public void setTr4ckerFilePath(Path tr4ckerFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        public void setTr4cker(ReadOnlyTr4cker tr4cker) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        public ReadOnlyTr4cker getTr4cker() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public boolean hasRelatedTasks(Module module) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public boolean hasValidModuleField(Task task) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        public boolean hasTodo(Todo todo) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        public void deleteTodo(Todo todo) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        public void addTodo(Todo todo) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredPendingTaskList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredExpiredTaskList() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredCompletedTaskList() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        public ObservableList\u003cTask\u003e getPlannerFilteredTaskList() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        public ObservableList\u003cTodo\u003e getFilteredTodoList() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        public void updateFilteredPendingTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        public void updateFilteredExpiredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        public void updateFilteredCompletedTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        public void updatePlannerFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        public void updateFilteredTodoList(Predicate\u003cTodo\u003e predicate) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * A Model stub that contains a single task."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private class ModelStubWithTask extends ModelStub {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        private final Task task;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        ModelStubWithTask(Task task) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return this.task.isSameTask(task);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * A Model stub that always accept the task being added."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private class ModelStubAcceptingTaskAdded extends ModelStub {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        final ArrayList\u003cModule\u003e modulesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return tasksAdded.stream().anyMatch(task::isSameTask);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            tasksAdded.add(task);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public boolean hasValidModuleField(Task task) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            return modulesAdded.stream().noneMatch(module -\u003e task.getModuleCode().contains(module.moduleCode));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        public ReadOnlyTr4cker getTr4cker() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return new Tr4cker();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 74,
      "yingqi0607": 26,
      "hanweic53": 30,
      "cwenling": 26,
      "-": 131,
      "ethan-l-m-e": 37
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.getTypicalTr4cker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Tr4cker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void execute_emptyTr4cker_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void execute_nonEmptyTr4cker_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedModel.setTr4cker(new Tr4cker());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 32
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate localDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        YearMonth yearMonth \u003d YearMonth.now();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        CommandResult commandResult1 \u003d new CommandResult(\"feedback\", localDate, yearMonth);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(new CommandResult(\"feedback\"), commandResult);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(new CommandResult(\"feedback\", false, false), commandResult);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(new CommandResult(\"feedback\", localDate, yearMonth), commandResult1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(commandResult, commandResult);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotEquals(commandResult, null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotEquals(new CommandResult(\"different\"), commandResult);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotEquals(new CommandResult(\"feedback\", true, false), commandResult);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotEquals(new CommandResult(\"feedback\", false, true), commandResult);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testBoolean() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\", true, true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(commandResult.isShowHelp());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(commandResult.isExit());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(commandResult.isShowPlanner());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 23,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_COUNTDOWN_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_COUNTDOWN_DELETE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_COUNTDOWN_NEW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_DELETE_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_MODULE_DELETE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_NEW_TAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_TASK_DESCRIPTION;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Tr4cker;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String VALID_NAME_1 \u003d \"CS2100S Assignment\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String VALID_NAME_2 \u003d \"CS1010E Midterm QuizS\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String VALID_DEADLINE_1 \u003d \"20-Oct-2021 1800\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String VALID_DEADLINE_2 \u003d \"24-Sep-2021 2359\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final int VALID_COMPLETION_STATUS_1 \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final int VALID_COMPLETION_STATUS_2 \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public static final String VALID_DESCRIPTION_1 \u003d \"description 1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public static final String VALID_DESCRIPTION_2 \u003d \"description 2\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String VALID_MODULE_NAME_1 \u003d \"Module 1\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String VALID_MODULE_NAME_2 \u003d \"Module 2\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String VALID_MODULE_CODE_1 \u003d \"CS1111\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String VALID_MODULE_CODE_2 \u003d \"CS2222\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String VALID_EVENT_NAME_1 \u003d \"event 1\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String VALID_EVENT_NAME_2 \u003d \"event 2\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String VALID_EVENT_DATE_1 \u003d \"10-10-2021\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String VALID_EVENT_DATE_2 \u003d \"20-10-2021\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String VALID_TAG_URGENT \u003d \"urgent\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String VALID_TAG_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String VALID_TAG_HOMEWORK \u003d \"homework\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String VALID_TAG_WORK \u003d \"work\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String VALID_TAG_ASSIGNMENT \u003d \"assignment\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String VALID_TAG_MISSION \u003d \"mission\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String NAME_DESC_1 \u003d \" \" + PREFIX_NAME + VALID_NAME_1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String NAME_DESC_2 \u003d \" \" + PREFIX_NAME + VALID_NAME_2;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String DEADLINE_DESC_1 \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String DEADLINE_DESC_2 \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_2;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String COMPLETION_STATUS_DESC_1 \u003d \" \" + PREFIX_COMPLETION_STATUS + VALID_COMPLETION_STATUS_1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String COMPLETION_STATUS_DESC_2 \u003d \" \" + PREFIX_COMPLETION_STATUS + VALID_COMPLETION_STATUS_2;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String DESCRIPTION_DESC_1 \u003d \" \" + PREFIX_TASK_DESCRIPTION + VALID_DESCRIPTION_1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String DESCRIPTION_DESC_2 \u003d \" \" + PREFIX_TASK_DESCRIPTION + VALID_DESCRIPTION_2;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String MODULE_NAME_DESC_1 \u003d \" \" + PREFIX_MODULE_NAME + VALID_MODULE_NAME_1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String MODULE_NAME_DESC_2 \u003d \" \" + PREFIX_MODULE_NAME + VALID_MODULE_NAME_2;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String MODULE_CODE_DESC_1 \u003d \" \" + PREFIX_MODULE_CODE + VALID_MODULE_CODE_1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String MODULE_CODE_DESC_2 \u003d \" \" + PREFIX_MODULE_CODE + VALID_MODULE_CODE_2;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String MODULE_DELETE_DESC \u003d \" \" + PREFIX_MODULE_DELETE + \"1\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String EVENT_NAME_DESC_1 \u003d \" \" + PREFIX_COUNTDOWN_NEW + VALID_EVENT_NAME_1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String EVENT_NAME_DESC_2 \u003d \" \" + PREFIX_COUNTDOWN_NEW + VALID_EVENT_NAME_2;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String EVENT_DATE_DESC_1 \u003d \" \" + PREFIX_COUNTDOWN_DATE + VALID_EVENT_DATE_1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String EVENT_DATE_DESC_2 \u003d \" \" + PREFIX_COUNTDOWN_DATE + VALID_EVENT_DATE_2;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String EVENT_DELETE_DESC_1 \u003d \" \" + PREFIX_COUNTDOWN_DELETE + \"1\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String TAG_DESC_HELP \u003d \" \" + PREFIX_TAG + VALID_TAG_HELP;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String TAG_DESC_URGENT \u003d \" \" + PREFIX_TAG + VALID_TAG_URGENT;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"CS2103\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String INVALID_DEADLINE_DESC \u003d \" \" + PREFIX_DEADLINE + \"2020-09-a\"; // \u0027a\u0027 not allowed"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    // in deadlines"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final String INVALID_COMPLETION_STATUS \u003d \" \" + PREFIX_COMPLETION_STATUS + 1000; // \u003e100 not allowed"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \" \" + PREFIX_TASK_DESCRIPTION; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String INVALID_MODULE_NAME_DESC \u003d \" \" + PREFIX_MODULE_NAME + \"!Discrete Structures\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    // \u0027!\u0027 not allowed"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String INVALID_MODULE_CODE_DESC \u003d \" \" + PREFIX_MODULE_CODE + \"#CS3241\"; // \u0027#\u0027 not allowed"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    // in module codes"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final String INVALID_MODULE_DELETE_DESC \u003d \" \" + PREFIX_MODULE_DELETE + \"-1\"; // \u0027#\u0027 not allowed"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    // in module codes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"tag*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String INVALID_NEW_TAG \u003d \" \" + PREFIX_NEW_TAG + \"tag*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String INVALID_DELETE_TAG \u003d \" \" + PREFIX_DELETE_TAG + \"tag*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final EditCommand.EditTaskDescriptor DESC_1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final EditCommand.EditTaskDescriptor DESC_2;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String TAG_NEW_HOMEWORK \u003d \" \" + PREFIX_NEW_TAG + VALID_TAG_HOMEWORK;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String TAG_NEW_WORK \u003d \" \" + PREFIX_NEW_TAG + VALID_TAG_WORK;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String TAG_DELETE_ASSIGNMENT \u003d \" \" + PREFIX_DELETE_TAG + VALID_TAG_ASSIGNMENT;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String TAG_DELETE_MISSION \u003d \" \" + PREFIX_DELETE_TAG + VALID_TAG_MISSION;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String INVALID_NO_NEW_TAG \u003d \" \" + PREFIX_NEW_TAG;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String INVALID_NO_DELETE_TAG \u003d \" \" + PREFIX_DELETE_TAG;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        DESC_1 \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_1)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                .withDeadline(VALID_DEADLINE_1).withTaskDescription(VALID_DESCRIPTION_1)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                .withTags(VALID_TAG_HELP).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        DESC_2 \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_2)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                .withDeadline(VALID_DEADLINE_2).withTaskDescription(VALID_DESCRIPTION_2)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                .withTags(VALID_TAG_URGENT, VALID_TAG_HELP).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * - the Tr4cker, filtered task list and selected task in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Tr4cker expectedTr4cker \u003d new Tr4cker(actualModel.getTr4cker());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        List\u003cTask\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(expectedTr4cker, actualModel.getTr4cker());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the task at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * {@code model}\u0027s Tr4cker."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static void showTaskAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        final String[] splitName \u003d task.getName().taskName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        model.updateFilteredTaskList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(1, model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 47,
      "yingqi0607": 5,
      "hanweic53": 13,
      "cwenling": 17,
      "-": 68,
      "ethan-l-m-e": 25
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/commands/CountdownCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.getTypicalTr4cker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code CountdownCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": "public class CountdownCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private EventDate eventDate \u003d new EventDate(\"31-10-2021\", false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private EventName eventName \u003d new EventName(\"Halloween Party\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void execute_switchCountdownTab_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CountdownCommand countdownCommand \u003d new CountdownCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String expectedMessage \u003d CountdownCommand.MESSAGE_SWITCH_TAB_SUCCESS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertCommandSuccess(countdownCommand, model, expectedMessage, model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void execute_addCountdown_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CountdownCommand countdownCommand \u003d new CountdownCommand(eventName, eventDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Event eventToAdd \u003d new Event(eventName, eventDate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String expectedMessage \u003d String.format(CountdownCommand.MESSAGE_ADD_EVENT_SUCCESS, eventToAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        expectedModel.addEvent(eventToAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertCommandSuccess(countdownCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void execute_deleteCountdown_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Event eventToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CountdownCommand countdownCommand \u003d new CountdownCommand(index, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String expectedMessage \u003d String.format(CountdownCommand.MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        expectedModel.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertCommandSuccess(countdownCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CountdownCommand countdownCommand1 \u003d new CountdownCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CountdownCommand countdownCommand2 \u003d new CountdownCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CountdownCommand countdownCommand3 \u003d new CountdownCommand(eventName, eventDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CountdownCommand countdownCommand4 \u003d new CountdownCommand(eventName, eventDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CountdownCommand countdownCommand5 \u003d new CountdownCommand(index, true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CountdownCommand countdownCommand6 \u003d new CountdownCommand(index, true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        EventName eventName1 \u003d new EventName(\"Christmas Party\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        EventDate eventDate1 \u003d new EventDate(\"25-Dec-2021\", false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Index index1 \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CountdownCommand countdownCommand7 \u003d new CountdownCommand(eventName, eventDate1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CountdownCommand countdownCommand8 \u003d new CountdownCommand(eventName1, eventDate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CountdownCommand countdownCommand9 \u003d new CountdownCommand(eventName1, eventDate1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CountdownCommand countdownCommand10 \u003d new CountdownCommand(index1, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertEquals(countdownCommand1, countdownCommand1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertEquals(countdownCommand3, countdownCommand3);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertEquals(countdownCommand5, countdownCommand5);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // same values -\u003e return true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertEquals(countdownCommand1, countdownCommand2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertEquals(countdownCommand3, countdownCommand4);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertEquals(countdownCommand5, countdownCommand6);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // different values -\u003e return false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertNotEquals(countdownCommand3, countdownCommand7);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertNotEquals(countdownCommand3, countdownCommand8);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertNotEquals(countdownCommand3, countdownCommand9);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertNotEquals(countdownCommand5, countdownCommand10);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // different types -\u003e return false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertNotEquals(countdownCommand1, \"countdown\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertNotEquals(countdownCommand5, 5);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // null -\u003e return false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertNotEquals(countdownCommand1, null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertNotEquals(countdownCommand3, null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertNotEquals(countdownCommand5, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cwenling": 103
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.getTypicalTr4cker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredPendingTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPendingTaskList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredPendingTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        showNoTask(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getTr4cker().getTaskList().size() + 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no tasks."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private void showNoTask(Model model) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        model.updateFilteredTaskList(p -\u003e false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(model.getFilteredTaskList().isEmpty());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 39,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/commands/DoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.getTypicalTr4cker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.task.CompletionStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": " * {@code DoneCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void execute_percentageIncreasesUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task taskToComplete \u003d model.getFilteredPendingTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CompletionStatus percentage \u003d new CompletionStatus(75);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_TASK, percentage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Task newTask \u003d new Task(taskToComplete.getName(), taskToComplete.getDeadline(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                new CompletionStatus(75), taskToComplete.getTaskDescription(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                taskToComplete.getModuleCode(), taskToComplete.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.MESSAGE_DONE_TASK_SUCCESS_INCREASE, newTask);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedModel.setTask(model.getFilteredPendingTaskList().get(0), newTask);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void execute_percentageDecreasesUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task taskToComplete \u003d model.getFilteredPendingTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Task newTask \u003d new Task(taskToComplete.getName(), taskToComplete.getDeadline(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                new CompletionStatus(75), taskToComplete.getTaskDescription(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                taskToComplete.getModuleCode(), taskToComplete.getTags());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedModel.setTask(model.getFilteredPendingTaskList().get(0), newTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        model.setTask(model.getFilteredPendingTaskList().get(0), newTask);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CompletionStatus percentage \u003d new CompletionStatus(50);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_TASK, percentage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Task newTask2 \u003d new Task(newTask.getName(), newTask.getDeadline(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                new CompletionStatus(50), newTask.getTaskDescription(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                taskToComplete.getModuleCode(), newTask.getTags());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.MESSAGE_DONE_TASK_SUCCESS_DECREASE, newTask2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedModel.setTask(model.getFilteredPendingTaskList().get(0), newTask2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void execute_percentageConstantUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task taskToComplete \u003d model.getFilteredPendingTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Task newTask \u003d new Task(taskToComplete.getName(), taskToComplete.getDeadline(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                new CompletionStatus(75), taskToComplete.getTaskDescription(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                taskToComplete.getModuleCode(), taskToComplete.getTags());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedModel.setTask(model.getFilteredPendingTaskList().get(0), newTask);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        model.setTask(model.getFilteredPendingTaskList().get(0), newTask);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CompletionStatus percentage \u003d new CompletionStatus(75);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_TASK, percentage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.MESSAGE_COMPLETION_SAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertCommandFailure(doneCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    // Consider testing out of range (\u003e100 or \u003c0) and non mumber (xyz) but seems to throw IAE instead of CE"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task taskToComplete \u003d model.getFilteredPendingTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CompletionStatus percentage \u003d new CompletionStatus(75);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_TASK, percentage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Task newTask \u003d new Task(taskToComplete.getName(), taskToComplete.getDeadline(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                new CompletionStatus(75), taskToComplete.getTaskDescription(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                taskToComplete.getModuleCode(), taskToComplete.getTags());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.MESSAGE_DONE_TASK_SUCCESS_INCREASE, newTask);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedModel.setTask(model.getFilteredPendingTaskList().get(0), newTask);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getTr4cker().getTaskList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CompletionStatus percentage \u003d new CompletionStatus(75);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(outOfBoundIndex, percentage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CompletionStatus firstCompletionStatus \u003d new CompletionStatus(66);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CompletionStatus secondCompletionStatus \u003d new CompletionStatus(75);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        DoneCommand doneFirstCommand \u003d new DoneCommand(INDEX_FIRST_TASK, firstCompletionStatus);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        DoneCommand doneSecondCommand \u003d new DoneCommand(INDEX_SECOND_TASK, secondCompletionStatus);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertTrue(doneFirstCommand.equals(doneFirstCommand));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        DoneCommand doneFirstCommandCopy \u003d new DoneCommand(INDEX_FIRST_TASK, firstCompletionStatus);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertTrue(doneFirstCommand.equals(doneFirstCommandCopy));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertFalse(doneFirstCommand.equals(1));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertFalse(doneFirstCommand.equals(null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertFalse(doneFirstCommand.equals(doneSecondCommand));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 12,
      "cwenling": 121,
      "ethan-l-m-e": 5
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.DESC_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.DESC_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_DEADLINE_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_NAME_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.getTypicalTr4cker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Tr4cker;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task editedTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, descriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Tr4cker(model.getTr4cker()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedModel.setTask(model.getFilteredPendingTaskList().get(0), editedTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedCommandResult.setHomeTab();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Index indexLastTask \u003d Index.fromOneBased(model.getFilteredPendingTaskList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task lastTask \u003d model.getFilteredPendingTaskList().get(indexLastTask.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TaskBuilder taskInList \u003d new TaskBuilder(lastTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task editedTask \u003d taskInList.withName(VALID_NAME_2).withDeadline(VALID_DEADLINE_2).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_2)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                .withDeadline(VALID_DEADLINE_2).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastTask, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Tr4cker(model.getTr4cker()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedModel.setTask(lastTask, editedTask);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, new EditTaskDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task editedTask \u003d model.getFilteredPendingTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Tr4cker(model.getTr4cker()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task taskInFilteredList \u003d model.getFilteredPendingTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        Task editedTask \u003d new TaskBuilder(taskInFilteredList).withName(VALID_NAME_2).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                new EditTaskDescriptorBuilder().withName(VALID_NAME_2).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Tr4cker(model.getTr4cker()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedModel.setTask(model.getFilteredPendingTaskList().get(0), editedTask);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedCommandResult.setHomeTab();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void execute_duplicateTaskUnfilteredList_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task firstTask \u003d model.getFilteredPendingTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(firstTask).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_TASK, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void execute_duplicateTaskFilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // edit task in filtered list into a duplicate in Tr4cker"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task taskInList \u003d model.getTr4cker().getTaskList().get(INDEX_SECOND_TASK.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                new EditTaskDescriptorBuilder(taskInList).build());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void execute_invalidTaskIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPendingTaskList().size() + 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_2).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * but smaller than size of Tr4cker"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void execute_invalidTaskIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getTr4cker().getTaskList().size() + 1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                new EditTaskDescriptorBuilder().withName(VALID_NAME_2).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_TASK, DESC_1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        EditTaskDescriptor copyDescriptor \u003d new EditTaskDescriptor(DESC_1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_TASK, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_TASK, DESC_1)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_TASK, DESC_2)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 70,
      "hanweic53": 13,
      "-": 90
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/commands/EditTaskDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.DESC_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.DESC_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_DEADLINE_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_DESCRIPTION_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_NAME_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class EditTaskDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        EditTaskDescriptor descriptorWithSameValues \u003d new EditCommand.EditTaskDescriptor(DESC_1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(DESC_1.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(DESC_1.equals(DESC_1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(DESC_1.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(DESC_1.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(DESC_1.equals(DESC_2));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        EditCommand.EditTaskDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                new EditTaskDescriptorBuilder(DESC_1).withName(VALID_NAME_2).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(DESC_1.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_1).withDeadline(VALID_DEADLINE_2).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(DESC_1.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_1).withTaskDescription(VALID_DESCRIPTION_2).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(DESC_1.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 6,
      "yingqi0607": 2,
      "hanweic53": 15,
      "cwenling": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 7,
      "-": 13
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.TASK3;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.TASK5;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.TASK6;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.getTypicalTr4cker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void execute_zeroKeywords_noTaskFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedModel.updateFilteredPendingTaskList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPendingTaskList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void execute_multipleKeywords_multipleTasksFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Task3 Task5 Task6\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedModel.updateFilteredPendingTaskList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(Arrays.asList(TASK3, TASK5, TASK6), model.getFilteredPendingTaskList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 19,
      "hanweic53": 4,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 7,
      "-": 13
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.getTypicalTr4cker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        model \u003d new ModelManager(getTypicalTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        List\u003cTask\u003e expectedTasksToList \u003d expectedModel.getFilteredPendingTaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        String expectedDisplayListNames \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedTasksToList.size(); i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            expectedDisplayListNames +\u003d (i + 1) + \". \" + expectedTasksToList.get(i).getName().toString() + \"\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        String expectedMessage \u003d ListCommand.MESSAGE_SUCCESS + expectedDisplayListNames;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        model.updateFilteredPendingTaskList(x -\u003e true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        List\u003cTask\u003e expectedTasksToList \u003d expectedModel.getFilteredPendingTaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        String expectedDisplayListNames \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedTasksToList.size(); i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            expectedDisplayListNames +\u003d (i + 1) + \". \" + expectedTasksToList.get(i).getName().toString() + \"\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        String expectedMessage \u003d ListCommand.MESSAGE_SUCCESS + expectedDisplayListNames;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 8,
      "yingqi0607": 22,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/commands/ModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_MODULE_CODE_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_MODULE_NAME_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.getTypicalTr4cker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.ReadOnlyTr4cker;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.Event;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.daily.Todo;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.Module;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.ModuleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ModuleCommand}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "class ModuleCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private final Module testModule \u003d new Module(VALID_MODULE_NAME_1, new ModuleCode(VALID_MODULE_CODE_1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void execute_switchPlannerTab_success() throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        CommandResult commandResult \u003d new ModuleCommand().execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                CommandResult.createModuleTabSwitchCommandResult(ModuleCommand.MESSAGE_SWITCH_TAB_SUCCESS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertEquals(commandResult, expectedCommandResult);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void execute_invalidDeleteIndexList_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        ModuleCommand moduleCommand \u003d new ModuleCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertCommandFailure(moduleCommand, model, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void execute_unableToDeleteModule_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        ModelStubWithTaskModulePaired modelStub \u003d new ModelStubWithTaskModulePaired();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        ModuleCommand moduleCommand \u003d new ModuleCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                ModuleCommand.MESSAGE_STILL_HAS_TASKS, () -\u003e moduleCommand.execute(modelStub));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void execute_moduleAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        ModuleCommandTest.ModelStubAcceptingModule modelStub \u003d new ModuleCommandTest.ModelStubAcceptingModule();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        Module validModule \u003d testModule;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        CommandResult commandResult \u003d new ModuleCommand(validModule).execute(modelStub);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertEquals(String.format(ModuleCommand.MESSAGE_MODULE_ADD_SUCCESS, validModule),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertEquals(Arrays.asList(validModule), modelStub.modulesAdded);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void execute_moduleDeletedFromModel_deleteSuccessful() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        ModuleCommandTest.ModelStubAllowingDelete modelStub \u003d new ModuleCommandTest.ModelStubAllowingDelete();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        CommandResult commandResult \u003d new ModuleCommand(Index.fromOneBased(1)).execute(modelStub);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertEquals(String.format(ModuleCommand.MESSAGE_MODULE_DELETE_SUCCESS, testModule),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertEquals(new ArrayList\u003c\u003e(), modelStub.modulesAdded);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void execute_moduleAddedtoModel_addFailure() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        ModuleCommandTest.ModelStubRejectingModule modelStub \u003d new ModuleCommandTest.ModelStubRejectingModule();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        ModuleCommand moduleCommand \u003d new ModuleCommand(testModule);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                ModuleCommand.MESSAGE_DUPLICATE_MODULE, () -\u003e moduleCommand.execute(modelStub));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        ModuleCommand addCommand1 \u003d new ModuleCommand(testModule);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        ModuleCommand addCommand2 \u003d new ModuleCommand(testModule);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        ModuleCommand switchCommand \u003d new ModuleCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        ModuleCommand deleteCommand \u003d new ModuleCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertTrue(addCommand1.equals(addCommand1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // same command"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertTrue(addCommand1.equals(addCommand2));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // null -\u003e false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertFalse(addCommand1.equals(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // different -\u003e false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertFalse(addCommand1.equals(switchCommand));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertFalse(addCommand1.equals(deleteCommand));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertFalse(switchCommand.equals(deleteCommand));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public Path getTr4ckerFilePath() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public void setTr4ckerFilePath(Path tr4ckerFilePath) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public void setTr4cker(ReadOnlyTr4cker tr4cker) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public ReadOnlyTr4cker getTr4cker() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public boolean hasRelatedTasks(Module module) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public boolean hasValidModuleField(Task task) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        public boolean hasTodo(Todo todo) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        public void deleteTodo(Todo todo) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        public void addTodo(Todo todo) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredPendingTaskList() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredExpiredTaskList() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredCompletedTaskList() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public ObservableList\u003cTask\u003e getPlannerFilteredTaskList() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        public ObservableList\u003cTodo\u003e getFilteredTodoList() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        public void updateFilteredPendingTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public void updateFilteredExpiredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public void updateFilteredCompletedTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public void updatePlannerFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        public void updateFilteredTodoList(Predicate\u003cTodo\u003e predicate) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * A Model stub that has a single module and always reports module has related tasks."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    class ModelStubWithTaskModulePaired extends ModelStub {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public boolean hasRelatedTasks(Module module) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            ObservableList\u003cModule\u003e list \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            list.add(new Module(\"name\", new ModuleCode(\"code\")));"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * A Model stub that always accepts a module."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    class ModelStubAcceptingModule extends ModelStub {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        final ArrayList\u003cModule\u003e modulesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            modulesAdded.add(module);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * A Model stub that always allows deleting a module."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    class ModelStubAllowingDelete extends ModelStub {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        final ArrayList\u003cModule\u003e modulesAdded \u003d new ArrayList\u003c\u003e(Arrays.asList(testModule));"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public boolean hasRelatedTasks(Module module) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            modulesAdded.remove(target);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            return FXCollections.observableList(modulesAdded);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * A Model stub that always rejects adding a module."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    class ModelStubRejectingModule extends ModelStub {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        final ArrayList\u003cModule\u003e modulesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 10,
      "yingqi0607": 27,
      "cwenling": 26,
      "ethan-l-m-e": 333
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/commands/PlannerCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.getTypicalTr4cker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.TaskDueInPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code PlannerCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "class PlannerCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private String message \u003d \"18-Oct-2020\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final TaskDueInPredicate taskDueInPredicate \u003d new TaskDueInPredicate(LocalDate.of(2020, 10, 18));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void execute_switchPlannerTab_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        CommandResult commandResult \u003d new PlannerCommand().execute(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                new CommandResult(PlannerCommand.MESSAGE_SWITCH_TAB_SUCCESS, false, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(commandResult, expectedCommandResult);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void execute_gotoDay_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate localDate \u003d LocalDate.of(2020, 10, 18);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        PlannerCommand plannerCommand \u003d new PlannerCommand(message, localDate, null, taskDueInPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        CommandResult commandResult \u003d plannerCommand.execute(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                new CommandResult(\"Showed tasks on: 18-Oct-2020\", null, null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(commandResult, expectedCommandResult);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        message +\u003d \" (TODAY)\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        plannerCommand \u003d new PlannerCommand(message, localDate, null, taskDueInPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        commandResult \u003d plannerCommand.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedCommandResult \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                new CommandResult(\"Showed tasks on: 18-Oct-2020 (TODAY)\", null, null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(commandResult, expectedCommandResult);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        PlannerCommand plannerCommand1 \u003d new PlannerCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        PlannerCommand plannerCommand2 \u003d new PlannerCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate localDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        YearMonth yearMonth \u003d YearMonth.now();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        PlannerCommand plannerCommand3 \u003d new PlannerCommand(message, localDate, yearMonth, taskDueInPredicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        PlannerCommand plannerCommand4 \u003d new PlannerCommand(message, localDate, yearMonth, taskDueInPredicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerCommand1, plannerCommand1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerCommand3, plannerCommand3);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerCommand1, plannerCommand2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerCommand3, plannerCommand4);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotEquals(plannerCommand1, 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotEquals(plannerCommand3, \"hello\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotEquals(plannerCommand1, null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotEquals(plannerCommand3, null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 77
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/commands/TagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.getTypicalTr4cker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code TagCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "class TagCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Tag tag1 \u003d new Tag(\"homework\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Tag tag2 \u003d new Tag(\"assignment\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Set\u003cTag\u003e add \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Set\u003cTag\u003e delete \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Set\u003cTag\u003e duplicateTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Set\u003cTag\u003e nonExistingTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task taskToEdit \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand(INDEX_FIRST_TASK, add, delete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String expectedMessage \u003d String.format(TagCommand.MESSAGE_SUCCESS, taskToEdit);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        taskToEdit.addTags(add);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        taskToEdit.deleteTags(delete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand(outOfBoundIndex, add, delete);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertCommandFailure(tagCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task taskToEdit \u003d model.getFilteredPendingTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand(INDEX_FIRST_TASK, add, delete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String expectedMessage \u003d String.format(TagCommand.MESSAGE_SUCCESS, taskToEdit);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        taskToEdit.addTags(add);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        taskToEdit.deleteTags(delete);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getTr4cker().getTaskList().size() + 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand(outOfBoundIndex, add, delete);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertCommandFailure(tagCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void execute_duplicateTags_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        add.add(tag1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        duplicateTags.add(tag1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task taskToEdit \u003d model.getFilteredPendingTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand(INDEX_FIRST_TASK, add, delete);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task newTask \u003d new Task(taskToEdit.getName(), taskToEdit.getDeadline(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                taskToEdit.getCompletionStatus(), taskToEdit.getTaskDescription(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                taskToEdit.getModuleCode(), add);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String expectedMessage \u003d String.format(TagCommand.MESSAGE_SUCCESS, newTask);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedMessage +\u003d String.format(TagCommand.MESSAGE_SUCCESS_DUPLICATE_TAGS, duplicateTags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedModel.setTask(model.getFilteredPendingTaskList().get(0), newTask);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void execute_nonExistingTags_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        delete.add(tag2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        nonExistingTags.add(tag2);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task taskToEdit \u003d model.getFilteredPendingTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand(INDEX_FIRST_TASK, add, delete);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task newTask \u003d new Task(taskToEdit.getName(), taskToEdit.getDeadline(),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                taskToEdit.getCompletionStatus(), taskToEdit.getTaskDescription(),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                taskToEdit.getModuleCode(), taskToEdit.getTags());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        newTask.deleteTags(delete);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String expectedMessage \u003d String.format(TagCommand.MESSAGE_SUCCESS, newTask);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedMessage +\u003d String.format(TagCommand.MESSAGE_SUCCESS_NON_EXISTING_TAGS, nonExistingTags);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedModel.setTask(model.getFilteredPendingTaskList().get(0), newTask);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void execute_duplicateAndNonExistingTags_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        add.add(tag1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        duplicateTags.add(tag1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        delete.add(tag2);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        nonExistingTags.add(tag2);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task taskToEdit \u003d model.getFilteredPendingTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand(INDEX_FIRST_TASK, add, delete);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task newTask \u003d new Task(taskToEdit.getName(), taskToEdit.getDeadline(),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                taskToEdit.getCompletionStatus(), taskToEdit.getTaskDescription(),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                taskToEdit.getModuleCode(), taskToEdit.getTags());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String expectedMessage \u003d String.format(TagCommand.MESSAGE_SUCCESS, newTask);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedMessage +\u003d String.format(TagCommand.MESSAGE_SUCCESS_DUPLICATE_TAGS, duplicateTags);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedMessage +\u003d String.format(TagCommand.MESSAGE_SUCCESS_NON_EXISTING_TAGS, nonExistingTags);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTr4cker(), new UserPrefs());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedModel.setTask(model.getFilteredPendingTaskList().get(0), newTask);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Index index \u003d Index.fromZeroBased(1);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        add.add(tag1);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        delete.add(tag2);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TagCommand tagCommand1 \u003d new TagCommand(index, add, delete);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TagCommand tagCommand2 \u003d new TagCommand(index, add, delete);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TagCommand tagCommand3 \u003d new TagCommand(index, delete, add);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(tagCommand1, tagCommand1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(tagCommand2, tagCommand1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotEquals(tagCommand1, 1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotEquals(tagCommand1, null);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // different sets -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotEquals(tagCommand3, tagCommand1);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 181
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.DEADLINE_DESC_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.DEADLINE_DESC_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.DESCRIPTION_DESC_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.DESCRIPTION_DESC_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.NAME_DESC_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.NAME_DESC_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.TAG_DESC_HELP;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.TAG_DESC_URGENT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_DEADLINE_2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_DESCRIPTION_2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_NAME_2;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_TAG_HELP;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_TAG_URGENT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.MANUAL_TASK1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.MANUAL_TASK2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.MANUAL_TASK_DEFAULT_DEADLINE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.task.Deadline;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.task.TaskDescription;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(MANUAL_TASK2).withTags(VALID_TAG_HELP).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_2 + DEADLINE_DESC_2"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + DESCRIPTION_DESC_2 + TAG_DESC_HELP, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_1 + NAME_DESC_2 + DEADLINE_DESC_2"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + DESCRIPTION_DESC_2 + TAG_DESC_HELP, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // multiple deadlines - last deadline accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_2 + DEADLINE_DESC_1 + DEADLINE_DESC_2"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + DESCRIPTION_DESC_2 + TAG_DESC_HELP, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_2 + DEADLINE_DESC_2 + DESCRIPTION_DESC_1"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + DESCRIPTION_DESC_2 + TAG_DESC_HELP, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task expectedTaskMultipleTags \u003d new TaskBuilder(MANUAL_TASK2).withTags(VALID_TAG_HELP, VALID_TAG_URGENT)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_2 + DEADLINE_DESC_2 + DESCRIPTION_DESC_2"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + TAG_DESC_URGENT + TAG_DESC_HELP, new AddCommand(expectedTaskMultipleTags));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(MANUAL_TASK1).withTags().build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_1 + DEADLINE_DESC_1 + DESCRIPTION_DESC_1,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        // no deadline"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        expectedTask \u003d new TaskBuilder(MANUAL_TASK_DEFAULT_DEADLINE).withTags().build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_1 + DESCRIPTION_DESC_1,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_2 + DEADLINE_DESC_2 + DESCRIPTION_DESC_2,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_2 + DEADLINE_DESC_2 + VALID_DESCRIPTION_2,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_2 + VALID_DEADLINE_2 + VALID_DESCRIPTION_2,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + DEADLINE_DESC_2 + DESCRIPTION_DESC_2"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + TAG_DESC_URGENT + TAG_DESC_HELP, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // invalid deadline"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_2 + INVALID_DEADLINE_DESC + DESCRIPTION_DESC_2"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + TAG_DESC_URGENT + TAG_DESC_HELP, Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_2 + DEADLINE_DESC_2 + INVALID_DESCRIPTION_DESC"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + TAG_DESC_URGENT + TAG_DESC_HELP, TaskDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_2 + DEADLINE_DESC_2 + DESCRIPTION_DESC_2"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_HELP, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + DEADLINE_DESC_2 + INVALID_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_2 + DEADLINE_DESC_2"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + DESCRIPTION_DESC_2 + TAG_DESC_URGENT + TAG_DESC_HELP,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 35,
      "yingqi0607": 19,
      "hanweic53": 15,
      "cwenling": 4,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final Prefix dSlash \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, dSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertArgumentAbsent(argMultimap, dSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String argsString \u003d \"  Some preamble string d/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, dSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertArgumentPresent(argMultimap, dSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        argsString \u003d \" d/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, dSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertArgumentPresent(argMultimap, dSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value d/dSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, dSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertArgumentPresent(argMultimap, dSlash, \"dSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value d/dSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, dSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertArgumentPresent(argMultimap, dSlash, \"dSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, dSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertArgumentAbsent(argMultimap, dSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, dSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value d/ dSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, dSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertArgumentPresent(argMultimap, dSlash, \"dSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String argsString \u003d \"SomePreambleStringd/ dSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, dSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringd/ dSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertArgumentAbsent(argMultimap, dSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "cwenling": 25,
      "-": 124
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/parser/CountdownCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.logic.commands.CountdownCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": "class CountdownCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private static final String MESSAGE_INVALID_SWITCH_TAB_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            CountdownCommand.MESSAGE_SWITCH_TAB_USAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private static final String MESSAGE_INVALID_ADD_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            CountdownCommand.MESSAGE_ADD_COUNTDOWN_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            CountdownCommand.MESSAGE_DELETE_COUNTDOWN_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final CountdownCommandParser countdownCommandParser \u003d new CountdownCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final CountdownCommand countdownCommand \u003d new CountdownCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void parse_switchCountdownTab_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertParseSuccess(countdownCommandParser, \"\", countdownCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void parse_switchCountdownTab_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertParseFailure(countdownCommandParser, \"countdownsss\", MESSAGE_INVALID_SWITCH_TAB_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertParseFailure(countdownCommandParser, \"countdown hehexd\", MESSAGE_INVALID_SWITCH_TAB_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void parse_addCountdown_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        EventName eventName \u003d new EventName(\"Halloween Party\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        EventDate eventDate \u003d new EventDate(\"31-10-2021\", false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CountdownCommand expected \u003d new CountdownCommand(eventName, eventDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertParseSuccess(countdownCommandParser, \" n/Halloween Party d/31-10-2021\", expected);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertParseSuccess(countdownCommandParser, \" n/Halloween Party d/31-Oct-2021\", expected);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void parse_addCountdown_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertParseFailure(countdownCommandParser, \" n/Halloween Party d/31-10-2020\", MESSAGE_INVALID_ADD_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertParseFailure(countdownCommandParser, \" n/Halloween Party d/31-Oct-2020\", MESSAGE_INVALID_ADD_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertParseFailure(countdownCommandParser, \" n/Hall\u0027ween Party d/31-Oct-2020\", MESSAGE_INVALID_ADD_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertParseFailure(countdownCommandParser, \" n/Halloween Party d/31-Oct\", MESSAGE_INVALID_ADD_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertParseFailure(countdownCommandParser, \" n/Halloween Party d/The Day\", MESSAGE_INVALID_ADD_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertParseFailure(countdownCommandParser, \" d/31-Oct-2021\", MESSAGE_INVALID_ADD_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertParseFailure(countdownCommandParser, \" n/Halloween Party\", MESSAGE_INVALID_ADD_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void parse_deleteCountdown_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CountdownCommand expected \u003d new CountdownCommand(index, true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertParseSuccess(countdownCommandParser, \" del/1\", expected);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void parse_deleteCountdown_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertParseFailure(countdownCommandParser, \" del/0\", MESSAGE_INVALID_DELETE_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertParseFailure(countdownCommandParser, \" del/-1\", MESSAGE_INVALID_DELETE_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertParseFailure(countdownCommandParser, \" del/haha\", MESSAGE_INVALID_DELETE_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cwenling": 72
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 10,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/parser/DoneCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.task.CompletionStatus;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": "public class DoneCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String VALID_COMPLETION_STATUS_ZERO \u003d \"0\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String VALID_COMPLETION_STATUS_HALF \u003d \"50\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String VALID_COMPLETION_STATUS_DONE \u003d \"100\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String INVALID_COMPLETION_STATUS_1 \u003d \"1000\"; //  More than 100"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String INVALID_COMPLETION_STATUS_2 \u003d \"-10\"; // Less than 0"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String NOT_A_COMPLETION_STATUS \u003d \"HelloWorld\"; // NaN"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static final String VALID_DONE_NO_COMPLETION_STATUS_DESC \u003d \"1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static final CompletionStatus COMPLETION_STATUS_1 \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            new CompletionStatus(Integer.parseInt(VALID_COMPLETION_STATUS_ZERO));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final CompletionStatus COMPLETION_STATUS_2 \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            new CompletionStatus(Integer.parseInt(VALID_COMPLETION_STATUS_HALF));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static final CompletionStatus COMPLETION_STATUS_3 \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            new CompletionStatus(Integer.parseInt(VALID_COMPLETION_STATUS_DONE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static final String VALID_DONE_DESC_1 \u003d VALID_DONE_NO_COMPLETION_STATUS_DESC"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + \" \" + PREFIX_COMPLETION_STATUS + VALID_COMPLETION_STATUS_ZERO;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static final String VALID_DONE_DESC_2 \u003d VALID_DONE_NO_COMPLETION_STATUS_DESC"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + \" \" + PREFIX_COMPLETION_STATUS + VALID_COMPLETION_STATUS_HALF;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static final String VALID_DONE_DESC_3 \u003d VALID_DONE_NO_COMPLETION_STATUS_DESC"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            + \" \" + PREFIX_COMPLETION_STATUS + VALID_COMPLETION_STATUS_DONE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static final String INVALID_DONE_DESC_1 \u003d VALID_DONE_NO_COMPLETION_STATUS_DESC"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + \" \" + PREFIX_COMPLETION_STATUS + INVALID_COMPLETION_STATUS_1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static final String INVALID_DONE_DESC_2 \u003d VALID_DONE_NO_COMPLETION_STATUS_DESC"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + \" \" + PREFIX_COMPLETION_STATUS + INVALID_COMPLETION_STATUS_2;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static final String INVALID_DONE_DESC_3 \u003d VALID_DONE_NO_COMPLETION_STATUS_DESC"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            + \" \" + PREFIX_COMPLETION_STATUS + NOT_A_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final DoneCommandParser parser \u003d new DoneCommandParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void parse_validArgs_returnsDoneCommand() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertParseSuccess(parser, VALID_DONE_NO_COMPLETION_STATUS_DESC,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                new DoneCommand(INDEX_FIRST_TASK, COMPLETION_STATUS_3));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertParseSuccess(parser, VALID_DONE_DESC_1,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                new DoneCommand(INDEX_FIRST_TASK, COMPLETION_STATUS_1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertParseSuccess(parser, VALID_DONE_DESC_2,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                new DoneCommand(INDEX_FIRST_TASK, COMPLETION_STATUS_2));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertParseSuccess(parser, VALID_DONE_DESC_3,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                new DoneCommand(INDEX_FIRST_TASK, COMPLETION_STATUS_3));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertParseFailure(parser, INVALID_DONE_DESC_1, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                DoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertParseFailure(parser, INVALID_DONE_DESC_2, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                DoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertParseFailure(parser, INVALID_DONE_DESC_3, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                DoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanweic53": 28,
      "cwenling": 41
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.DEADLINE_DESC_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.DEADLINE_DESC_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.DESCRIPTION_DESC_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.DESCRIPTION_DESC_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.NAME_DESC_1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_DEADLINE_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_DEADLINE_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_DESCRIPTION_1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_DESCRIPTION_2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_NAME_1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.commons.core.Messages;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.task.Deadline;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.task.TaskDescription;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertParseFailure(parser, \"-1\" + NAME_DESC_1, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_1, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DEADLINE_DESC, Deadline.MESSAGE_CONSTRAINTS); // invalid deadline"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                TaskDescription.MESSAGE_CONSTRAINTS); // invalid tr4cker"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        // invalid deadline followed by valid description"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DEADLINE_DESC + DESCRIPTION_DESC_1, Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // valid deadline followed by invalid deadline. The test case for invalid deadline followed by valid deadline"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertParseFailure(parser, \"1\" + DEADLINE_DESC_2 + INVALID_DEADLINE_DESC, Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                + VALID_DESCRIPTION_1 + VALID_DEADLINE_1, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DEADLINE_DESC_2"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + DESCRIPTION_DESC_1 + NAME_DESC_1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_1)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                .withDeadline(VALID_DEADLINE_2).withTaskDescription(VALID_DESCRIPTION_1).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DEADLINE_DESC_2 + DESCRIPTION_DESC_1;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withDeadline(VALID_DEADLINE_2)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                .withTaskDescription(VALID_DESCRIPTION_1).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_1).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // deadline"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DEADLINE_DESC_1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withDeadline(VALID_DEADLINE_1).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_1;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withTaskDescription(VALID_DESCRIPTION_1).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DEADLINE_DESC_1 + DESCRIPTION_DESC_1"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + DEADLINE_DESC_1 + DESCRIPTION_DESC_1"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + DEADLINE_DESC_2 + DESCRIPTION_DESC_2;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withDeadline(VALID_DEADLINE_2)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                .withTaskDescription(VALID_DESCRIPTION_2).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_DEADLINE_DESC + DEADLINE_DESC_2;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withDeadline(VALID_DEADLINE_2).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_DEADLINE_DESC + DESCRIPTION_DESC_2"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                + DEADLINE_DESC_2;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withDeadline(VALID_DEADLINE_2)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                .withTaskDescription(VALID_DESCRIPTION_2).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 26,
      "yingqi0607": 19,
      "hanweic53": 22,
      "cwenling": 5,
      "-": 93,
      "ethan-l-m-e": 1
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 7,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/parser/ModuleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.INVALID_MODULE_CODE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.INVALID_MODULE_NAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.MODULE_CODE_DESC_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.MODULE_DELETE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.MODULE_NAME_DESC_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_MODULE_CODE_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_MODULE_NAME_1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.logic.commands.ModuleCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "class ModuleCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private static final String MESSAGE_INVALID_SWITCH_TAB_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            ModuleCommand.MESSAGE_SWITCH_TAB_USAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private static final String MESSAGE_INVALID_MODULE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private final ModuleCommandParser moduleCommandParser \u003d new ModuleCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private final ModuleCommand moduleCommand \u003d new ModuleCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    void parse_switchModuleTab_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertParseSuccess(moduleCommandParser, \"\", moduleCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    void parse_switchModuleTab_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertParseFailure(moduleCommandParser, \"aaa\", MESSAGE_INVALID_SWITCH_TAB_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertParseFailure(moduleCommandParser, \"aaa bbb\", MESSAGE_INVALID_SWITCH_TAB_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    void parse_addModuleFieldsMissing_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        String userInput1 \u003d MODULE_NAME_DESC_1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        String userInput2 \u003d MODULE_CODE_DESC_1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        String userInput3 \u003d MODULE_NAME_DESC_1 + INVALID_MODULE_CODE_DESC;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        String userInput4 \u003d INVALID_MODULE_NAME_DESC + MODULE_CODE_DESC_1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // name given but no code"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertParseFailure(moduleCommandParser, userInput1, MESSAGE_INVALID_MODULE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // code given but no name"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertParseFailure(moduleCommandParser, userInput2, MESSAGE_INVALID_MODULE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // invalid code field"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertParseFailure(moduleCommandParser, userInput3, ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // invalid name field"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertParseFailure(moduleCommandParser, userInput4, Module.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    void parse_tooManyFields_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // preamble + add module"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertParseFailure(moduleCommandParser,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \"preamble\" + MODULE_NAME_DESC_1 + MODULE_CODE_DESC_1,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                MESSAGE_INVALID_MODULE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // preamble + delete"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertParseFailure(moduleCommandParser,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                \"preamble\" + MODULE_DELETE_DESC,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                MESSAGE_INVALID_MODULE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // name, code and delete at the same time"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertParseFailure(moduleCommandParser, MODULE_NAME_DESC_1 + MODULE_CODE_DESC_1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                + MODULE_DELETE_DESC, MESSAGE_INVALID_MODULE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    void parse_allFieldsPresent_success() { //  n/NAME m/CODE"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        String moduleName \u003d VALID_MODULE_NAME_1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        Module module \u003d new Module(moduleName, moduleCode);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertParseSuccess(moduleCommandParser,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                MODULE_NAME_DESC_1 + MODULE_CODE_DESC_1,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "               new ModuleCommand(module));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    void parse_deleteModule_success() { // del/INDEX"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertParseSuccess(moduleCommandParser, MODULE_DELETE_DESC, new ModuleCommand(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ethan-l-m-e": 92
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static java.time.DayOfWeek.FRIDAY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static java.time.temporal.TemporalAdjusters.next;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.task.Deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.task.TaskDescription;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.model.util.NaturalDateUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static final String INVALID_DEADLINE \u003d \"90-90-2021 9999\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static final String INVALID_NATURAL_DEADLINE_1 \u003d \"Tuesdday\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static final String INVALID_NATURAL_DEADLINE_2 \u003d \"Tuesday 2500\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static final String EXPIRED_DEADLINE \u003d \"01-01-2020 2359\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static final String VALID_DEADLINE_MM \u003d \"25-12-2021 2359\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static final String VALID_DEADLINE_MMM \u003d \"25-Dec-2021 2359\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static final String VALID_DEADLINE_NO_TIME_MM \u003d \"25-12-2021\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static final String VALID_DEADLINE_NO_TIME_MMM \u003d \"25-Dec-2021\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"description\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void parseCompletionStatus_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCompletionStatus((String) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void parseCompletionStatus_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                .parseCompletionStatus(DoneCommandParserTest.INVALID_COMPLETION_STATUS_1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                .parseCompletionStatus(DoneCommandParserTest.INVALID_COMPLETION_STATUS_2));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                .parseCompletionStatus(DoneCommandParserTest.NOT_A_COMPLETION_STATUS));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void parseCompletionStatus_validValueWithoutWhitespace_returnsCompletionStatus() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertEquals(DoneCommandParserTest.COMPLETION_STATUS_2,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                ParserUtil.parseCompletionStatus(DoneCommandParserTest.VALID_COMPLETION_STATUS_HALF));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void parseCompletionStatus_validValueWithWhitespace_returnsTrimmedCompletionStatus() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        String completionStatusWithWhitespace \u003d WHITESPACE"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                + DoneCommandParserTest.VALID_COMPLETION_STATUS_HALF + WHITESPACE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertEquals(DoneCommandParserTest.COMPLETION_STATUS_2,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                ParserUtil.parseCompletionStatus(completionStatusWithWhitespace));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public void parseDeadline_expiredDeadline_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Deadline(EXPIRED_DEADLINE, true));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public void parseDeadline_expiredDeadline_returnsDeadline() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        boolean isCreated \u003d true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            Deadline expectedDeadline \u003d new Deadline(EXPIRED_DEADLINE, false);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            isCreated \u003d false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(isCreated);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void parseDeadline_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDeadline((String) null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void parseDeadline_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDeadline(INVALID_DEADLINE));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDeadline(EXPIRED_DEADLINE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDeadline(INVALID_NATURAL_DEADLINE_1));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDeadline(INVALID_NATURAL_DEADLINE_2));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void parseDeadline_validValueWithoutWhitespace_returnsDeadline() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        Deadline expectedDeadline \u003d new Deadline(VALID_DEADLINE_MM, false);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertEquals(expectedDeadline, ParserUtil.parseDeadline(VALID_DEADLINE_MM));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertEquals(expectedDeadline, ParserUtil.parseDeadline(VALID_DEADLINE_MMM));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertEquals(expectedDeadline, ParserUtil.parseDeadline(VALID_DEADLINE_NO_TIME_MM));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertEquals(expectedDeadline, ParserUtil.parseDeadline(VALID_DEADLINE_NO_TIME_MMM));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        String expectedDate \u003d LocalDate.now().with(next(FRIDAY))"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                .format(NaturalDateUtil.DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        expectedDeadline \u003d new Deadline(expectedDate + \" 2200\", false);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertEquals(expectedDeadline, ParserUtil.parseDeadline(\"friday 2200\"));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        expectedDeadline \u003d new Deadline(expectedDate + \" 2359\", false);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertEquals(expectedDeadline, ParserUtil.parseDeadline(\"friday\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        expectedDeadline \u003d new Deadline(LocalDate.now().format(NaturalDateUtil.DATE_TIME_FORMATTER)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                + \" 2359\", false);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertEquals(expectedDeadline, ParserUtil.parseDeadline(\"today\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void parseDeadline_validValueWithWhitespace_returnsTrimmedDeadline() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        String deadlineWithWhitespace \u003d WHITESPACE + VALID_DEADLINE_MM + WHITESPACE;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        Deadline expectedDeadline \u003d new Deadline(VALID_DEADLINE_MM, false);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertEquals(expectedDeadline, ParserUtil.parseDeadline(deadlineWithWhitespace));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescriptions() throws Exception {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        TaskDescription expectedTaskDescription \u003d new TaskDescription(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertEquals(expectedTaskDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescriptions() throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        TaskDescription expectedTaskDescription \u003d new TaskDescription(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertEquals(expectedTaskDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 9,
      "yingqi0607": 14,
      "hanweic53": 63,
      "cwenling": 25,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/parser/PlannerCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.PlannerCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.TaskDueInPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.util.GotoDateUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "class PlannerCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static final String MESSAGE_INVALID_SWITCH_TAB_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            PlannerCommand.MESSAGE_SWITCH_TAB_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static final String MESSAGE_INVALID_GOTO_FORMAT \u003d PlannerCommand.MESSAGE_GOTO_USAGE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final PlannerCommandParser plannerCommandParser \u003d new PlannerCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final PlannerCommand plannerCommand \u003d new PlannerCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void parse_switchPlannerTab_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseSuccess(plannerCommandParser, \"\", plannerCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void parse_switchPlannerTab_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseFailure(plannerCommandParser, \"plannerrr\", MESSAGE_INVALID_SWITCH_TAB_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseFailure(plannerCommandParser, \"plannerrr haha\", MESSAGE_INVALID_SWITCH_TAB_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void parse_gotoDay_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String message1 \u003d GotoDateUtil.parseGotoDay(LocalDate.now()) + \" (TODAY)\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        PlannerCommand plannerCommand \u003d new PlannerCommand(message1, LocalDate.now(), null, new TaskDueInPredicate());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseSuccess(plannerCommandParser, \" goto/today\", plannerCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseSuccess(plannerCommandParser, \" goto/tdy\", plannerCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate tomorrow \u003d LocalDate.now().plusDays(1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String message2 \u003d GotoDateUtil.parseGotoDay(tomorrow) + \" (TOMORROW)\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        plannerCommand \u003d new PlannerCommand(message2, tomorrow, null, new TaskDueInPredicate(tomorrow));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseSuccess(plannerCommandParser, \" goto/tomorrow\", plannerCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseSuccess(plannerCommandParser, \" goto/tmr\", plannerCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate localDate1 \u003d LocalDate.of(2020, 10, 18);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String message3 \u003d GotoDateUtil.parseGotoDay(localDate1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        plannerCommand \u003d new PlannerCommand(message3, localDate1, null, new TaskDueInPredicate(localDate1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseSuccess(plannerCommandParser, \" goto/18-Oct-2020\", plannerCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseSuccess(plannerCommandParser, \" goto/18-10-2020\", plannerCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        YearMonth yearMonth1 \u003d YearMonth.of(2020, 10);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String message4 \u003d GotoDateUtil.parseGotoMonth(yearMonth1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        plannerCommand \u003d new PlannerCommand(message4, null, yearMonth1, new TaskDueInPredicate(yearMonth1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseSuccess(plannerCommandParser, \" goto/Oct-2020\", plannerCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseSuccess(plannerCommandParser, \" goto/10-2020\", plannerCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void parse_gotoDay_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseFailure(plannerCommandParser, \" goto/AAA-2020\", MESSAGE_INVALID_GOTO_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseFailure(plannerCommandParser, \" goto/blah\", MESSAGE_INVALID_GOTO_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseFailure(plannerCommandParser, \" goto/20-20-2020\", MESSAGE_INVALID_GOTO_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 68
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/parser/TagCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.INVALID_DELETE_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.INVALID_NEW_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.INVALID_NO_DELETE_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.INVALID_NO_NEW_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.NAME_DESC_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.TAG_DELETE_ASSIGNMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.TAG_DELETE_MISSION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.TAG_NEW_HOMEWORK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.TAG_NEW_WORK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_NAME_1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "class TagCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final TagCommandParser parser \u003d new TagCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Tag tag1 \u003d new Tag(\"homework\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Tag tag2 \u003d new Tag(\"assignment\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Tag tag3 \u003d new Tag(\"work\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Tag tag4 \u003d new Tag(\"mission\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Set\u003cTag\u003e add \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Set\u003cTag\u003e delete \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Set\u003cTag\u003e emptySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void parse_invalidValue_failure() { // invalid tags"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NEW_TAG, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DELETE_TAG, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void parse_allFieldsPresent_success() { // tag 1 new/tag1 del/tag2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_NEW_HOMEWORK + TAG_DELETE_ASSIGNMENT;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        add.add(tag1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        delete.add(tag2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand(targetIndex, add, delete);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseSuccess(parser, userInput, tagCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void parse_optionalFieldsMissing_success() { // tag 1 new/tag1 || tag 1 del/tag2"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String userInput1 \u003d targetIndex.getOneBased() + TAG_DELETE_ASSIGNMENT;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String userInput2 \u003d targetIndex.getOneBased() + TAG_NEW_HOMEWORK;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        add.add(tag1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        delete.add(tag2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // no new/"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TagCommand tagCommand1 \u003d new TagCommand(targetIndex, emptySet, delete);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseSuccess(parser, userInput1, tagCommand1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // no del/"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TagCommand tagCommand2 \u003d new TagCommand(targetIndex, add, emptySet);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseSuccess(parser, userInput2, tagCommand2);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void parse_valuesMissing_failure() { // tag 1 new/ || tag 1 del/"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String userInput1 \u003d targetIndex.getOneBased() + TAG_DELETE_ASSIGNMENT + INVALID_NO_NEW_TAG;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String userInput2 \u003d targetIndex.getOneBased() + TAG_NEW_HOMEWORK + INVALID_NO_DELETE_TAG;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String userInput3 \u003d targetIndex.getOneBased() + INVALID_NO_NEW_TAG + INVALID_NO_DELETE_TAG;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String expectedMessage \u003d Tag.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // missing new prefix"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseFailure(parser, userInput1, expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // missing del prefix"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseFailure(parser, userInput2, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseFailure(parser, userInput3, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void parse_multipleValues_success() { // tag 1 new/tag1 del/tag2 new/tag3"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String userInput1 \u003d targetIndex.getOneBased() + TAG_DELETE_ASSIGNMENT"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + TAG_NEW_HOMEWORK + TAG_NEW_WORK;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String userInput2 \u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                targetIndex.getOneBased() + TAG_DELETE_ASSIGNMENT + TAG_NEW_WORK"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                        + TAG_DELETE_MISSION + TAG_NEW_HOMEWORK;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String userInput3 \u003d targetIndex.getOneBased() + TAG_NEW_HOMEWORK"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + TAG_DELETE_ASSIGNMENT + TAG_DELETE_MISSION;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        add.add(tag1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        add.add(tag3);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        delete.add(tag2);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseSuccess(parser, userInput1, new TagCommand(targetIndex, add, delete));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        delete.add(tag4);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseSuccess(parser, userInput2, new TagCommand(targetIndex, add, delete));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        add.remove(tag3);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseSuccess(parser, userInput3, new TagCommand(targetIndex, add, delete));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void parse_invalidIndex_throwsParseException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertParseFailure(parser, \"-1 new/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 152
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/logic/parser/Tr4ckerParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.TAG_DELETE_ASSIGNMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.TAG_NEW_HOMEWORK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.logic.commands.CountdownCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.PlannerCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.task.CompletionStatus;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.testutil.TaskUtil;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class Tr4ckerParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Tr4ckerParser parser \u003d new Tr4ckerParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(TaskUtil.getAddCommand(task));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(new AddCommand(task), command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_TASK), command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(task).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + INDEX_FIRST_TASK.getOneBased() + \" \" + TaskUtil.getEditTaskDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(INDEX_FIRST_TASK, descriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void parseCommand_done() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CompletionStatus completionStatus \u003d new CompletionStatus(50);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        DoneCommand command \u003d (DoneCommand) parser.parseCommand(DoneCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                + INDEX_FIRST_TASK.getOneBased() + \" \" + \"p/50\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        DoneCommand expectedCommand \u003d new DoneCommand(INDEX_FIRST_TASK, completionStatus);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void parseCommand_tag() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Tag tag1 \u003d new Tag(\"homework\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Tag tag2 \u003d new Tag(\"assignment\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Set\u003cTag\u003e add \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Set\u003cTag\u003e delete \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        add.add(tag1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        delete.add(tag2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TagCommand command \u003d (TagCommand) parser.parseCommand("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                TagCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                        + TAG_NEW_HOMEWORK + TAG_DELETE_ASSIGNMENT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(new TagCommand(INDEX_FIRST_TASK, add, delete), command);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void parseCommand_planner() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(parser.parseCommand(PlannerCommand.COMMAND_WORD) instanceof PlannerCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(parser.parseCommand(PlannerCommand.COMMAND_WORD + \" goto/today\") instanceof PlannerCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(parser.parseCommand(PlannerCommand.COMMAND_WORD + \" goto/tdy\") instanceof PlannerCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(parser.parseCommand(PlannerCommand.COMMAND_WORD + \" goto/tomorrow\") instanceof PlannerCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(parser.parseCommand(PlannerCommand.COMMAND_WORD + \" goto/tmr\") instanceof PlannerCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(parser.parseCommand(PlannerCommand.COMMAND_WORD + \" goto/Oct-2020\") instanceof PlannerCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(parser.parseCommand(PlannerCommand.COMMAND_WORD + \" goto/10-Oct-2020\") instanceof PlannerCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(parser.parseCommand(PlannerCommand.COMMAND_WORD + \" goto/10-2020\") instanceof PlannerCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(parser.parseCommand(PlannerCommand.COMMAND_WORD + \" goto/10-10-2020\") instanceof PlannerCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void parseCommand_countdown() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertTrue(parser.parseCommand(CountdownCommand.COMMAND_WORD) instanceof CountdownCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertTrue(parser.parseCommand(CountdownCommand.COMMAND_WORD + \" n/Halloween Party\" + \" d/31-Oct-2021\")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                instanceof CountdownCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(ParseException.class, ()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            -\u003e parser.parseCommand(CountdownCommand.COMMAND_WORD + \" n/Halloween Party\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(ParseException.class, ()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            -\u003e parser.parseCommand(CountdownCommand.COMMAND_WORD + \" d/31-Oct-2021\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(ParseException.class, ()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            -\u003e parser.parseCommand(CountdownCommand.COMMAND_WORD + \" d/31-Oct-2021\" + \" del/5\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(ParseException.class, ()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            -\u003e parser.parseCommand(CountdownCommand.COMMAND_WORD + \" n/Halloween Party\" + \" del/5\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertTrue(parser.parseCommand(CountdownCommand.COMMAND_WORD + \" del/1\") instanceof CountdownCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(ParseException.class, ()"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            -\u003e parser.parseCommand(CountdownCommand.COMMAND_WORD + \" del/-1\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 68,
      "cwenling": 30,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.model.Model.PREDICATE_SHOW_COMPLETED_TASKS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.model.Model.PREDICATE_SHOW_EXPIRED_TASKS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.model.Model.PREDICATE_SHOW_PENDING_TASKS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.EVENT1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.EVENT2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.TASK1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.TASK2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.testutil.Tr4ckerBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(new Tr4cker(), new Tr4cker(modelManager.getTr4cker()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        userPrefs.setTr4ckerFilePath(Paths.get(\"tr4cker/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        userPrefs.setTr4ckerFilePath(Paths.get(\"new/tr4cker/book/file/path\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setTr4ckerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setTr4ckerFilePath(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setTr4ckerFilePath_validPath_setsTr4ckerFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Path path \u003d Paths.get(\"tr4cker/book/file/path\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        modelManager.setTr4ckerFilePath(path);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(path, modelManager.getTr4ckerFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasTask(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void hasTask_taskNotInTr4cker_returnsFalse() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(modelManager.hasTask(TASK1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void hasTask_taskInTr4cker_returnsTrue() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        modelManager.addTask(TASK1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(modelManager.hasTask(TASK1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public void hasEditedTask_taskInTr4cker_returnsTrue() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        modelManager.addTask(TASK1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        modelManager.setTask(TASK1, TASK2);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(modelManager.hasTask(TASK2));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public void hasDeletedTask_taskInTr4cker_returnsFalse() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        modelManager.addTask(TASK1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        modelManager.deleteTask(TASK1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(modelManager.hasTask(TASK1));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void hasEvent_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasEvent(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void hasEvent_eventNotInTr4cker_returnsFalse() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertFalse(modelManager.hasEvent(EVENT1));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void hasEvent_eventInTr4cker_returnsTrue() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        modelManager.addEvent(EVENT1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertTrue(modelManager.hasEvent(EVENT1));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredTaskList().remove(0));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public void getFilteredPendingTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPendingTaskList().remove(0));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public void getFilteredExpiredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredExpiredTaskList().remove(0));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public void getFilteredCompletedTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredCompletedTaskList().remove(0));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void getPlannerFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getPlannerFilteredTaskList().remove(0));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void getFilteredEventList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredEventList().remove(0));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Tr4cker tr4cker \u003d new Tr4ckerBuilder().withTask(TASK1).withTask(TASK2)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                .withEvent(EVENT1).withEvent(EVENT2).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Tr4cker differentTr4cker \u003d new Tr4cker();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        modelManager \u003d new ModelManager(tr4cker, userPrefs);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(tr4cker, userPrefs);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(modelManagerCopy, modelManager);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(modelManager, modelManager);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotEquals(modelManager, null);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotEquals(modelManager, 5);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // different tr4cker -\u003e returns false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotEquals(new ModelManager(differentTr4cker, userPrefs), modelManager);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        // different plannerFilteredList -\u003e returns false"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        String[] keywords \u003d TASK1.getName().taskName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        modelManager.updatePlannerFilteredTaskList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        ModelManager newModelManager \u003d new ModelManager(tr4cker, userPrefs);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotEquals(newModelManager, modelManager);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        modelManager.updateFilteredTaskList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotEquals(newModelManager, modelManager);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        modelManager.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        // different filteredPendingTaskList -\u003e returns false"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        modelManager.updateFilteredPendingTaskList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertNotEquals(newModelManager, modelManager);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        modelManager.updateFilteredPendingTaskList(PREDICATE_SHOW_PENDING_TASKS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        // different filteredExpiredTaskList -\u003e returns false"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        modelManager.updateFilteredExpiredTaskList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertNotEquals(newModelManager, modelManager);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        modelManager.updateFilteredExpiredTaskList(PREDICATE_SHOW_EXPIRED_TASKS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        // different filteredCompletedTaskList -\u003e returns false"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        modelManager.updateFilteredCompletedTaskList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertNotEquals(newModelManager, modelManager);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        modelManager.updateFilteredCompletedTaskList(PREDICATE_SHOW_COMPLETED_TASKS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        modelManager.updatePlannerFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        modelManager.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        // different filteredPendingList -\u003e returns false"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        modelManager.updateFilteredPendingTaskList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertNotEquals(newModelManager, modelManager);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        differentUserPrefs.setTr4ckerFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotEquals(new ModelManager(tr4cker, differentUserPrefs), modelManager);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 45,
      "hanweic53": 64,
      "cwenling": 27,
      "-": 89
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/model/Tr4ckerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_DESCRIPTION_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_EVENT_DATE_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_EVENT_DATE_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_EVENT_NAME_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_EVENT_NAME_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_MODULE_CODE_1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_MODULE_NAME_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_MODULE_NAME_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_TAG_URGENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.EVENT1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.TASK1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.getTypicalTr4cker;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.Event;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.daily.Todo;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.Module;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.ModuleCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class Tr4ckerTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Tr4cker tr4cker \u003d new Tr4cker();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(Collections.emptyList(), tr4cker.getTaskList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tr4cker.resetData(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void resetData_withValidReadOnlyTr4cker_replacesData() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Tr4cker newData \u003d getTypicalTr4cker();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        tr4cker.resetData(newData);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(newData, tr4cker);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void resetData_withDuplicates_throwsDuplicateException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // Two tasks with the same identity fields"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(TASK1).withTaskDescription(VALID_DESCRIPTION_2).withTags(VALID_TAG_URGENT)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d Arrays.asList(TASK1, editedAlice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Tr4ckerStub newData \u003d new Tr4ckerStub(newTasks, new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e tr4cker.resetData(newData));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // Two modules with same code"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        Module module \u003d new Module(VALID_MODULE_NAME_1, new ModuleCode(VALID_MODULE_CODE_1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        Module sameCodeModule \u003d new Module(VALID_MODULE_NAME_2, new ModuleCode(VALID_MODULE_CODE_1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        List\u003cModule\u003e newModules \u003d Arrays.asList(module, sameCodeModule);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Tr4ckerStub newModuleData \u003d new Tr4ckerStub(new ArrayList\u003c\u003e(), newModules, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e tr4cker.resetData(newModuleData));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // Two Events with same name"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Event event \u003d new Event(new EventName(VALID_EVENT_NAME_1), new EventDate(VALID_EVENT_DATE_1, false));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Event sameEventName \u003d new Event(new EventName(VALID_EVENT_NAME_1), new EventDate(VALID_EVENT_DATE_2, false));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        List\u003cEvent\u003e newEvents \u003d Arrays.asList(event, sameEventName);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Tr4ckerStub newEventData \u003d new Tr4ckerStub(new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), newEvents);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(DuplicateEventException.class, () -\u003e tr4cker.resetData(newEventData));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void hasRelatedTasks_taskExists_returnsTrue() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        Task task \u003d new TaskBuilder(TASK1).withModule(VALID_MODULE_CODE_1).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        Module module \u003d new Module(VALID_MODULE_NAME_1, new ModuleCode(VALID_MODULE_CODE_1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        tr4cker.addTask(task);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertTrue(tr4cker.hasRelatedTasks(module));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tr4cker.hasTask(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void hasTask_taskNotInTr4cker_returnsFalse() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(tr4cker.hasTask(TASK1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void hasTask_taskInTr4cker_returnsTrue() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        tr4cker.addTask(TASK1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(tr4cker.hasTask(TASK1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void hasTask_taskWithSameIdentityFieldsInTr4cker_returnsTrue() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        tr4cker.addTask(TASK1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(TASK1).withTaskDescription(VALID_DESCRIPTION_2).withTags(VALID_TAG_URGENT)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(tr4cker.hasTask(editedAlice));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void getTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e tr4cker.getTaskList().remove(0));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void removeModule_moduleAddedAndRemoved_changesData() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        Module module \u003d new Module(VALID_MODULE_NAME_1, new ModuleCode(VALID_MODULE_CODE_1));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        tr4cker.addModule(module);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertTrue(tr4cker.hasModule(module));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        tr4cker.removeModule(module);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertFalse(tr4cker.hasModule(module));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void hasEvent_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tr4cker.hasEvent(null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void hasEvent_eventNotInTr4cker_returnsFalse() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertFalse(tr4cker.hasEvent(EVENT1));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void hasEvent_eventInTr4cker_returnsTrue() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        tr4cker.addEvent(EVENT1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertTrue(tr4cker.hasEvent(EVENT1));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void hasEvent_eventWithSameIdentityFieldsInTr4cker_returnsTrue() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        tr4cker.addEvent(EVENT1);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Event sameEvent \u003d new Event(new EventName(\"Event1 Name\"),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                new EventDate(\"01-10-2021\", false));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertTrue(tr4cker.hasEvent(sameEvent));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void getEventList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e tr4cker.getEventList().remove(0));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void removeEvent_eventAddedAndRemoved_changesData() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Event event \u003d new Event(new EventName(VALID_EVENT_NAME_2), new EventDate(VALID_EVENT_DATE_2, false));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        tr4cker.addEvent(event);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertTrue(tr4cker.hasEvent(event));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        tr4cker.removeEvent(event);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertFalse(tr4cker.hasEvent(event));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * A stub ReadOnlyTr4cker whose tasks list can violate interface constraints."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static class Tr4ckerStub implements ReadOnlyTr4cker {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        private final ObservableList\u003cEvent\u003e events \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        private final ObservableList\u003cModule\u003e modules \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        private final ObservableList\u003cTodo\u003e todos \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Tr4ckerStub(Collection\u003cTask\u003e tasks, Collection\u003cModule\u003e modules, Collection\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            this.tasks.setAll(tasks);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            this.modules.setAll(modules);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            this.events.setAll(events);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            return events;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            return modules;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        public ObservableList\u003cTodo\u003e getTodoList() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            return todos;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 92,
      "yingqi0607": 8,
      "hanweic53": 6,
      "cwenling": 70,
      "ethan-l-m-e": 41
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(userPref, userPref);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotEquals(userPref, index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setTr4ckerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setTr4ckerFilePath(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 17,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/model/countdown/EventDateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "package seedu.tr4cker.model.countdown;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "public class EventDateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EventDate(null, false));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new EventDate(invalidDate, false));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void constructor_pastDateNew_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String pastDate1 \u003d \"01-09-1989\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String pastDate2 \u003d \"01-Sep-1989\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new EventDate(pastDate1, true));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new EventDate(pastDate2, true));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void constructor_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String pastDate1 \u003d \"01-09-1989\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String pastDate2 \u003d \"01-Sep-1989\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertDoesNotThrow(() -\u003e new EventDate(pastDate1, false));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertDoesNotThrow(() -\u003e new EventDate(pastDate2, false));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String futureDate1 \u003d \"01-09-2021\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String futureDate2 \u003d \"01-Sep-2021\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertDoesNotThrow(() -\u003e new EventDate(futureDate1, false));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertDoesNotThrow(() -\u003e new EventDate(futureDate2, false));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertDoesNotThrow(() -\u003e new EventDate(futureDate1, true));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertDoesNotThrow(() -\u003e new EventDate(futureDate2, true));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    void isValidDateTest() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e EventDate.isValidDate(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertFalse(EventDate.isValidDate(\"hehe\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertFalse(EventDate.isValidDate(\"12345678\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertFalse(EventDate.isValidDate(\"September 1st, 1989\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertFalse(EventDate.isValidDate(\"Sep-01-1989\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertFalse(EventDate.isValidDate(\"01-September-1989\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertTrue(EventDate.isValidDate(\"01-Sep-1989\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertTrue(EventDate.isValidDate(\"01-09-1989\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    void isFutureDateTest() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e EventDate.isFutureDate(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // past date"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertFalse(EventDate.isFutureDate(\"01-Sep-1989\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertFalse(EventDate.isFutureDate(\"01-09-1989\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // future date"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertTrue(EventDate.isFutureDate(\"01-Sep-2021\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertTrue(EventDate.isFutureDate(\"01-09-2021\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        EventDate eventDate1 \u003d new EventDate(\"01-09-2021\", false);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        EventDate eventDate2 \u003d new EventDate(\"01-Sep-2021\", false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        EventDate eventDate3 \u003d new EventDate(\"01-Sep-2020\", false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // same"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertEquals(eventDate2, eventDate1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertEquals(eventDate1, eventDate1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // different"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertNotEquals(eventDate3, eventDate1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        EventName eventName \u003d new EventName(\"Help\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // different type"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertFalse(eventDate1.equals(eventName));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    void testHashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        EventDate eventDate1 \u003d new EventDate(\"01-09-2021\", true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        EventDate eventDate2 \u003d new EventDate(\"01-Sep-2021\", true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertEquals(eventDate1.hashCode(), eventDate2.hashCode());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertEquals(eventDate1.hashCode(), eventDate1.getDate().hashCode());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cwenling": 107
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/model/countdown/EventNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "package seedu.tr4cker.model.countdown;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "public class EventNameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EventName(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new EventName(invalidName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void testIsValidName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e EventName.isValidName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertFalse(EventName.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertFalse(EventName.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertFalse(EventName.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertFalse(EventName.isValidName(\"birbd4e p^rt^y!\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertTrue(EventName.isValidName(\"graded assessment\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertTrue(EventName.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertTrue(EventName.isValidName(\"midterm 1\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertTrue(EventName.isValidName(\"Practical Assignment\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertTrue(EventName.isValidName(\"A Very Long name for my Final Exam\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        EventName eventName1 \u003d new EventName(\"HWSGKK\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        EventName eventName2 \u003d new EventName(\"HWSGKK\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        EventName eventName3 \u003d new EventName(\"EthanSGKK\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertEquals(eventName1, eventName2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertEquals(eventName1, eventName1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertNotEquals(eventName1, eventName3);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void testHashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        EventName eventName1 \u003d new EventName(\"HWSGKK\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        EventName eventName2 \u003d new EventName(\"HWSGKK\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertEquals(eventName1.hashCode(), eventName2.hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertEquals(eventName1.hashCode(), eventName2.toString().hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cwenling": 60
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/model/countdown/EventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "package seedu.tr4cker.model.countdown;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private Event event00 \u003d new Event(new EventName(\"Event Name Exclamation Mark\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            new EventDate(\"25-Dec-2021\", true));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private Event event01 \u003d new Event(new EventName(\"Event Name Exclamation Mark\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            new EventDate(\"31-Oct-2021\", true));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private Event event10 \u003d new Event(new EventName(\"Event Name Question Mark\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            new EventDate(\"25-Dec-2021\", true));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private Event event11 \u003d new Event(new EventName(\"Event Name Question Mark\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            new EventDate(\"31-Oct-2021\", true));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Event(null, null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void constructor_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        EventName eventName \u003d new EventName(\"Dear Diary I Believe Im A Good Person\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        EventDate eventDate \u003d new EventDate(\"01-Sep-1989\", false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertDoesNotThrow(() -\u003e new Event(eventName, eventDate));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void isSameEventTest() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertTrue(event00.isSameEvent(event00));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertFalse(event00.isSameEvent(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // different name and date -\u003e return false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertFalse(event00.isSameEvent(event11));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // different name -\u003e return false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertFalse(event00.isSameEvent(event10));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // different date same name -\u003e return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertTrue(event00.isSameEvent(event01));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertEquals(event00, event00);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertNotEquals(event00, null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // different name and date -\u003e return false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertNotEquals(event11, event00);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // different name -\u003e return false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertNotEquals(event10, event00);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // different date -\u003e return false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertNotEquals(event01, event00);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void testHashcode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        EventName eventName \u003d new EventName(\"Event Name Question Mark\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        EventDate eventDate \u003d new EventDate(\"31-Oct-2021\", true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertEquals(event11.hashCode(), Objects.hash(eventName, eventDate));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cwenling": 79
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/model/countdown/UniqueEventListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "package seedu.tr4cker.model.countdown;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": "public class UniqueEventListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final UniqueEventList uniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final Event event1 \u003d new Event(new EventName(\"name 1\"), new EventDate(\"10-10-2021\", false));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final Event event2 \u003d new Event(new EventName(\"name 2\"), new EventDate(\"10-10-2022\", false));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void contains_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.contains(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void contains_eventNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertFalse(uniqueEventList.contains(event1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void contains_eventInList_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        uniqueEventList.add(event1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertTrue(uniqueEventList.contains(event1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void contains_eventWithSameName_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        uniqueEventList.add(event1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Event sameName \u003d new Event(new EventName(\"name 1\"), new EventDate(\"10-12-2021\", false));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertTrue(uniqueEventList.contains(sameName));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void add_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.add(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void add_duplicateEvent_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        uniqueEventList.add(event1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(DuplicateEventException.class, () -\u003e uniqueEventList.add(event1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void remove_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.remove(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void remove_eventDoesNotExist_throwsEventNotFoundException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(EventNotFoundException.class, () -\u003e uniqueEventList.remove(event1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void remove_existingEvent_removesEvent() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        uniqueEventList.add(event1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        uniqueEventList.remove(event1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void setEvents_nullUniqueEventList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.setEvents((UniqueEventList) null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void setEvents_uniqueEventList_replacesOwnListWithProvidedUniqueEventList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        uniqueEventList.add(event1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        expectedUniqueEventList.add(event2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        uniqueEventList.setEvents(expectedUniqueEventList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void setEvents_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.setEvents((List\u003cEvent\u003e) null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void setEvents_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        uniqueEventList.add(event1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        List\u003cEvent\u003e eventList \u003d Collections.singletonList(event2);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        uniqueEventList.setEvents(eventList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        expectedUniqueEventList.add(event2);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void setEvents_listWithDuplicateEvents_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        List\u003cEvent\u003e listWithDuplicateEvents \u003d Arrays.asList(event1, event1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(DuplicateEventException.class, () -\u003e uniqueEventList.setEvents(listWithDuplicateEvents));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            -\u003e uniqueEventList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cwenling": 115
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/model/module/ModuleCodeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "package seedu.tr4cker.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "class ModuleCodeTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    void isValidModuleCode() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ModuleCode.isValidModuleCode(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // invalid code"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"@@@\")); // non-alphanumeric"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"      \")); // spaces"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"\")); // empty string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"a b\")); // spaces"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"del\")); // delete prefix"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"DEL\")); // delete caps"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // valid code"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"a\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")); // long"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        ModuleCode moduleCode \u003d new ModuleCode(\"a\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // same"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertTrue(moduleCode.equals(new ModuleCode(\"a\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertTrue(moduleCode.equals(moduleCode));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // different"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertFalse(moduleCode.equals(new ModuleCode(\"b\")));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // different type"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertFalse(moduleCode.equals(5));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    void testHashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        String validCodeName \u003d \"CS1231S\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        ModuleCode moduleCode1 \u003d new ModuleCode(validCodeName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        ModuleCode moduleCode2 \u003d new ModuleCode(validCodeName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertEquals(moduleCode1, moduleCode2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ethan-l-m-e": 56
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/model/module/ModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "package seedu.tr4cker.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "class ModuleTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private Module exampleModule \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            new Module(\"NAME1\", new ModuleCode(\"CODE1\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private Module exampleModuleCopy \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            new Module(\"NAME1\", new ModuleCode(\"CODE1\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private Module moduleWithDiffCode \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            new Module(\"NAME1\", new ModuleCode(\"CODE2\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private Module moduleWithDiffName \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            new Module(\"NAME2\", new ModuleCode(\"CODE1\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private Module moduleWithLowerCaseCode \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            new Module(\"NAME1\", new ModuleCode(\"code1\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    void isValidModuleName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Module.isValidModuleName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertFalse(Module.isValidModuleName(\"@@@\")); // non-alphanumeric"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertFalse(Module.isValidModuleName(\"      \")); // spaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertFalse(Module.isValidModuleName(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertTrue(Module.isValidModuleName(\"graded assignment\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertTrue(Module.isValidModuleName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertTrue(Module.isValidModuleName(\"assignment 1\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertTrue(Module.isValidModuleName(\"Homework Assignment\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertTrue(Module.isValidModuleName(\"A Very Long name for my Homework\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    void isSameModule() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertTrue(exampleModule.isSameModule(exampleModule));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertFalse(exampleModule.isSameModule(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertFalse(exampleModule.isSameModule(moduleWithDiffCode));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // same code different name -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertTrue(exampleModule.isSameModule(moduleWithDiffName));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // case insensitive module code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertTrue(exampleModule.isSameModule(moduleWithLowerCaseCode));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertTrue(exampleModule.equals(exampleModuleCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertTrue(exampleModule.equals(exampleModule));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertFalse(exampleModule.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertFalse(exampleModule.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertFalse(exampleModule.equals(moduleWithDiffName));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // different code -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertFalse(exampleModule.equals(moduleWithDiffCode));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    void testHashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        String moduleName \u003d \"name\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        ModuleCode moduleCode \u003d new ModuleCode(\"code\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        Module module1 \u003d new Module(moduleName, moduleCode);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        Module module2 \u003d new Module(moduleName, moduleCode);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertEquals(module1.hashCode(), module2.hashCode());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ethan-l-m-e": 88
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/model/module/UniqueModuleListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "package seedu.tr4cker.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "class UniqueModuleListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private final UniqueModuleList uniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private final Module module1 \u003d new Module(\"name1\", new ModuleCode(\"code1\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private final Module module2 \u003d new Module(\"name2\", new ModuleCode(\"code2\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void contains_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.contains(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void contains_moduleNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertFalse(uniqueModuleList.contains(module1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void contains_moduleInList_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        uniqueModuleList.add(module1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertTrue(uniqueModuleList.contains(module1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void contains_moduleWithSameCode_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        uniqueModuleList.add(module1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        Module sameCodeModule \u003d new Module(\"asdf\", new ModuleCode(\"code1\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertTrue(uniqueModuleList.contains(sameCodeModule));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void add_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.add(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void add_duplicateModule_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        uniqueModuleList.add(module1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList.add(module1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void remove_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.remove(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void remove_moduleDoesNotExist_throwsModuleNotFoundException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertThrows(ModuleNotFoundException.class, () -\u003e uniqueModuleList.remove(module1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void remove_existingModule_removesModule() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        uniqueModuleList.add(module1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        uniqueModuleList.remove(module1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void setModules_nullUniqueModuleList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModules((UniqueModuleList) null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void setModules_uniqueModuleList_replacesOwnListWithProvidedUniqueModuleList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        uniqueModuleList.add(module1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        expectedUniqueModuleList.add(module2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        uniqueModuleList.setModules(expectedUniqueModuleList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void setModules_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModules((List\u003cModule\u003e) null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void setModules_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        uniqueModuleList.add(module1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d Collections.singletonList(module2);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        uniqueModuleList.setModules(moduleList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        expectedUniqueModuleList.add(module2);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void setModules_listWithDuplicateTasks_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        List\u003cModule\u003e listWithDuplicateModules \u003d Arrays.asList(module1, module1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList.setModules(listWithDuplicateModules));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            -\u003e uniqueModuleList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ethan-l-m-e": 115
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/model/planner/PlannerDayTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "class PlannerDayTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final LocalDate localDate1 \u003d LocalDate.of(2021, 1, 1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final PlannerDay plannerDay1 \u003d new PlannerDay(localDate1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final LocalDate localDate2 \u003d LocalDate.of(2021, 2, 14);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final PlannerDay plannerDay2 \u003d new PlannerDay(localDate2);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final LocalDate localDate3 \u003d LocalDate.of(2021, 12, 6);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final PlannerDay plannerDay3 \u003d new PlannerDay(localDate3);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final PlannerDay plannerDay4 \u003d new PlannerDay(localDate3);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void getDay_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay1.getDay(), 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay2.getDay(), 14);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay3.getDay(), 6);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void getDayOfWeek_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay1.getDayOfWeek(), 5);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay2.getDayOfWeek(), 7);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay3.getDayOfWeek(), 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void getMonth_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay1.getMonth(), 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay2.getMonth(), 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay3.getMonth(), 12);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void getMonthName_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay1.getMonthName(), \"JANUARY\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay2.getMonthName(), \"FEBRUARY\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay3.getMonthName(), \"DECEMBER\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void getYear_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay1.getYear(), 2021);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay2.getYear(), 2021);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay3.getYear(), 2021);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void createFirstDayOfMonth_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate test1 \u003d LocalDate.of(2021, 1, 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate test2 \u003d LocalDate.of(2021, 2, 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate test3 \u003d LocalDate.of(2021, 12, 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay1.createFirstDayOfMonth(), new PlannerDay(test1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay2.createFirstDayOfMonth(), new PlannerDay(test2));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay3.createFirstDayOfMonth(), new PlannerDay(test3));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void getCurrDay_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        PlannerDay day1 \u003d PlannerDay.getCurrDay();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        PlannerDay day2 \u003d PlannerDay.getCurrDay();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(day1, day2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void getPrevDay_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate test1 \u003d LocalDate.of(2020, 12, 31);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate test2 \u003d LocalDate.of(2021, 2, 13);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate test3 \u003d LocalDate.of(2021, 12, 5);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay1.getPrevDay(), new PlannerDay(test1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay2.getPrevDay(), new PlannerDay(test2));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay3.getPrevDay(), new PlannerDay(test3));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void getNextDay_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate test1 \u003d LocalDate.of(2021, 1, 2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate test2 \u003d LocalDate.of(2021, 2, 15);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate test3 \u003d LocalDate.of(2021, 12, 7);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay1.getNextDay(), new PlannerDay(test1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay2.getNextDay(), new PlannerDay(test2));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay3.getNextDay(), new PlannerDay(test3));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay3, plannerDay4);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotEquals(plannerDay1, null);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotEquals(plannerDay3, 5);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void stringTest() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(plannerDay3.toString(), plannerDay4.toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 104
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String tagName \u003d \"tagName\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Tag tag \u003d new Tag(tagName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(tag.toString(), \"[tagName]\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 10,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/model/task/CompletionStatusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "package seedu.tr4cker.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "public class CompletionStatusTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void constructor_invalidCompletionStatus_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        int invalidPercentage \u003d -1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new CompletionStatus(invalidPercentage));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void isValidCompletionStatus() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // invalid percentage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertFalse(CompletionStatus.isValidCompletionStatus(-1)); // less than zero"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertFalse(CompletionStatus.isValidCompletionStatus(101)); // greater than 100"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // valid percentage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertTrue(CompletionStatus.isValidCompletionStatus(50));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertTrue(CompletionStatus.isValidCompletionStatus(0)); // minimum"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertTrue(CompletionStatus.isValidCompletionStatus(100)); // maximum"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void compareTo() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CompletionStatus lessComplete \u003d new CompletionStatus(30);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        CompletionStatus moreComplete \u003d new CompletionStatus(70);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertTrue(lessComplete.compareTo(moreComplete) \u003c 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertTrue(moreComplete.compareTo(lessComplete) \u003e 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertTrue(lessComplete.compareTo(lessComplete) \u003d\u003d 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testHashcode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        CompletionStatus completionStatus \u003d new CompletionStatus(10);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(completionStatus.hashCode(), 10);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 8,
      "cwenling": 10,
      "ethan-l-m-e": 29
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/model/task/DeadlineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "package seedu.tr4cker.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Deadline(null, false));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void constructor_invalidDeadline_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String invalidDeadline \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Deadline(invalidDeadline, false));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void isValidDeadline() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // null deadline time"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Deadline.isValidDeadline(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // invalid deadline times"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"02-12-2021\")); // only has date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"deadline\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"02-12-2021   0000\")); // additional spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"10/10/2021 2359\")); // wrong format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // valid deadline times"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(\"02-12-2021 0000\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(\"10-Oct-2021 2359\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(\"20-Sep-2021 1800\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public void isDeadlineWithTime() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        // invalid deadline times"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(Deadline.isDeadlineWithTime(\"20-Sept-2021 1900\")); // additional alphabets"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(Deadline.isDeadlineWithTime(\"201-091-20211\")); // additional numbers"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(Deadline.isDeadlineWithTime(\"20-Sep-2021\")); // no time"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(Deadline.isDeadlineWithTime(\"20-09-2021\")); // no time"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        // valid deadline times"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(Deadline.isDeadlineWithTime(\"02-12-2021 0000\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(Deadline.isDeadlineWithTime(\"02-Dec-2021 0000\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public void isFutureDeadline() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        // invalid deadline times"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(Deadline.isFutureDeadline(\"20-Sep-2020 1900\")); // time has passed"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        // valid deadline times"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(Deadline.isDeadlineWithTime(\"02-12-2030 0000\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testHashcode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        Deadline deadline1 \u003d new Deadline(\"02-12-2021 1800\", false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        Deadline deadline2 \u003d new Deadline(\"02-12-2021 1800\", false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(deadline1.hashCode(), deadline2.hashCode());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 7,
      "hanweic53": 32,
      "cwenling": 32
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/model/task/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"Homework\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"My Homework Assignment\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Homework\", \"Assignment\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"My Homework Assignment\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Homework\", \"Tutorial\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"My Homework Assignment\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"HoMeWork\", \"AssiGNMENT\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"My Homework Assignment\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"My Homework Assignment\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Tutorial2\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"My Homework Assignment\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        // Keywords match deadline and description, but does not match name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"31-12-2021\", \"2359\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                \"description\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"My Homework Assignment\").withDeadline(\"31-12-2021 2359\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                .withCompletionStatus(0).withTaskDescription(\"description\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 3,
      "yingqi0607": 3,
      "hanweic53": 14,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/model/task/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(Name.isValidName(\"hom3work!\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(Name.isValidName(\"graded assignment\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(Name.isValidName(\"assignment 1\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(Name.isValidName(\"Homework Assignment\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(Name.isValidName(\"A Very Long name for my Homework\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testHashcode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Name name1 \u003d new Name(\"name\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Name name2 \u003d new Name(\"name\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(name1.hashCode(), name2.hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 11,
      "hanweic53": 5,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/model/task/TaskDescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "package seedu.tr4cker.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "public class TaskDescriptionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TaskDescription(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TaskDescription(invalidDescription));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public void isValidTaskDescription() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        // null tr4cker"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TaskDescription.isValidTaskDescription(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        // invalid descriptions"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertFalse(TaskDescription.isValidTaskDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertFalse(TaskDescription.isValidTaskDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        // valid descriptions"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertTrue(TaskDescription.isValidTaskDescription(\"description\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertTrue(TaskDescription.isValidTaskDescription(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertTrue(TaskDescription.isValidTaskDescription(\"Do all assignments and quizzes, \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                + \"assignment 1 is blahblahblahblahblah\")); // long tr4cker"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testHashcode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TaskDescription taskDescription1 \u003d new TaskDescription(\"description\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TaskDescription taskDescription2 \u003d new TaskDescription(\"description\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(taskDescription1.hashCode(), taskDescription2.hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 9,
      "yingqi0607": 37
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/model/task/TaskDueInPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.util.GotoDateUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "class TaskDueInPredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TaskDueInPredicate firstPredicate \u003d new TaskDueInPredicate();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TaskDueInPredicate secondPredicate \u003d new TaskDueInPredicate();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TaskDueInPredicate thirdPredicate \u003d new TaskDueInPredicate(LocalDate.of(2020, 10, 10));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TaskDueInPredicate fourthPredicate \u003d new TaskDueInPredicate(LocalDate.of(2020, 10, 10));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TaskDueInPredicate fifthPredicate \u003d new TaskDueInPredicate(YearMonth.of(2020, 10));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TaskDueInPredicate sixthPredicate \u003d new TaskDueInPredicate(YearMonth.of(2020, 10));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(firstPredicate, firstPredicate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(thirdPredicate, thirdPredicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(fifthPredicate, fifthPredicate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(firstPredicate, secondPredicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(thirdPredicate, fourthPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(fifthPredicate, sixthPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotEquals(firstPredicate, 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotEquals(firstPredicate, null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // different predicates -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotEquals(firstPredicate, fifthPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void test_taskDueIn_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String test \u003d GotoDateUtil.parseGotoDay(today) + \" 2359\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TaskDueInPredicate todayPredicate \u003d new TaskDueInPredicate();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(todayPredicate.test(new TaskBuilder().withDeadline(test).build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate localDate1 \u003d LocalDate.of(2020, 12, 9);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String test1 \u003d GotoDateUtil.parseGotoDay(localDate1) + \" 2359\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TaskDueInPredicate predicate1 \u003d new TaskDueInPredicate(localDate1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(predicate1.test(new TaskBuilder().withDeadline(test1).build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void test_taskDoesNotDueIn_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String test \u003d GotoDateUtil.parseGotoDay(today) + \" 2359\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TaskDueInPredicate todayPredicate \u003d new TaskDueInPredicate();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDate localDate1 \u003d LocalDate.of(2020, 12, 9);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String test1 \u003d GotoDateUtil.parseGotoDay(localDate1) + \" 2359\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TaskDueInPredicate predicate1 \u003d new TaskDueInPredicate(localDate1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(predicate1.test(new TaskBuilder().withDeadline(test).build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(todayPredicate.test(new TaskBuilder().withDeadline(test1).build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 74
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/model/task/TaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_COMPLETION_STATUS_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_DEADLINE_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_DESCRIPTION_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_NAME_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_TAG_URGENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.MANUAL_TASK2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.TASK1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.TASK1_ADD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.TASK1_BEFORE_ADD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.TASK1_BEFORE_DELETE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.TASK1_DELETE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.ModuleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e task.getTags().remove(0));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void addTagsTest() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Tag tag1 \u003d new Tag(\"tag1\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Tag tag2 \u003d new Tag(\"tag2\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        tags.add(tag1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        tags.add(tag2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TASK1.addTags(tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(TASK1_ADD, TASK1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Tag tag3 \u003d new Tag(\"tag1\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Tag tag4 \u003d new Tag(\"tag2\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Set\u003cTag\u003e duplicateTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        duplicateTags.add(tag3);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        duplicateTags.add(tag4);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TASK1_ADD.addTags(duplicateTags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(TASK1_BEFORE_ADD, TASK1_ADD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void deleteTagsTest() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Tag tag1 \u003d new Tag(\"tag1\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Tag tag2 \u003d new Tag(\"tag2\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        tags.add(tag1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        tags.add(tag2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TASK1.deleteTags(tags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(TASK1_DELETE, TASK1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Tag tag3 \u003d new Tag(\"tag1\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Tag tag4 \u003d new Tag(\"tag2\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Set\u003cTag\u003e nonExistingTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        nonExistingTags.add(tag3);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        nonExistingTags.add(tag4);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TASK1_DELETE.deleteTags(nonExistingTags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(TASK1_BEFORE_DELETE, TASK1_DELETE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void isSameTask() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(TASK1.isSameTask(TASK1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(TASK1.isSameTask(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        // different deadline and descriptions -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        Task editedTask1 \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "                new TaskBuilder(TASK1).withDeadline(VALID_DEADLINE_2).withTaskDescription(VALID_DESCRIPTION_2).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(TASK1.isSameTask(editedTask1));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        editedTask1 \u003d new TaskBuilder(TASK1).withName(VALID_NAME_2).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(TASK1.isSameTask(editedTask1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // same name, same deadline, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        editedTask1 \u003d new TaskBuilder(TASK1).withCompletionStatus(VALID_COMPLETION_STATUS_2)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                .withTaskDescription(VALID_DESCRIPTION_2).withTags(VALID_TAG_URGENT).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(TASK1.isSameTask(editedTask1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // same name, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        editedTask1 \u003d new TaskBuilder(TASK1).withDeadline(VALID_DEADLINE_2).withTaskDescription(VALID_DESCRIPTION_2)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                .withTags(VALID_TAG_URGENT).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(TASK1.isSameTask(editedTask1));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // same name, same deadline, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        editedTask1 \u003d new TaskBuilder(TASK1)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                .withTaskDescription(VALID_DESCRIPTION_2).withTags(VALID_TAG_URGENT).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(TASK1.isSameTask(editedTask1));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        Task aliceCopy \u003d new TaskBuilder(TASK1).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(TASK1.equals(aliceCopy));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(TASK1.equals(TASK1));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(TASK1.equals(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(TASK1.equals(5));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(TASK1.equals(MANUAL_TASK2));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        Task editedTask1 \u003d new TaskBuilder(TASK1).withName(VALID_NAME_2).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(TASK1.equals(editedTask1));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        editedTask1 \u003d new TaskBuilder(TASK1).withDeadline(VALID_DEADLINE_2).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(TASK1.equals(editedTask1));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        // different completionStatus -\u003e returns true"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        editedTask1 \u003d new TaskBuilder(TASK1).withCompletionStatus(VALID_COMPLETION_STATUS_2).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(TASK1.equals(editedTask1));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // different tr4cker -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        editedTask1 \u003d new TaskBuilder(TASK1).withTaskDescription(VALID_DESCRIPTION_2).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(TASK1.equals(editedTask1));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        editedTask1 \u003d new TaskBuilder(TASK1).withTags(VALID_TAG_URGENT).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(TASK1.equals(editedTask1));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testHashcode() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Name name \u003d new Name(\"name\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"02-12-2021 1800\", false);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        CompletionStatus completionStatus \u003d new CompletionStatus(0);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        TaskDescription taskDescription \u003d new TaskDescription(\"description\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        ModuleCode code \u003d new ModuleCode(\"codeName\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        Set\u003cModuleCode\u003e moduleCode \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        moduleCode.add(code);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Tag tag \u003d new Tag(\"tag\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        tags.add(tag);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        Task task1 \u003d new Task(name, deadline, completionStatus, taskDescription, moduleCode, tags);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        Task task2 \u003d new Task(name, deadline, completionStatus, taskDescription, moduleCode, tags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(task1.hashCode(), task2.hashCode());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 75,
      "yingqi0607": 6,
      "hanweic53": 28,
      "cwenling": 2,
      "-": 43,
      "ethan-l-m-e": 9
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/model/task/UniqueTaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_DESCRIPTION_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_TAG_URGENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.MANUAL_TASK2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.TASK1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.TASK_J;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class UniqueTaskListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void contains_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.contains(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void contains_taskNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(uniqueTaskList.contains(TASK1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void contains_taskInList_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        uniqueTaskList.add(TASK1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(uniqueTaskList.contains(TASK1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void contains_taskWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        uniqueTaskList.add(TASK1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(TASK1).withTaskDescription(VALID_DESCRIPTION_2).withTags(VALID_TAG_URGENT)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(uniqueTaskList.contains(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void add_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void add_duplicateTask_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        uniqueTaskList.add(TASK1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.add(TASK1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setTask_nullTargetTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(null, TASK1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setTask_nullEditedTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(TASK1, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setTask_targetTaskNotInList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e uniqueTaskList.setTask(TASK1, TASK1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setTask_editedTaskIsSameTask_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        uniqueTaskList.add(TASK1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        uniqueTaskList.setTask(TASK1, TASK1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        expectedUniqueTaskList.add(TASK1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setTask_editedTaskHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        uniqueTaskList.add(TASK1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(TASK1).withTaskDescription(VALID_DESCRIPTION_2).withTags(VALID_TAG_URGENT)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        uniqueTaskList.setTask(TASK1, editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedUniqueTaskList.add(editedAlice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setTask_editedTaskHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        uniqueTaskList.add(TASK1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        uniqueTaskList.setTask(TASK1, MANUAL_TASK2);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedUniqueTaskList.add(MANUAL_TASK2);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setTask_editedTaskHasNonUniqueIdentity_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        uniqueTaskList.add(TASK1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        uniqueTaskList.add(MANUAL_TASK2);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.setTask(TASK1, MANUAL_TASK2));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void remove_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.remove(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void remove_taskDoesNotExist_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e uniqueTaskList.remove(TASK1));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void remove_existingTask_removesTask() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        uniqueTaskList.add(TASK1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        uniqueTaskList.remove(TASK1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setTasks_nullUniqueTaskList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTasks((UniqueTaskList) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setTasks_uniqueTaskList_replacesOwnListWithProvidedUniqueTaskList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        uniqueTaskList.add(TASK1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedUniqueTaskList.add(MANUAL_TASK2);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        uniqueTaskList.setTasks(expectedUniqueTaskList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setTasks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTasks((List\u003cTask\u003e) null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setTasks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        uniqueTaskList.add(TASK1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        List\u003cTask\u003e taskList \u003d Collections.singletonList(MANUAL_TASK2);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        uniqueTaskList.setTasks(taskList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        expectedUniqueTaskList.add(MANUAL_TASK2);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setTasks_listWithDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        List\u003cTask\u003e listWithDuplicateTasks \u003d Arrays.asList(TASK1, TASK1);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.setTasks(listWithDuplicateTasks));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            -\u003e uniqueTaskList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    void sortTasksAccordingToDeadline_listWithSameDeadlines() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        uniqueTaskList.add(TASK1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        uniqueTaskList.add(TASK_J);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        uniqueTaskList.add(MANUAL_TASK2);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        uniqueTaskList.sortTasksAccordingToDeadline();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        expectedUniqueTaskList.add(MANUAL_TASK2);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        expectedUniqueTaskList.add(TASK1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        expectedUniqueTaskList.add(TASK_J);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 146,
      "yingqi0607": 15,
      "hanweic53": 23
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/model/util/GotoDateUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "class GotoDateUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testIsValidGotoDate_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(GotoDateUtil.isValidGotoDate(\"18-10-2020\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(GotoDateUtil.isValidGotoDate(\"18-Oct-2020\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testIsValidGotoDate_failure() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(GotoDateUtil.isValidGotoDate(\"10-2020\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(GotoDateUtil.isValidGotoDate(\"Oct-2020\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(GotoDateUtil.isValidGotoDate(\"32-Oct-2020\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(GotoDateUtil.isValidGotoDate(\"22-hhh-2020\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testIsValidGotoMonth_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(GotoDateUtil.isValidGotoMonth(\"Oct-2020\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(GotoDateUtil.isValidGotoMonth(\"10-2020\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testIsValidGotoMonth_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(GotoDateUtil.isValidGotoMonth(\"AAA-2020\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(GotoDateUtil.isValidGotoMonth(\"13-2020\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(GotoDateUtil.isValidGotoMonth(\"20-12-2020\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(GotoDateUtil.isValidGotoMonth(\"20-Dec-2020\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testSplitGotoDay_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(LocalDate.of(2020, 10, 10), GotoDateUtil.splitGotoDay(\"10-Oct-2020\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(LocalDate.of(2020, 10, 10), GotoDateUtil.splitGotoDay(\"10-10-2020\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testSplitGotoMonth_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(YearMonth.of(2020, 10), GotoDateUtil.splitGotoMonth(\"Oct-2020\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(YearMonth.of(2020, 10), GotoDateUtil.splitGotoMonth(\"10-2020\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testParseGotoDay_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(\"10-Oct-2020\", GotoDateUtil.parseGotoDay(LocalDate.of(2020, 10, 10)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testParseGotoMonth_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(\"Oct-2020\", GotoDateUtil.parseGotoMonth(YearMonth.of(2020, 10)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testCheckToday_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(GotoDateUtil.checkToday(\"today\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(GotoDateUtil.checkToday(\"tdy\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testCheckToday_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(GotoDateUtil.checkToday(\"todayyyy\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(GotoDateUtil.checkToday(\"jin tian\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testCheckTomorrow_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(GotoDateUtil.checkTomorrow(\"tomorrow\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(GotoDateUtil.checkTomorrow(\"tmr\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testCheckTomorrow_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(GotoDateUtil.checkTomorrow(\"tomorrowwww\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(GotoDateUtil.checkTomorrow(\"ming tian\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testGetToday_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(LocalDate.now(), GotoDateUtil.getToday());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testGetTomorrow_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(LocalDate.now().plusDays(1), GotoDateUtil.getTomorrow());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 97
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/model/util/NaturalDateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static java.time.DayOfWeek.FRIDAY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static java.time.temporal.TemporalAdjusters.next;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "public class NaturalDateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public void isNaturalDeadline() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        // invalid natural date-time"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(NaturalDateUtil.isNaturalDeadline(\"\")); // empty string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(NaturalDateUtil.isNaturalDeadline(\" \")); // spaces only"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(NaturalDateUtil.isNaturalDeadline(\"02-12-2021 1900\")); // not a natural date-time"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(NaturalDateUtil.isNaturalDeadline(\"02-12-2021\")); // not a natural date-time"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(NaturalDateUtil.isNaturalDeadline(\"SGKK\")); // less than 5 alphabets"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(NaturalDateUtil.isNaturalDeadline(\"SGKK PLJJ\")); // not a natural date-time"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(NaturalDateUtil.isNaturalDeadline(\"TODAY!\")); // contains symbols"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(NaturalDateUtil.isNaturalDeadline(\"Tues 1900\")); // wrong day format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertFalse(NaturalDateUtil.isNaturalDeadline(\"Tuesday 19000\")); // wrong time format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        // valid natural date-time"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(NaturalDateUtil.isNaturalDeadline(\"Tuesday\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(NaturalDateUtil.isNaturalDeadline(\"TODAY\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(NaturalDateUtil.isNaturalDeadline(\"TuEsdAy\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(NaturalDateUtil.isNaturalDeadline(\"Tuesday 1900\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertTrue(NaturalDateUtil.isNaturalDeadline(\"TUESDAY 1900\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public void convertToDateTime_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e NaturalDateUtil.convertToDateTime("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                \"Tuesday 2500\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e NaturalDateUtil.convertToDateTime("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                \"SunnyDay 2300\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e NaturalDateUtil.convertToDateTime("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                \"SunnyDay\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public void convertToDateTime_returnsDateTimeString() throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        String expectedTime \u003d \" 2200\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        String expectedDate \u003d LocalDate.now().with(next(FRIDAY))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                .format(NaturalDateUtil.DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        String expectedDateTime \u003d expectedDate + expectedTime;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertEquals(expectedDate, NaturalDateUtil.convertToDateTime(\"Friday\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertEquals(expectedDate, NaturalDateUtil.convertToDateTime(\"FrIDay\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertEquals(expectedDateTime, NaturalDateUtil.convertToDateTime(\"Friday 2200\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertEquals(expectedDateTime, NaturalDateUtil.convertToDateTime(\"FRIDAY 2200\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanweic53"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        expectedDate \u003d LocalDate.now().format(NaturalDateUtil.DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        expectedDateTime \u003d expectedDate + expectedTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertEquals(expectedDate, NaturalDateUtil.convertToDateTime(\"Today\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertEquals(expectedDate, NaturalDateUtil.convertToDateTime(\"ToDaY\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertEquals(expectedDateTime, NaturalDateUtil.convertToDateTime(\"Today 2200\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertEquals(expectedDateTime, NaturalDateUtil.convertToDateTime(\"ToDAY 2200\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "hanweic53": 66
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/model/util/SampleDataUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.model.util.SampleDataUtil.getModuleCodeSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import static seedu.tr4cker.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.CompletionStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.TaskDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "class SampleDataUtilTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Task[] tasks \u003d new Task[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        new Task(new Name(\"CS2100 Lab 1\"), new Deadline(\"10-Jun-2020 1800\", false),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                new CompletionStatus(90), new TaskDescription(\"Warmup lab practice\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                getModuleCodeSet(\"CS2100\"), getTagSet(\"Urgent\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        new Task(new Name(\"CS2100 Lab 2\"), new Deadline(\"10-Aug-2020 1800\", false),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                new CompletionStatus(90), new TaskDescription(\"First official lab\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                getModuleCodeSet(\"CS2100\"), getTagSet(\"demo\", \"Important\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        new Task(new Name(\"GEQ1000 Tutorial 3\"), new Deadline(\"10-Oct-2019 1800\", false),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                new CompletionStatus(90), new TaskDescription(\"Too much reasoning\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                getModuleCodeSet(\"GEQ1000\"), getTagSet(\"tutorial\", \"origami\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        new Task(new Name(\"GER1000 Graded Assignment 4\"), new Deadline(\"20-Oct-2019 1800\", false),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                new CompletionStatus(80), new TaskDescription(\"Chapter 3 - Sampling Methods\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                getModuleCodeSet(\"GER1000\"), getTagSet(\"graded\", \"assignment\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        new Task(new Name(\"Team meeting\"), new Deadline(\"19-Sep-2020 1000\", false),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                new CompletionStatus(100), new TaskDescription(\"Discuss v1.2\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                getModuleCodeSet(\"CS2103T\"), getTagSet(\"meeting\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        new Task(new Name(\"Team meeting\"), new Deadline(\"25-Oct-2020 1000\", false),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                new CompletionStatus(100), new TaskDescription(\"Discuss v1.3\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                getModuleCodeSet(\"CS2103T\"), getTagSet(\"meeting\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        new Task(new Name(\"Thai Lesson\"), new Deadline(\"27-Oct-2020 1000\", false),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                new CompletionStatus(100), new TaskDescription(\"Learning new consonants\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                getModuleCodeSet(\"LAT1201\"), getTagSet(\"lesson\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        new Task(new Name(\"Thai Listening Quiz 2\"), new Deadline(\"27-Oct-2020 2000\", false),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                new CompletionStatus(100), new TaskDescription(\"Pages 1-43\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                getModuleCodeSet(\"LAT1201\"), getTagSet(\"listening\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        new Task(new Name(\"OP2 Pitch Meeting\"), new Deadline(\"27-Oct-2020 2130\", false),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                new CompletionStatus(100), new TaskDescription(\"Prepare materials for meeting\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                getModuleCodeSet(\"CS2101\"), getTagSet(\"op2\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        new Task(new Name(\"CS2103T Mock Exam\"), new Deadline(\"30-Oct-2020 1600\", false),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                new CompletionStatus(0), new TaskDescription(\"Read instructions\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                getModuleCodeSet(\"CS2103T\"), getTagSet(\"mock\", \"practical\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        new Task(new Name(\"CS2100 Assignment 3\"), new Deadline(\"31-Oct-2020 2359\", false),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                new CompletionStatus(80), new TaskDescription(\"Boolean algebra\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                getModuleCodeSet(\"CS2100\"), getTagSet(\"graded\", \"assignment\")),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        new Task(new Name(\"GEQ1000 Quiz 6\"), new Deadline(\"05-Nov-2020 2359\", false),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                new CompletionStatus(50), new TaskDescription(\"Design quiz\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                getModuleCodeSet(\"GEQ1000\"), getTagSet(\"graded\", \"readings\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        new Task(new Name(\"CS1101S Mission\"), new Deadline(\"10-Oct-2021 1800\", false),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                new CompletionStatus(100), new TaskDescription(\"A very fun mission\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                getModuleCodeSet(\"CS1101S\"), getTagSet(\"Mission\", \"Fun\")),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        new Task(new Name(\"CS1101S Quiz\"), new Deadline(\"11-Sep-2021 2359\", false),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                new CompletionStatus(0), new TaskDescription(\"A quiz that\u0027s too hard for me\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                getModuleCodeSet(\"CS1101S\"), getTagSet(\"Quiz\", \"2Hard4Me\")),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        new Task(new Name(\"CS2100 MidTerms\"), new Deadline(\"12-Oct-2021 1200\", false),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                new CompletionStatus(20), new TaskDescription(\"Need do cheat sheet\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                getModuleCodeSet(\"CS2100\"), getTagSet(\"cheatSheetsFTW\")),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        new Task(new Name(\"CS2103T Project\"), new Deadline(\"13-Sep-2021 1500\", false),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                new CompletionStatus(50), new TaskDescription(\"I love project work\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                getModuleCodeSet(\"CS2103T\"), getTagSet(\"EthanSGKK\")),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        new Task(new Name(\"CS2101 OP2\"), new Deadline(\"14-Apr-2021 1010\", false),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                new CompletionStatus(0), new TaskDescription(\"All the best Good Luck\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                getModuleCodeSet(\"CS2101\"), getTagSet(\"20Percent\")),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        new Task(new Name(\"CS1231S Graded Assignment\"), new Deadline(\"25-Dec-2021 0000\", false),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                new CompletionStatus(1), new TaskDescription(\"JustDueet\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "                getModuleCodeSet(\"CS1231S\"), getTagSet(\"Assignment\"))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    };"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private final Module[] modules \u003d new Module[] {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        new Module(\"Asking Questions\", new ModuleCode(\"GEQ1000\")),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        new Module(\"Quantitative Reasoning\", new ModuleCode(\"GER1000\")),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        new Module(\"Programming Methodology\", new ModuleCode(\"CS1101S\")),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        new Module(\"Computer Organization\", new ModuleCode(\"CS2100\")),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        new Module(\"Software Engineering\", new ModuleCode(\"CS2103T\")),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        new Module(\"Effective Communication for Computing Professionals\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                    new ModuleCode(\"CS2101\")),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        new Module(\"Discrete Structures\", new ModuleCode(\"CS1231S\")),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        new Module(\"Thai 1\", new ModuleCode(\"LAT1201\"))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    };"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private final Event[] events \u003d new Event[]{"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        new Event(new EventName(\"CS2103T Final Exam\"), new EventDate(\"02-Dec-2020\", false)),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        new Event(new EventName(\"CS2103T Practical Exam Dry Run\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                new EventDate(\"30-10-2020\", false)),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        new Event(new EventName(\"CS2103T Practical Exam\"), new EventDate(\"13-Nov-2020\", false)),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        new Event(new EventName(\"Han Wei Birthday\"), new EventDate(\"09-10-2020\", false)),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        new Event(new EventName(\"CS2101 OP2 Demo\"), new EventDate(\"03-11-2020\", false)),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        new Event(new EventName(\"CS2101 OP2 Pitch\"), new EventDate(\"06-11-2020\", false)),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        new Event(new EventName(\"Christmas\"), new EventDate(\"25-Dec-2020\", false)),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    };"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testGetSampleData() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertArrayEquals(SampleDataUtil.getSampleTasks(), tasks);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void testGetSampleModules() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertArrayEquals(SampleDataUtil.getSampleModules(), modules);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void testGetSampleEvents() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertArrayEquals(SampleDataUtil.getSampleEvents(), events);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void testGetSampleTr4cker_doesNotThrow() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertDoesNotThrow(SampleDataUtil::getSampleTr4cker);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 48,
      "hanweic53": 29,
      "cwenling": 24,
      "ethan-l-m-e": 21
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/storage/JsonAdaptedEventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cwenling"
        },
        "content": "package seedu.tr4cker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.storage.JsonAdaptedEvent.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.EVENT2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cwenling"
        },
        "content": "public class JsonAdaptedEventTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private static final String INVALID_EVENT_NAME \u003d \"BBY\u0027S An!ver5ary\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private static final String INVALID_EVENT_DATE \u003d \"2020+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private static final String VALID_EVENT_NAME \u003d EVENT2.getEventName().toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private static final String VALID_EVENT_DATE \u003d EVENT2.getEventDate().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void toModelType_validEventDetails_returnsEvent() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(EVENT2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertEquals(EVENT2, event.toModelType());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void toModelType_invalidEventName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        JsonAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cwenling"
        },
        "content": "                new JsonAdaptedEvent(INVALID_EVENT_NAME, VALID_EVENT_DATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String expectedMessage \u003d EventName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void toModelType_nullEventName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(null, VALID_EVENT_DATE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EventName.class.getSimpleName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_EVENT_NAME, INVALID_EVENT_DATE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String expectedMessage \u003d EventDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_EVENT_NAME, null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EventDate.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cwenling"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cwenling": 56
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/storage/JsonAdaptedTaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.storage.JsonAdaptedTask.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.TASK2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.task.CompletionStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.task.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.task.TaskDescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class JsonAdaptedTaskTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private static final String INVALID_DEADLINE \u003d \"2020+\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private static final int INVALID_COMPLETION_STATUS \u003d -1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private static final String INVALID_MODULE_CODE \u003d \"@code\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static final String VALID_NAME \u003d TASK2.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static final String VALID_DEADLINE \u003d TASK2.getDeadline().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static final int VALID_COMPLETION_STATUS \u003d TASK2.getCompletionStatus().value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d TASK2.getTaskDescription().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private static final List\u003cJsonAdaptedModuleCode\u003e VALID_MODULE_CODE \u003d TASK2.getModuleCode()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            .stream().map(JsonAdaptedModuleCode::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d TASK2.getTags().stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void toModelType_validTaskDetails_returnsTask() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(TASK2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        assertEquals(TASK2, task.toModelType());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                new JsonAdaptedTask(INVALID_NAME, VALID_DEADLINE, VALID_COMPLETION_STATUS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                        VALID_DESCRIPTION, VALID_MODULE_CODE, VALID_TAGS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(null, VALID_DEADLINE, VALID_COMPLETION_STATUS,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                VALID_DESCRIPTION, VALID_MODULE_CODE, VALID_TAGS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void toModelType_invalidDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                VALID_NAME, INVALID_DEADLINE, VALID_COMPLETION_STATUS, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                VALID_MODULE_CODE, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String expectedMessage \u003d Deadline.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public void toModelType_nullDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(VALID_NAME, null, VALID_COMPLETION_STATUS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                VALID_DESCRIPTION, VALID_MODULE_CODE, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Deadline.class.getSimpleName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void toModelType_invalidCompletionStatus_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                VALID_NAME, VALID_DEADLINE, INVALID_COMPLETION_STATUS, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                VALID_MODULE_CODE, VALID_TAGS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        String expectedMessage \u003d CompletionStatus.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public void toModelType_invalidTaskDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                VALID_NAME, VALID_DEADLINE, VALID_COMPLETION_STATUS, INVALID_DESCRIPTION,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                VALID_MODULE_CODE, VALID_TAGS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        String expectedMessage \u003d TaskDescription.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public void toModelType_nullTaskDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(VALID_NAME, VALID_DEADLINE, VALID_COMPLETION_STATUS,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                null, VALID_MODULE_CODE, VALID_TAGS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, TaskDescription.class.getSimpleName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public void toModelType_invalidModuleCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        List\u003cJsonAdaptedModuleCode\u003e invalidModuleCode \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        invalidModuleCode.add(new JsonAdaptedModuleCode(INVALID_MODULE_CODE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                VALID_NAME, VALID_DEADLINE, VALID_COMPLETION_STATUS, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                invalidModuleCode, VALID_TAGS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        assertThrows(IllegalValueException.class, task::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                VALID_NAME, VALID_DEADLINE, VALID_COMPLETION_STATUS, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "                VALID_MODULE_CODE, invalidTags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(IllegalValueException.class, task::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 16,
      "yingqi0607": 11,
      "hanweic53": 7,
      "cwenling": 6,
      "-": 51,
      "ethan-l-m-e": 34
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/storage/JsonSerializableTr4ckerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Tr4cker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class JsonSerializableTr4ckerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTr4ckerTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static final Path TYPICAL_TASKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalTasksTr4cker.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static final Path INVALID_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTaskTr4cker.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static final Path DUPLICATE_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateTaskTr4cker.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void toModelType_typicalTasksFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        JsonSerializableTr4cker dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_TASKS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                JsonSerializableTr4cker.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Tr4cker tr4ckerFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Tr4cker typicalTasksTr4cker \u003d TypicalTasks.getTypicalTr4cker();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(tr4ckerFromFile, typicalTasksTr4cker);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void toModelType_invalidTaskFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        JsonSerializableTr4cker dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TASK_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                JsonSerializableTr4cker.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void toModelType_duplicateTasks_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        JsonSerializableTr4cker dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_TASK_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                JsonSerializableTr4cker.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableTr4cker.MESSAGE_DUPLICATE_TASK,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 47
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/storage/JsonTr4ckerStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.TASK1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.TASK_H;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.TASK_I;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.getTypicalTr4cker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ReadOnlyTr4cker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Tr4cker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class JsonTr4ckerStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonTr4ckerStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void readTr4cker_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readTr4cker(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private java.util.Optional\u003cReadOnlyTr4cker\u003e readTr4cker(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return new JsonTr4cker(Paths.get(filePath)).readTr4cker(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(readTr4cker(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTr4cker(\"notJsonFormatTr4cker.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void readTr4cker_invalidTaskTr4cker_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTr4cker(\"invalidTaskTr4cker.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void readTr4cker_invalidAndValidTaskTr4cker_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTr4cker("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                \"invalidAndValidTaskTr4cker\" + \".json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void readAndSaveTr4cker_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempTr4cker.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Tr4cker original \u003d getTypicalTr4cker();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        JsonTr4cker jsonTr4ckerStorage \u003d new JsonTr4cker(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        jsonTr4ckerStorage.saveTr4cker(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        ReadOnlyTr4cker readBack \u003d jsonTr4ckerStorage.readTr4cker(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(original, new Tr4cker(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        original.addTask(TASK_H);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        original.removeTask(TASK1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        jsonTr4ckerStorage.saveTr4cker(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        readBack \u003d jsonTr4ckerStorage.readTr4cker(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(original, new Tr4cker(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        original.addTask(TASK_I);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        jsonTr4ckerStorage.saveTr4cker(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        readBack \u003d jsonTr4ckerStorage.readTr4cker().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(original, new Tr4cker(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void saveTr4cker_nullTr4cker_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTr4cker(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Saves {@code tr4cker} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private void saveTr4cker(ReadOnlyTr4cker tr4cker, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            new JsonTr4cker(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    .saveTr4cker(tr4cker, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void saveTr4cker_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTr4cker(new Tr4cker(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 104,
      "hanweic53": 6,
      "cwenling": 1
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void getUserPrefsFilePath_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(TEST_DATA_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(jsonUserPrefsStorage.getUserPrefsFilePath(), TEST_DATA_FOLDER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        userPrefs.setTr4ckerFilePath(Paths.get(\"tr4cker.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 11,
      "cwenling": 1,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.TypicalTasks.getTypicalTr4cker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.ReadOnlyTr4cker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Tr4cker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        JsonTr4cker tr4ckerStorage \u003d new JsonTr4cker(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        storageManager \u003d new StorageManager(tr4ckerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void tr4ckerReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "         * {@link JsonTr4cker} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonTr4ckerStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Tr4cker original \u003d getTypicalTr4cker();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        storageManager.saveTr4cker(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        ReadOnlyTr4cker retrieved \u003d storageManager.readTr4cker().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(original, new Tr4cker(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void getTr4ckerFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertNotNull(storageManager.getTr4ckerFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 17,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/testutil/EditTaskDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.task.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.task.TaskDescription;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * A utility class to help with building EditTaskDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class EditTaskDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final EditTaskDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public EditTaskDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        descriptor \u003d new EditCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public EditTaskDescriptorBuilder(EditCommand.EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditTaskDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns an {@code EditTaskDescriptor} with fields containing {@code task}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public EditTaskDescriptorBuilder(Task task) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        descriptor \u003d new EditCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        descriptor.setName(task.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        descriptor.setDeadline(task.getDeadline());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        descriptor.setDescription(task.getTaskDescription());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        descriptor.setTags(task.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Sets the {@code Name} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public EditTaskDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Sets the {@code Deadline} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public EditTaskDescriptorBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        descriptor.setDeadline(new Deadline(deadline, false));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Sets the {@code description} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public EditTaskDescriptorBuilder withTaskDescription(String description) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        descriptor.setDescription(new TaskDescription(description));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditTaskDescriptor}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public EditTaskDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public EditCommand.EditTaskDescriptor build() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 69,
      "yingqi0607": 5,
      "hanweic53": 1,
      "cwenling": 4
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/testutil/TaskBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.ModuleCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.task.CompletionStatus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.task.TaskDescription;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * A utility class to help with building Task objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class TaskBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Task1 Name\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final String DEFAULT_DEADLINE \u003d \"01-Dec-2021 2359\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final int DEFAULT_COMPLETION_STATUS \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Task 1 description\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private CompletionStatus completionStatus;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    private TaskDescription taskDescription;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    private Set\u003cModuleCode\u003e moduleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Creates a {@code TaskBuilder} with the default details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public TaskBuilder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        deadline \u003d new Deadline(DEFAULT_DEADLINE, false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        completionStatus \u003d new CompletionStatus(DEFAULT_COMPLETION_STATUS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        taskDescription \u003d new TaskDescription(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        moduleCode \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        tags.add(new Tag(\"homework\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Initializes the TaskBuilder with the data of {@code taskToCopy}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public TaskBuilder(Task taskToCopy) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        name \u003d taskToCopy.getName();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        deadline \u003d taskToCopy.getDeadline();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        completionStatus \u003d taskToCopy.getCompletionStatus();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        taskDescription \u003d taskToCopy.getTaskDescription();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        moduleCode \u003d new HashSet\u003c\u003e(taskToCopy.getModuleCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(taskToCopy.getTags());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Sets the {@code Name} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public TaskBuilder withName(String name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Sets the {@code moduleCode} to a new {@code Set\u003cModuleCode\u003e}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Parses the {@code codeName} into a {@code ModuleCode} adds it to {@code moduleCode} of"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * the {@code Task} we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public TaskBuilder withModule(String codeName) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        this.moduleCode \u003d SampleDataUtil.getModuleCodeSet(codeName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Task} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public TaskBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "     * Sets the {@code description} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public TaskBuilder withTaskDescription(String description) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        this.taskDescription \u003d new TaskDescription(description);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Sets the {@code Deadline} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public TaskBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        this.deadline \u003d new Deadline(deadline, false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * Sets the {@code CompletionStatus} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "     * @param completionStatus"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public TaskBuilder withCompletionStatus(int completionStatus) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        this.completionStatus \u003d new CompletionStatus(completionStatus);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Task build() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return new Task(name, deadline, completionStatus, taskDescription, moduleCode, tags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 73,
      "yingqi0607": 7,
      "hanweic53": 3,
      "cwenling": 5,
      "ethan-l-m-e": 24
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/testutil/TaskUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.parser.CliSyntax.PREFIX_TASK_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * A utility class for Task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class TaskUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns an add command string for adding the {@code task}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static String getAddCommand(Task task) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getTaskDetails(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns the part of command string for the given {@code task}\u0027s details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static String getTaskDetails(Task task) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        sb.append(PREFIX_NAME + task.getName().taskName + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        sb.append(PREFIX_DEADLINE + task.getDeadline().toString() + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // completion status not included"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        sb.append(PREFIX_TASK_DESCRIPTION + task.getTaskDescription().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        task.getTags().stream().forEach("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns the part of command string for the given {@code EditTaskDescriptor}\u0027s details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static String getEditTaskDescriptorDetails(EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.taskName).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        descriptor.getDeadline().ifPresent(deadline -\u003e sb.append(PREFIX_DEADLINE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                .append(deadline.toString()).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        // completion status and tags not included"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        descriptor.getTaskDescription()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                .ifPresent(description -\u003e sb.append(PREFIX_TASK_DESCRIPTION).append(description.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 24,
      "yingqi0607": 1,
      "hanweic53": 2,
      "cwenling": 1,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns the middle index of the task in the {@code model}\u0027s task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns the last index of the task in the {@code model}\u0027s task list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns the task in the {@code model}\u0027s task list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static Task getTask(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return model.getFilteredTaskList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/testutil/Tr4ckerBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Tr4cker;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * A utility class to help with building Tr4cker objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " *     {@code Tr4cker ab \u003d new Tr4ckerBuilder().withTask(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class Tr4ckerBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private Tr4cker tr4cker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Tr4ckerBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        tr4cker \u003d new Tr4cker();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Tr4ckerBuilder(Tr4cker tr4cker) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.tr4cker \u003d tr4cker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Adds a new {@code Task} to the {@code Tr4cker} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Tr4ckerBuilder withTask(Task task) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        tr4cker.addTask(task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     * Adds a new {@code Event} to the {@code Tr4cker} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cwenling"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public Tr4ckerBuilder withEvent(Event event) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        tr4cker.addEvent(event);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Tr4cker build() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return tr4cker;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 34,
      "cwenling": 9
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final Index INDEX_FIRST_TASK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final Index INDEX_SECOND_TASK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final Index INDEX_THIRD_TASK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 5,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/testutil/TypicalTasks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_COMPLETION_STATUS_1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_COMPLETION_STATUS_2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_DEADLINE_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_DEADLINE_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_DESCRIPTION_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_DESCRIPTION_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_NAME_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_NAME_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_TAG_HELP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.logic.commands.CommandTestUtil.VALID_TAG_URGENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.Tr4cker;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cwenling"
        },
        "content": "import seedu.tr4cker.model.countdown.EventName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.daily.Todo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.Module;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "import seedu.tr4cker.model.module.ModuleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "import seedu.tr4cker.model.task.Deadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "import seedu.tr4cker.model.task.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.model.task.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * A utility class containing a list of {@code Task} objects to be used in tests."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final Task TASK1 \u003d new TaskBuilder().withName(\"Task1Name\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            .withTaskDescription(\"Task 1 description\").withCompletionStatus(0)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            .withDeadline(\"20-Oct-2021 1800\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            .withTags(\"homework\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final Task TASK1_BEFORE_ADD \u003d new TaskBuilder().withName(\"Task1Name\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            .withTaskDescription(\"Task 1 description\").withCompletionStatus(0)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            .withDeadline(\"20-Oct-2021 1800\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            .withTags(\"tag1\", \"tag2\", \"homework\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final Task TASK1_ADD \u003d new TaskBuilder().withName(\"Task1Name\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            .withTaskDescription(\"Task 1 description\").withCompletionStatus(0)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            .withDeadline(\"20-Oct-2021 1800\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            .withTags(\"tag1\", \"tag2\", \"homework\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final Task TASK1_BEFORE_DELETE \u003d new TaskBuilder().withName(\"Task1Name\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            .withTaskDescription(\"Task 1 description\").withCompletionStatus(0)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            .withDeadline(\"20-Oct-2021 1800\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            .withTags(\"homework\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final Task TASK1_DELETE \u003d new TaskBuilder().withName(\"Task1Name\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            .withTaskDescription(\"Task 1 description\").withCompletionStatus(0)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            .withDeadline(\"20-Oct-2021 1800\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            .withTags(\"homework\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final Task TASK2 \u003d new TaskBuilder().withName(\"Task2 Name\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            .withTaskDescription(\"Task 2 description\").withCompletionStatus(0)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            .withDeadline(\"30-09-2021 2359\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            .withTags(\"graded\", \"assignment\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final Task TASK3 \u003d new TaskBuilder().withName(\"Task3 Name\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            .withDeadline(\"10-03-2021 1200\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            .withCompletionStatus(0).withTaskDescription(\"Task 3 description\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final Task TASK4 \u003d new TaskBuilder().withName(\"Task4 Name\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            .withDeadline(\"21-09-2021 1500\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            .withCompletionStatus(0).withTaskDescription(\"Task 4 description\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final Task TASK5 \u003d new TaskBuilder().withName(\"Task5 Name\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            .withDeadline(\"10-10-2021 1010\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            .withCompletionStatus(0).withTaskDescription(\"Task 5 description\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final Task TASK6 \u003d new TaskBuilder().withName(\"Task6 Name\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            .withDeadline(\"25-12-2021 0000\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            .withCompletionStatus(0).withTaskDescription(\"Task 6 description\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final Task TASK7 \u003d new TaskBuilder().withName(\"Task7 Name\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            .withDeadline(\"01-01-2021 0000\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            .withCompletionStatus(0).withTaskDescription(\"Task 7 description\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            .withTags(\"homework\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final Event EVENT1 \u003d new Event(new EventName(\"Event1 Name\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            new EventDate(\"01-01-2021\", false));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final Event EVENT2 \u003d new Event(new EventName(\"Event2 Name\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            new EventDate(\"10-10-2020\", false));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static final Event EVENT3 \u003d new Event(new EventName(\"Event3 Name\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            new EventDate(\"30-11-2020\", false));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final Module MODULE1 \u003d new Module(// module code can\u0027t have spaces"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \"Module1 Name\", new ModuleCode(\"Module1Code\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final Module MODULE2 \u003d new Module("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \"Module2 Name\", new ModuleCode(\"Module2Code\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static final Module MODULE3 \u003d new Module("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            \"Module3 Name\", new ModuleCode(\"Module3Code\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public static final Todo TODO1 \u003d new Todo(new Name(\"Todo1 Name\"), new Deadline(\"12-Jul-2021 0600\", false));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public static final Todo TODO2 \u003d new Todo(new Name(\"Todo2 Name\"), new Deadline(\"27-Sep-2021 2359\", false));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public static final Todo TODO3 \u003d new Todo(new Name(\"Todo3 Name\"), new Deadline(\"20-Oct-2021 1800\", false));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final Task TASK_H \u003d new TaskBuilder().withName(\"TASK H\").withDeadline(\"12-Jul-2021 0600\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            .withCompletionStatus(0).withTaskDescription(\"Task H description\").build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final Task TASK_I \u003d new TaskBuilder().withName(\"TASK I\").withDeadline(\"27-Sep-2021 2359\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            .withCompletionStatus(0).withTaskDescription(\"Task I description\").build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public static final Task TASK_J \u003d new TaskBuilder().withName(\"TASK J\").withDeadline(\"20-Oct-2021 1800\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            .withCompletionStatus(0).withTaskDescription(\"Task J description\").build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    // Manually added - Task\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final Task MANUAL_TASK1 \u003d new TaskBuilder().withName(VALID_NAME_1).withDeadline(VALID_DEADLINE_1)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            .withCompletionStatus(VALID_COMPLETION_STATUS_1).withTaskDescription(VALID_DESCRIPTION_1)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            .withTags(VALID_TAG_HELP).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static final Task MANUAL_TASK2 \u003d new TaskBuilder().withName(VALID_NAME_2).withDeadline(VALID_DEADLINE_2)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            .withCompletionStatus(VALID_COMPLETION_STATUS_2).withTaskDescription(VALID_DESCRIPTION_2)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            .withTags(VALID_TAG_URGENT, VALID_TAG_HELP).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "    public static final Task MANUAL_TASK_DEFAULT_DEADLINE \u003d new TaskBuilder().withName(VALID_NAME_1)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            .withDeadline(Deadline.DEFAULT_DATE_TODAY + Deadline.DEFAULT_TIME)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            .withCompletionStatus(VALID_COMPLETION_STATUS_1).withTaskDescription(VALID_DESCRIPTION_1)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            .withTags(VALID_TAG_HELP).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private TypicalTasks() {} // prevents instantiation"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns an {@code Tr4cker} with all the typical tasks."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static Tr4cker getTypicalTr4cker() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        Tr4cker tr4cker \u003d new Tr4cker();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        for (Module module : getTypicalModules()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "            tr4cker.addModule(module);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        for (Task task : getTypicalTasks()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "            tr4cker.addTask(task);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        for (Event event : getTypicalEvents()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cwenling"
        },
        "content": "            tr4cker.addEvent(event);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        for (Todo todo : getTypicalTodos()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "            tr4cker.addTodo(todo);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hanweic53"
        },
        "content": "        return tr4cker;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(TASK1, TASK2, TASK3, TASK4, TASK5, TASK6, TASK7));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cwenling"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    public static List\u003cEvent\u003e getTypicalEvents() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cwenling"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(EVENT1, EVENT2, EVENT3));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cwenling"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    public static List\u003cModule\u003e getTypicalModules() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(MODULE1, MODULE2, MODULE3));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ethan-l-m-e"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    public static List\u003cTodo\u003e getTypicalTodos() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(TODO1, TODO2, TODO3));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yingqi0607"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 40,
      "yingqi0607": 25,
      "hanweic53": 31,
      "cwenling": 18,
      "-": 22,
      "ethan-l-m-e": 15
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/tr4cker/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package seedu.tr4cker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static seedu.tr4cker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import seedu.tr4cker.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import seedu.tr4cker.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003cfx:root type\u003d\"seedu.tr4cker.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 1,
      "-": 5
    }
  }
]
