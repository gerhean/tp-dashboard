[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "# McGymmy Diet tracker"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W17-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W17-3/tp/actions)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* McGymmy is a CLI based application for sedentary software engineers to manage their diet and stay healthy."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  * The CLI aspect of the application benefits the target audience (software engineers), as it is something often used by them."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* For the detailed documentation of this project, see the **[McGymmy Product Website](https://ay2021s1-cs2103t-w17-3.github.io/tp/)**."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "## Extras"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5), [Apache Commons CLI](https://commons.apache.org/proper/commons-cli/), [Jfoenix](http://www.jfoenix.com/)"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "dcchan98": 1,
      "jh123x": 5,
      "joeychensmart": 3,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "mainClassName \u003d \u0027jimmy.mcgymmy.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    implementation group: \u0027commons-cli\u0027, name: \u0027commons-cli\u0027, version: \u00271.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    implementation group: \u0027com.jfoenix\u0027, name: \u0027jfoenix\u0027, version: \u00279.0.9\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    archiveName \u003d \u0027mcgymmy.jar\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "run {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    jvmArgs \u003d ["
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"--add-exports\u003djavafx.controls/com.sun.javafx.scene.control.behavior\u003dcom.jfoenix\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"--add-exports\u003djavafx.controls/com.sun.javafx.scene.control\u003dcom.jfoenix\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"--add-exports\u003djavafx.base/com.sun.javafx.binding\u003dcom.jfoenix\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"--add-exports\u003djavafx.graphics/com.sun.javafx.stage\u003dcom.jfoenix\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"--add-exports\u003djavafx.controls/com.sun.javafx.scene.control.behavior\u003dcom.jfoenix\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jh123x": 13,
      "joeychensmart": 1,
      "-": 72,
      "aidoxe-123": 4
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### Sean Chan Ding Chao"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cimg src\u003d\"images/dcchan98.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[homepage](https://ay2021s1-cs2103t-w17-3.github.io/tp/)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[github](https://github.com/dcchan98)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "[portfolio](team/dcchan98)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### Kamil Gimik"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cimg src\u003d\"images/chewypiano.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[github](http://github.com/chewypiano)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "[portfolio](team/chewypiano)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### Joey Chen De\u0027en"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cimg src\u003d\"images/joeychensmart.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[github](https://github.com/JoeyChenSmart)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "[portfolio](team/joeychensmart)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### Huynh Thai Duong"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cimg src\u003d\"images/aidoxe-123.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[github](http://github.com/aidoxe-123)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "[portfolio](team/aidoxe-123)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### Wen Junhua"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cimg src\u003d\"images/jh123x.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[github](http://github.com/Jh123x)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "[portfolio](team/jh123x)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Responsibilities:"
      }
    ],
    "authorContributionMap": {
      "dcchan98": 1,
      "jh123x": 22,
      "joeychensmart": 5,
      "-": 34
    }
  },
  {
    "path": "docs/DevOps.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: DevOps guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are how to use Gradle for some important project tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew shadowJar`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **`run`**: Builds and runs the application.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  **`runShadow`**: Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  **`checkstyleTest`**: Runs the code style check for the test code base."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`**: Runs all tests.\u003c"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew test` — Runs all tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew clean test` — Cleans the project and runs tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## Continuous integration (CI)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "### Code coverage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork of this repository."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. Once you are inside Codecov web app, add your fork to CodeCov."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/AY2021S1-CS2103T-W17-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3) in that page reflects the coverage of your project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "### Repository-wide checks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "`./config/travis/run-checks.sh`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "**If adding new checks:**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  * SEVERITY is either ERROR or WARN."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  * FILENAME is the path to the file relative to the current directory."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts must exit with a non-zero exit code if any errors occur."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "## Making a release"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. Update the version number in [`MainApp.java`](https://github.com/AY2021S1-CS2103T-W17-3/tp/blob/master/src/main/java/jimmy/mcgymmy/MainApp.java)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "1. Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."
      }
    ],
    "authorContributionMap": {
      "jh123x": 2,
      "-": 77
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "## 1. **Purpose of this guide**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "This guide is made to help developers understand how McGymmy (MG) works."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "One of the major goals is to centralise all the jimmy.mcgymmy documentation within McGymmy itself."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Another major goal is to better help developers extend McGymmy to improve on its features."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "##  2. Icon Legend"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": ":bulb: **Tip:** This indicates that the following text consists of tips to better utilise MG"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": ":information_source: **Note:** This indicates important notes for current feature we are looking at\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "## 3. A little note from the developers"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Thank you for using MG. We sincerely hope that MG plays a part to help you achieve a healthier lifestyle."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "We understand that MG may be a little different from traditional GUI applications and it may be a little difficult to start using it initially."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Thus, we recommend you to start by first understanding how MG works at a high level at the Quick start section. Then, explore the Features section."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": ":bulb: **Tip:** Press Ctrl-F to open the find prompt in your browser. You can type in keywords such as `add` or `edit` to quickly navigate to those parts of the document."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "## 4. **General Information**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "McGymmy (MG) is a **desktop app for managing diet and exercise, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, McGymmy can log your diet and exercise tasks, goals and progress done faster than traditional GUI apps."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "## 5. **Setting up, getting started**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "## 6. **Design**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 6.1 Architecture"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" alt\u003d\"Architectural diagram\"/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-W17-3/tp/tree/master/src/main/java/jimmy/mcgymmy/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-W17-3/tp/tree/master/src/main/java/jimmy/mcgymmy/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" alt\u003d\"Architecture Sequence Diagram\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 6.2 UI component"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-W17-3/tp/tree/master/src/main/java/jimmy/mcgymmy/ui/Ui.java)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `FoodListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-W17-3/tp/tree/master/src/main/java/jimmy/mcgymmy/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-W17-3/tp/tree/master/src/main/resources/view/MainWindow.fxml)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 6.3 Logic component"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-W17-3/tp/tree/master/src/main/java/jimmy/mcgymmy/logic/Logic.java)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "We omit details of the `Macro` component in this section and will only focus on the parsing and execution of non-macro `Command`s."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "For more information on macros and the full parsing process please read the section below."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. `Logic` uses the `McGymmyParser` class to parse the user command."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "1. This results in a `CommandExecutable` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a food item)."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Note that our implementation of this component is different from the one in the parent project, [AddressBook3](https://se-education.org/addressbook-level3/)."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "One notable difference is the use of several `Parameter` classes in the various `Commands`."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "We list a few of the benefits of our redesigned solution below."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "1. The main motivation for this change was to facilitate the addition of the `macro` feature."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "2. The old design of the parser operated at too high an abstraction level, resulting in the developer having to create boilerplate objects like the `EditPersonDescriptor` to implement basic functionality."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "3. The new design allows us to code in a more declarative style which is more readable and arguably \"self-documenting\"."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "4. Hiding details of each `Parameter` behind an additional layer of abstraction allows us to automate the creation of other features such as parsers for each individual `Command` and automatially generating `help` strings."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "For more details on the new architecture you can refer to this [pull request](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/39)."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "In particular, details on how to create new `Command`s are included in the pull request above."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 6.4 Model component"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-W17-3/tp/tree/master/src/main/java/jimmy/mcgymmy/model/Model.java)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* stores the McGymmy data."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cFood\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in `McGymmy`, which `Food` references. This allows `McGymmy` to only require one `Tag` object per unique `Tag`, instead of each `Food` needing their own `Tag` object."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 6.5 Storage component"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-W17-3/tp/tree/master/src/main/java/jimmy/mcgymmy/storage/Storage.java)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* can save `UserPref` objects in JSON format and read it back."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* can save the McGymmy data in JSON format and read it back."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 6.6 Common classes"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Classes used by multiple components are in the `jimmy.mcgymmy.commons` package."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jh123x"
        },
        "content": "## 7. **Implementation**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 7.1 Clear feature"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "The clear feature extends model with the ability to delete all the items shown in the UI."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jh123x"
        },
        "content": "#### 7.1.1 Implementation"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "Given below is an example usage scenario and how the clear mechanism works"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "Step 1. The user has decided that he wants to delete all filtered items based on taggings or names."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "Step 2. The user uses the find command to search for the items to delete."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "Step 3. The User executes `clear`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "The clear command will update the model to delete every occurences of food shown on the UI."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "Otherwise, a CommandException will be thrown."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "Step 4. Storage is then updated to be the same as model."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "The following sequence diagram shows how the clear operation works:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "![ClearSequenceDiagram](images/ClearSequenceDiagram.png)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jh123x"
        },
        "content": "#### 7.1.2 Design Considerations"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jh123x"
        },
        "content": "##### 7.1.2.1 Aspect: How clear executes"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "* **Alternative 1 (Current Choice):** A refilter using predicate into a list and reupdate food items."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    * Pros: No traversal issue and no issue when food definition changes"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    * Cons: Hard to implement"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "* **Alternative 2:** An enhanced for loop can be used to remove all occurences straight from the list."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    * Pros: Cleaner code and smaller and time space complexity"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    * Cons: Code may break if food properties ever changes due to traversal error."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 7.2 Find feature"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jh123x"
        },
        "content": "#### 7.2.1 Implementation"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "The find mechanism is facilitated by `ModelManager`. It keeps a filtered list (updated via a specified `Predicate`) of food items,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "stored internally as a `FilteredList\u003cFood\u003e`. Additionally, it implements the following relevant operation:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* `ModelManager#updateFilteredFoodList(Predicate\u003cFood\u003e)` - Filters internal storage via a `Predicate\u003cFood\u003e` specification."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Given below is an example usage scenario and how the find mechanism behaves at each step."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Step 1. The user launches the application after having used it for a while."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Step 2. The user wants to find what he ate for dinner on a certain date (eg. 21-10-2020)."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Step 3. The user executes `find -n apple -t fruit`. The `find` command will check if the inputs are valid, and then parsed (similar to `delete`)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "before using these inputs to create conditional `Predicate\u003cFood\u003e` instances (eg. `NameContainsKeywordsPredicate`, `DatePredicate`). The predicates"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "are then combined and used to filter the `FilteredList\u003cFood\u003e`. The GUI will then display the food items in the filtered list."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "The following sequence diagram shows how the find operation works:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "![FindSequenceDiagram](images/FindSequenceDiagram.png)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The method Parser::parse is a simplification of the overall parsing sequence which was already covered in showcasing the execution of the delete method. As such, redundant parsing details are not covered here."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jh123x"
        },
        "content": "#### 7.2.2 Design consideration:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jh123x"
        },
        "content": "##### 7.2.2.1 Aspect: Arguments for FindCommand"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* **Alternative 1 (current choice):** Completely optional parameters, and ability to `find item` without a `flag`."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  * Pros: More flexibility for user, not restricted by parameter requirements."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  * Cons: Harder to implement, breaks general patten of `flag`-less arguments being compulsory parameters."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* **Alternative 2:** Compulsory `flag`-less name parameter"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  * Pros: Easier to implement."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  * Cons: Less user-friendly, user restricted in use of method"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jh123x"
        },
        "content": "##### 7.2.2.2 Aspect: How find works"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* **Alternative 1 (current choice):** Filters Food with matching instance of at least one (assuming multiple arguments) argument for a given parameter"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  * Pros: Easier to implement and easier to locate more things quickly."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  * Cons: Harder to locate specific food items."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* **Alternative 2:** Filters Food with matching instance of all arguments for a given parameter"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  * Pros: Can locate specific food items easily; more narrowed-down search."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  * Cons: More difficult to find something over broad terms."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* **Alternative 3 (proposed best choice):** Allow variation in type of filtering through another optional parameter."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  * Pros: Combined Pros of Alternative 1 and 2, gives user greater autonomy."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  * Cons: Harder to implement, harder to use effectively."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 7.3 Import feature"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jh123x"
        },
        "content": "The current Import feature is facilitated by `JsonMcGymmyStorage`."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jh123x"
        },
        "content": "It extends model with the ability to override the current data with an imported one."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jh123x"
        },
        "content": "#### 7.3.1 Implementation"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Given below is an example usage scenario and how the import mechanism behaves at each step"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Step 1. The User just installed his application on his new computer and wants to transfer his old data over"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Step 2. The user transfers his previous save file to `C:/McGymmy/saveFile.json`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Step 3. The User executes `import c:/McGymmy/saveFile.json`."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jh123x"
        },
        "content": "The import command will check if the file is valid and exists before calling `JsonMcGymmyStorage`."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jh123x"
        },
        "content": "`JsonMcGymmyStorage` will call `#readMcGymmy` if the read is successful, the old data will be overwritten."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Otherwise, a CommandException will be thrown."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Step 4. His old data files from his old computer will be overridden by his old data"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jh123x"
        },
        "content": "The following sequence diagram shows how the import operation works:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jh123x"
        },
        "content": "![ImportSequenceDiagram](images/ImportSequenceDiagram.png)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The method Parser::parse is a simplification of the overall parsing sequence which was already covered in showcasing the execution of the delete method. As such, redundant parsing details are not covered here."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jh123x"
        },
        "content": "#### 7.3.2 Design Considerations"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jh123x"
        },
        "content": "##### 7.3.2.1 Aspect: How import executes"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* **Alternative 1 (Current Choice):** User keys in the filepath of the save file"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    * Pros: Easy to implement"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    * Cons: Requires the user to key in path to file"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* **Alternative 2:** User keys in path and McGymmy checks subdirectories for valid files"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    * Pros: More convenient for the users"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    * Cons: Increased implementation complexity (Prone to bugs), May have performance issues in terms of runtime."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 7.4 Undo feature"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jh123x"
        },
        "content": "#### 7.4.1 Implementation"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "The proposed undo mechanism is facilitated by `ModelManager` and `History`."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "`History` pairs `ReadOnlyMcGymmy` and `Predicate\u003cFood\u003e` gotten from `ModelManager` into a pair, then store multiple pairs of different versions in a stack, with the most recent version on top."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Whenever there is a change to either `ModelManager`\u0027s data, filter predicate, or macro list, `ModelManager` will pass itself into `History` to be saved into the stack."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Additionally, `ModelManager` implements the following operations:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* `ModelManager#canUndo()` - Checks if there is any older state stored in history."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* `ModelManager#undo()` - Restores the previous McGymmy state from its history."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* `ModelManager#saveCurrentStateToHistory()` - Saves the current McGymmy state in its history."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "The first 2 operations are exposed in the `Model` interface as `Model#canUndo()` and `Model#undo()` respectively."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Given below is an example usage scenario and how the undo mechanism behaves at each step."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Step 1. The user launches the application for the first time. The `ModelManager` will be initialized with the empty `mcGymmyStack`."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "![UndoState0](images/UndoState0.png)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th food item in the McGymmy."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "The `delete` command calls `ModelManager#deleteFood(Index)`, which calls `ModelManager#addCurrentStateToHistory()`,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "causing the stack to store a copied version of the McGymmy before any data changes happen."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Then McGymmy changes accordingly to delete the food at index 5."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "![UndoState1a](images/UndoState1a.png)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "![UndoState1b](images/UndoState1b.png)"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Step 3. The user executes `add -n Rice …​` to add a new food item. The `add` command calls `ModelManager#addFood(Food)`, which also calls `ModelManager#addCurrentStateToHistory()`,"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "storing a copied version of the McGymmy into the stack before changing the McGymmy."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "![UndoState2a](images/UndoState2a.png)"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "![UndoState2a](images/UndoState2b.png)"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `ModelManager#addCurrentStateToHistory()`, so the McGymmy state will not be saved into the `mcGymmyStack`."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Step 4. The user now decides that adding the food item was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `ModelManager#undo()`,"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "which will pop the top most state from `mcGymmyStack`, and restores the McGymmy to that state."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "![UndoState3](images/UndoState3.png)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial McGymmy state, then there are no previous McGymmy states to restore. The `undo` command uses `Model#canUndoMcGymmy()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The method Parser::parse is a simplification of the overall parsing sequence which was already covered in showcasing the execution of the delete method. As such, redundant parsing details are not covered here."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The method ModelManager::updateModelManager is a simplification of updating the McGymmy, updating the filterPredicate and updating the filteredFoodList separately."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "![AddToHistoryActivityDiagram](images/AddToHistoryActivityDiagram.png)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jh123x"
        },
        "content": "#### 7.4.2 Design consideration:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jh123x"
        },
        "content": "##### 7.4.2.1 Aspect: How undo executes"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire ModelManger database."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo by"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the food item being deleted)."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 7.5 Macro Command"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "![Structure of the Macro Component](images/MacroClassDiagram.png)"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "As with the other class diagram for the *Logic* component above, we omit some details in the above diagram for clarity."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Macros are a way for users to create shortcuts to run several commands in succession, with arguments. For more information please refer to the user guide."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "There are two \u0027parts\u0027 to the macro component:"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "1. The creation of the macro object itself (e.g. running `macro test a; add -n \\a breakfast -c 100`)."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "2. The execution of the macro object (e.g. running `test -a tau sar pau`)."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "The creation of the macro object is straightforward as we defer most of the heavy lifting to during the execution of the macro."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jh123x"
        },
        "content": "#### 7.5.1 A more complete picture of the parsing process"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "We only described parsing and execution of primitive commands in the section above."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "A short description of the process including the parsing of macros is as follows:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "1. If command word is `macro`, return a `NewMacroCommand` (which will create a new `macro` when executed)."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "2. Else if command word is an existing macro, call the `asCommandInstance` method in the `MacroRunner` class to create a `CommandExecutable` from the macro and return that."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "3. Else hand over to primitive command parser."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "#### 7.5.2 Structure of the macro classes"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "The main data objects for macros are the `Macro` and `MacroList` classes. These are stored in the `Model`."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "`Macro` is an immutable container containing data such as the name, arguments to and commands to execute in the macro as strings."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "`MacroList` is an immutable container of `Macro`s."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Lastly, the `MacroRunner` utility class in the `Logic` component is responsible for turning these `Macro` data objects into `CommandExecutable` objects that can be run."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "#### 7.5.3 Execution of macros"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Here we detail what exactly happens in each macro\u0027s `toCommandExecutable` object."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Throughout this section, we will use the following macro as an example: `macro test a;add -n \\a breakfast 200`."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "1. Parameters supplied by the user are substituted into the macro\u0027s lines using regular expressions. For the example if the user enters `test -a rice`, `rice` will be substituted into the `\\a` part of `add -n \\a breakfast 200` to obtain `add -n rice breakfast 200`;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "2. Pass the list of strings to a new instance of `PrimitiveCommandParser` to get a list of `Command`s. If a `ParseException` occurs, we recast it as a `CommandException` and re-throw it."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "3. Execute all these `Command`s in sequence, and return a new `CommandResult` created from concatenating the respective `CommandResults` returned by the `Command`s. If a `CommandException` occurs in this sequence, that exception is thrown with the added message listing the commands that have executed successfully, and commands that have yet to be executed."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Below is a sequence diagram summarizing the main interactions."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "![Sequence diagram for macro](images/MacroSequenceDiagram.png)"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jh123x"
        },
        "content": "#### 7.5.3 Additional considerations for this implementation"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Alternatively could have done the parsing/compiling on creation of the macro so we don\u0027t need to use another parser during execution."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "That is, each macro instance could contain its own `ParameterSet` which could then be used by its callee functions."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "This implementation is considerably more involved hence we proceeded with the current implementation."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jh123x"
        },
        "content": "## 8. **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jh123x"
        },
        "content": "## 9. **Appendix: Requirements**"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 9.1 Product scope"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* has a need to manage food intake"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* is sedentary people who sit in front of their computers"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* manage food intake faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* reduce the risk of health issues for people with an unhealthy lifestyle"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* help them develop a healthy lifestyle through diet"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* help them track their calorie intake"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* find trends in their eating habits"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* profile setting for them to store different settings"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 9.2 User stories"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "| Priority | As a/an …​                                  | I want to …​                            | So that I can…​                                                         |"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "| -------- | ------------------------------------------ | -------------------------------------- | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | new user                                   | see usage instructions                 | refer to instructions when I forget how to use the App                 |"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "| `* * *`  | user                                       | track what I am eating                 |                                                                        |"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "| `* * *`  | user                                       | delete a food item                     | remove food items that I no longer care of                             |"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "| `* * *`  | user                                       | easily add food items/details          | keep track of my diet                                                  |"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "| `* *`    | frequent user                              | perform tasks on a group of food items |                                                                        |"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "| `* *`    | expert user                                | create shortcuts for tasks             | frequently performed tasks                                             |"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "| `*`      | programmer                                 | make use of the CLI like design        | get used to CLI in the future                                          |"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 9.3 Use cases"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "jh123x"
        },
        "content": "(For all use cases below, the **System** is `McGymmy` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "**Use case: UC01 List food**"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "1. User requests to list food (UC01)"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "2. McGymmy shows a list of food that user has added (UC02)"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "**Use case: UC02 Add food**"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "1. User requests to add food into the list"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "2. McGymmy adds the food item into the list"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jh123x"
        },
        "content": "- 1a. The format of add method is invalid"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    1a1. McGymmy shows an error message"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**Use case: UC03 Delete food**"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. User requests to list food (UC01)"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "jh123x"
        },
        "content": "2. McGymmy shows a list of food"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jh123x"
        },
        "content": "3. User request to delete a specific food on the list"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jh123x"
        },
        "content": "4. McGymmy deletes the food"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jh123x"
        },
        "content": "- 2a. The list is empty\u003cbr\u003e"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jh123x"
        },
        "content": "- 3a. The given index is invalid.\u003cbr\u003e"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jh123x"
        },
        "content": "   - 3a1. McGymmy shows an error message."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "**Use case: UC04 Help**"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "1. User requests help"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "2. McGymmy shows all commands and examples of command usages"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "No extensions"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "**Use case: UC05 Update food**"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "1. User requests to list food (UC01)"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "2. McGymmy shows a list of food"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "3. User request to update a specific food on the list"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "4. McGymmy updates the food"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jh123x"
        },
        "content": "- 2a. The list is empty\u003cbr\u003e"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jh123x"
        },
        "content": "- 3a. The given index is invalid.\u003cbr\u003e"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "   - 3a1. McGymmy shows an error message"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "**Use case: UC06 Add a macro command**"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "1. User creates a macro to execute two \u0027add\u0027 commands in sequence"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "2. McGymmy adds the macro to the list of available commands"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "3. User uses the newly added macro command"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "4. McGymmy executes the two commands consecutively"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "jh123x"
        },
        "content": " - 1a. The format of the macro is invalid."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    - 1a1. McGymmy shows an error message."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " - 4a. One of the executed commands encounter an error."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    - 4a1. McGymmy shows the error message from that command, and displays the commands that successfully executed, and the commands that have yet to execute."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 9.4 Non-Functional Requirements"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "jh123x"
        },
        "content": "2.  Should be able to hold up to 1000 food items without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "4. The product should be for a single user i.e. (not a multi-user product)."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "5. The data should be stored locally and should be in a human editable text file."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "6. The software should not depend on a private remote server."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "7. The size of the final compiled JAR file should be less than 100Mb."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "8. There should be CLI alternatives to every GUI input. (E.g. instead of clicking on a button I can type an equivalent command to achieve the same result.)"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 9.5 Glossary"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* **Built-in commands**: Any other commands except Macro Command."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* **Command Line Interface (CLI)**: A command-line interface (CLI) processes commands to a computer program in the form of lines of text."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* **Flag**: A dash followed by a letter to denote the start of a parameter. For example, in `-n Chicken Rice`, `-n` is a flag for name and `Chicken Rice` is the input that will be processed by the application."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* **Graphical User Interface (GUI)**: A visual way of interacting with a computer using items such as windows, icons, and menus, used by most modern operating systems."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* **Macro command**: A command that allows you to execute multiple built-in commands sequentially with just one line of input"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* **McGymmy/MG**: The name of this application, can be used interchangeably in this guide."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* **Parameter**: Inputs given to the flag. For example, in `-n Chicken Rice`, `Chicken Rice` is the parameter passed to the flag `-n`."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "jh123x"
        },
        "content": "## 10. **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 10.1 Launch and shutdown"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "   1. Download the JAR file and copy into any folder"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "   1. Double-click the JAR file"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \u003cbr\u003e"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      Expected: Shows the GUI with a set of sample food items. The window size may not be optimum."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "   1. Re-launch the app by double-clicking the JAR file."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \u003cbr\u003e"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 10.2 Deleting food items"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. Deleting a food item while all food items are shown."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "jh123x"
        },
        "content": "   1. Prerequisites: List all food items using the `list` command. Multiple food items in the list."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      Expected: First food item is deleted from the list. Details of the deleted food item shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      Expected: No food item is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 10.3 Saving data"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "   1. Delete the \u0027data\u0027 file if any. Relaunch the app by double-clicking the JAR file."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "jh123x"
        },
        "content": "   \u003cbr\u003e"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "jh123x"
        },
        "content": "   Expected: A new data file is generated"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "jh123x"
        },
        "content": "   1. Open the data file inside the `data` folder using any text editor and edit the file."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "jh123x"
        },
        "content": "   \u003cbr\u003e"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "jh123x"
        },
        "content": "   Expected: A new empty data file is generated which overwrites the old one."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chewypiano": 40,
      "dcchan98": 46,
      "jh123x": 132,
      "joeychensmart": 89,
      "-": 297,
      "aidoxe-123": 64
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "   1. Run the `jimmy.mcgymmy.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 54
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "   e.g. `jimmy.mcgymmy.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "   e.g. `jimmy.mcgymmy.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "   e.g. `jimmy.mcgymmy.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "-": 33
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "McGymmy is a **desktop app for Software Engineers who need help managing their diet, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). While we are primarily targetting software engineers who are familiar with the CLI, those who spend a large amount of time at their desk can still benefit from this application by saving time as opposed to the more traditional caloric tracker applications. \u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "If you can type fast, McGymmy can log your food intake faster than traditional GUI apps. McGymmy aims to help users track their caloric and macronutrient intake in an efficient way that does not interfere with one\u0027s workflow."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "This document aims to showcase all of McGymmy\u0027s commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "Open this document in a modern internet browser (Mozilla Firefox, Google Chrome, or Microsoft Edge)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "##  1. Icon Legend"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ":bulb: **Tip:** This indicates that the following text consists of tips to better utilise McGymmy"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": ":information_source: This indicates important notes for the current feature we are looking at\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "## 2. A little note from the developers"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Thank you for using McGymmy. We sincerely hope that McGymmy plays a part to help you achieve a healthier lifestyle."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "We understand that McGymmy may be a little different from traditional GUI applications, and it may be a little difficult to start using it initially."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Thus, we recommend you to start by first understanding how McGymmy works at a high level at the Quick start section. Then, explore the Features section."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": ":bulb: **Tip:** Press `Ctrl-F` for Windows and Other OSs and `CMD + F` for Mac OS to open the find prompt in your browser. You can type in keywords such as `add` or `edit` to quickly navigate to those parts of the document."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "## 3. Quick start"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "To get started, you can double-click on the jar file to open the GUI."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "You can type the command in the command box and press Enter to execute it. e.g. typing help and pressing Enter will open the help window."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Refer to the features below for details of each command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "1. Please ensure that you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "1. You can download the latest `mcgymmy.jar` [here](https://github.com/AY2021S1-CS2103T-W17-3/tp)."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "1. Afterwards, copy the file to the folder you want to use as the _home folder_ for your McGymmy."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "1. Double-click the file to start the app. You should notice a GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "   * **`list`** : Lists all food items."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "   * **`add`**` -n potato -p 100 -c 5 -f 0` : Adds a food item named `potato` with `100`g of proteins, `5`g of carbs, and `0`g of fats into current date."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "   * **`delete`**` 3` : Deletes the 3rd food item (i.e. food item with index 3) shown in the current list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "## 4. How to use this guide"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Please do read this section in order to use this guide effectively"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cb\u003eImportant\u003c/b\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "The picture below shows a summary of where all the items will be.\u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Each of the commands explained below will have an image which shows the output."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "![Usage](images/CommandImagesForUG/Usage.png)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "If you are looking for a particular command:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. Press `Ctrl-F` for Windows and other operating systems, `CMD + F` for Mac OS."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. Search for the command in the search bar."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": "If you want a table with all the commands:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. Refer to table of contents above"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. Click on Command Summary"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    - The command summary will show you all the commands at a glance"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": "If you want to get acquainted with all the commands:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. Follow the format and continue reading."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jh123x"
        },
        "content": "## 5. Features"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "A typical *command* in *McGymmy* consists of a *Command Word* followed by several *parameters*."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "For example in `add -n scrambled eggs -p 100`, `add` is a *Command Word* and `-n scrambled eggs` and `-p 100` are *parameters*."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "**How to intepret the each command\u0027s format**:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "We will follow the following convention for each command\u0027s format:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "`COMMAND_WORD PARAMETERS [OPTIONAL_PARAMETERS]`, e.g. `add -n NAME [-p PROTEIN] [-f FATS] [-c CARBS] [-d DATE]`."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* `COMMAND_WORD` is the name of the command to be executed, and is always the first word in the *command*."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by you.\u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  e.g. in `add -n NAME -p PROTEIN`, `NAME` and `PROTEIN` are parameters which can be used as `add bacon -p 200`."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* Prefixes that precede parameters represent *flags* that indicate which parameter is being referenced. Parameters that are not preceded by a flag are denoted as *flag-less* parameters. For simplicity, the [flag + parameter input] together will be referenced as a single parameter.\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  e.g. in `find example -t lunch`, `example` represents a flag-less parameter while `-t lunch` is referred as a parameter with flag `-t` and parameter input `lunch`."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* Flag-less parameters always have to be the first parameter after the command word.\u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  e.g. in `edit 1 -n chicken`, the flag-less parameter is `1` and the `n` parameter is `chicken`. However for `edit -n chicken 1`, there is no flag-less parameter, and the `n` parameter is `chicken 1`."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  e.g. `-n NAME [-f FATS]` can be used as `-n bacon -f 10` or as `-n bacon`."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* Parameters and optional parameters with flags can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  e.g. if the command specifies `-c CARBS -p PROTEIN [-f FATS]`, `-p PROTEIN [-f FATS] -c CARBS` is also acceptable."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  e.g. `[commnand;]…​` can be used as ` ` (i.e. 0 times), `delete 1;`, `delete 2; delete 1;` etc."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* Entering the same parameter twice will concatenate the inputs.\u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  e.g. in `add -n potato -n chip`, the `n` parameters will be concatenated to `potato chip`, and a new item with the name `potato chip` will be created."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 5.1 Viewing help : `help`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Stuck and unsure of how to execute a certain command? The `help` command allows you to view"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "information on all available commands. It also enables you to display detailed information on a specific"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "command. This way, you won\u0027t have any trouble utilising McGymmy to its full potential."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Format: `help [COMMAND]`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* `help` - this will display all available commands."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* `help add` - this will display a help message specific to the `add` command."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "![help message](images/CommandImagesForUG/Help.png)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 5.2 Adding a food item: `add`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "The `add` command allows you to store your food items into McGymmy with ease. You can also"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "specify additional details for your food item entry, creating a more detailed and customisable"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "diet-tracking experience."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Format: `add -n NAME [-p PROTEIN] [-f FATS] [-c CARBS] [-d DATE] [-t TAG]`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* `add -n potato -p 100 -c 5 -f 0`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* `add -n McSpicy`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* `add -n Wonton Mee -c 10`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* `add -n Sushi -d 20/04/2020`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* `add -n Burger -t FastFood`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ":information_source:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * The default value for `PROTEIN`, `FATS` and `CARBS` is 0. The default date is the day in which the food item is added.\u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chewypiano"
        },
        "content": " * Values of `PROTEIN`, `FATS` and `CARBS` must be a non-negative integer, less than 1000g.\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * To view the list of supported date formats, see *Appendix A*.\u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "![add command example](images/CommandImagesForUG/Add.png)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 5.3 Tagging food items : `tag`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Tags are customisable labels that help organise your food items. The `tag` command enables"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "you to tag food items with a specific label, which allows you to locate and filter the food"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "items with greater ease and create a more organised food list. "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Format: `tag INDEX -t TAG_NAME`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* `tag 1 -t Breakfast` - adds the `Breakfast` tag to the first food item in your list."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ":information_source:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* Tags `TAG_NAME` for food item at the specified `INDEX`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* `TAG_NAME` is case-sensitive."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* The index refers to the index number shown in the displayed food list."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​ that is smaller than 2^31"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Tags for food items must be less than 20 characters."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* The list will show all items after tagging"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jh123x"
        },
        "content": "![tag command example](images/CommandImagesForUG/Tag.png)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 5.4 Untagging food items : `untag`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Wrongly tagged a food item? Not to worry, the `untag` command allows for quick and easy"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "removal of a specified tag."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Format: `untag INDEX -t TAG_NAME`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* `untag 1 -t Breakfast` - removes the `Breakfast` tag from the first food item in your list."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ":information_source:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* Untags `TAG_NAME` for food item at the specified `INDEX`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* `TAG_NAME` is case-sensitive."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* The index refers to the index number shown in the displayed food list."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​ that is smaller than 2^31"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* The list will show all items after untagging"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jh123x"
        },
        "content": "![untag command example](images/CommandImagesForUG/Untag.png)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 5.5 Finding a food item: `find`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Easy and quick filtering of food items is made possible via the `find` command."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "This command allows you to specify certain criteria to filter the current food list by,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "allowing you to easily locate past entries."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Format: `find [KEYWORDS] [-n WORDS_IN_NAME] [-t WORDS_IN_TAG] [-d DATE]`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ":information_source:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* Filters the displayed list of food items to only include food items corresponding to the provided parameters."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* The `[KEYWORDS]`, `[WORDS_IN_NAME]` and `[WORDS_IN_TAG]` parameters will only find food items that contain at least one of the complete words specified.\u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  e.g. `find chick` will not return the food item with the name \"Chicken Rice\" but `find chicken lemak` will return both the food items \"Chicken Rice\" and \"Nasi Lemak\"."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* `KEYWORDS` and `WORDS_IN_NAME` are not case sensitive but `WORDS_IN_TAG` is case sensitive."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* `find` - finds all food items"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* `find -n Sushi -d 20/04/2020` - finds all food items with the word \"Sushi\" in it\u0027s name and date \"20/04/2020\""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* `find -t lunch dinner` - finds all food items with tag \"lunch\" and/or tag \"dinner\""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* `find sushi lunch` - finds all food items that have the keywords \"sushi\" and/or \"lunch\" in their name and/or tag"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jh123x"
        },
        "content": "![find_command_example](images/CommandImagesForUG/Find.png)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 5.6 Clearing food items: `clear`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "The `clear` command allows you to quickly delete"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "all entries in the current displayed list, preventing your food list from getting clogged up."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "* `clear` - clears food items"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ":information_source:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "* Clears all food item that is shown on the list."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "* You can clear specific groups of item by using find then clear."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jh123x"
        },
        "content": "![clear_command_example](images/CommandImagesForUG/Clear.png)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 5.7 Listing all food items : `list`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "The `list` command lets you display the entire list of food items stored in your McGymmy."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ":information_source:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* Lists all food items in McGymmy"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* All additional input after the *command word* `list` will be ignored. E.g. `list` and `list 123` will have the same effect."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jh123x"
        },
        "content": "![list command example](images/CommandImagesForUG/List.png)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 5.8 Editing a food item : `edit`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "The `edit` command allows for quick and easy changes to be made on existing food items in"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "McGymmy."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Format: `edit INDEX [-n NAME] [-p PROTEIN] [-c CARBS] [-f FATS] [-d DATE]`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ":information_source:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* Edits the food item at the specified `INDEX`. The index refers to the index number shown in the displayed food list."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​ that is smaller than 2^31"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": " * Values of `PROTEIN`, `FATS` and `CARBS` must be a non-negative integer, less than 1000g.\u003cbr\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* To view the list of supported date formats, see *Appendix A*."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jh123x"
        },
        "content": "*  `edit 3 -n banana -p 120` Changes the `name` and `protein` values of the 3rd item in the list to `banana` and `120` respectively."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jh123x"
        },
        "content": "![edit command example](images/CommandImagesForUG/Edit.png)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 5.9 Deleting a food item: `delete`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "The `delete` command allows you to instantly remove a food item from the current"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "displayed list of food items."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ":information_source:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* Deletes the food at the specified `INDEX`."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* The index refers to the index number shown in the displayed food list."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​ that is smaller than 2^31"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* `list` followed by `delete 2` deletes the 2nd food item in McGymmy."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "![delete command example](images/CommandImagesForUG/Delete.png)"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 5.10 Importing another save file: `import`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "The `import` command allows you to load a previously saved file from your local directory"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "into McGymmy. This allows for easy transfer of McGymmy data between multiple computers."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Format: `import FILEPATH`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ":information_source:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* Imports the saved file at `FILEPATH`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* Both relative and absolute paths work for the import feature."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* The imported file will simply override the existing food list."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* For Windows users: `import c:/mcgymmy/save_file.json` imports `save_file.json` from the `c:/mcgymmy` directory into McGymmy."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* For Mac users: `import /Users/\u003cusername\u003e/Desktop/save_file.json` imports `save_file.json` from the Desktop into McGymmy."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jh123x"
        },
        "content": "![Import command example](images/CommandImagesForUG/Import.png)"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ":bulb: **Tip:** For those who are more inclined to use a gui to import:"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Click on file"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Click on Import"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Navigate using the GUI to the save file"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jh123x"
        },
        "content": "![GUI import command example](images/CommandImagesForUG/ImportGUI.png)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 5.11 Exporting your save file to a folder: `export`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "The `export` command allows you to export your current food list as file on"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "your computer. This would make it easy to send and transfer your existing McGymmy data"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "between multiple computers."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "Format: `export DIRPATH [-o FILENAME]`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ":information_source:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* Exports the saved file to `DIRPATH` with `FILENAME`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Default filename is `mcgymmy.json`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* Both relative and absolute paths work for the export feature."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* Make sure to export only to valid paths that already exist. The examples below assume that the given paths already exist in your working space."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* `export c:/mcgymmy` exports the save file as `mcgymmy.json` to `c:/mcgymmy`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* `export c:/mcgymmy -o save_file` exports the save file as `save_file.json` to `c:/mcgymmy`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jh123x"
        },
        "content": "![Export command example](images/CommandImagesForUG/Export.png)"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ":bulb: **Tip:** For those who are more inclined to use a gui to export:"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Click on `file` option in the menubar above the command box"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Click on `Export` button to open the directory selector"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Navigate using the GUI to the save file"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Click on `Select Folder` when done"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jh123x"
        },
        "content": "![GUI export command example](images/CommandImagesForUG/ExportGUI.png)"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 5.12 Undoing the previous command : `undo`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "The `undo` command allows you to reverse the change of the previous command. This makes"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "it easier to reverse mistakes made in McGymmy."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ":information_source:"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* Undo command can be called multiple times."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* Help command will be ignored when undoing. "
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "For example, if the user calls the following commands in sequence:"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "`add -n Burger`, `help edit`, `undo`, the undo command will undo the adding operation, not the help one."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* All additional input after the *command word* `undo` will be ignored. E.g. `undo` and `undo 123` will have the same effect."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "![Undo command example](images/CommandImagesForUG/Undo.png)"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 5.13 Creating a macro command : `macro`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Macros are custom shortcuts that ease the diet-tracking process. It allows you to create custom"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "commands by combining multiple commands together. This is a powerful tool that removes the need for"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "repetitive long-winded command execution. The `macro` command specifically stores a new macro into"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "your McGymmy system."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "*__WARNING:__* this is an advanced feature!"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Format: `macro MACRONAME FLAG_1 FLAG_2 ... ; COMMAND_1 PARAMETERS_TO_COMMAND_1; [COMMAND_2 PARAMETERS_TO_COMMAND_2; ...]` \u003cbr\u003e"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ":information_source:"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* If any of the jargon below seem unclear, refer to *How to intepret the each command\u0027s format* under section *5. Features* above."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* Creates a macro with name `MACRONAME` which takes in parameters `FLAG_1 FLAG_2...` which executes `COMMAND_1; COMMAND_2; ...`."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* Parameters to the macro can be substituted in the `PARAMETERS_TO_COMMAND` using the syntax: `\\FLAG_NAME`."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* Flag-less parameters can be substituted using the syntax: `\\$`."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* Using `undo` after creating a macro using this command will remove it."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* Read the examples below for more information."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* `macro addWith100cal p ; add -n \\$ -c 100 -p \\p`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    * Example usage of this macro: `addWith100cal Banana -p 200`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    * The following command will be executed by the macro: `add -n Banana -c 100 -p 200`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    * i.e. in `add -n \\$ -c 100 -p \\p`, `\\$` and `\\p` will be substituted with Banana and 200 respectively."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* `macro addFoodWithFries; add -n \\$ ; add -n \\$ With Fries`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    * Example usage of this macro: `addFoodWithFries Ice Cream`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    * The following commands will be executed by the macro: `add -n Ice Cream` and `add -n Ice Cream With Fries`."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ":bulb: **Tip:** Be careful when creating a macro!"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* It is possible to create a macro with errors!"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* The commands in the macro will only be checked for errors when you run the macro itself."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* e.g. Entering `macro test; add` will create a new macro, but every time you execute the macro `test`, the error message from `add` telling you it requires the name parameter will be shown."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "![Macro command example](images/CommandImagesForUG/Macro.png)"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "jh123x"
        },
        "content": ":information_source: When using it with conjunction with the undo command, macro will only undo the commands one at a time within the chain of macro commands\u003cbr\u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 5.14 List all macros : `listmacro`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "The `listmacro` command displays information on the available macros in the terminal, which allows you to keep track of"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "all macros currently in the McGymmy system."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Format: `listmacro [macro]`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* `listmacro` - this will display all available macros."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* `listmacro kfc` - this will display information on the `kfc` macro."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "![List Macro command example](images/CommandImagesForUG/Listmacro.png)"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 5.15 Deleting a macro: `remmacro`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "The `remmacro` command allows you to remove an existing macro from your McGymmy system."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Format: `remmacro MACRONAME`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ":information_source:"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* Deletes the macro with the name `MACRONAME`."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* If you accidentally delete a macro you need, `undo` can revert it."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "![delete macro example](images/CommandImagesForUG/Deletemacro.png)"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 5.16 Exiting the program : `exit`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ":information_source:"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* Exits McGymmy and closes the McGymmy window."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* Data will be automatically saved (see also section on *Saving the data* below)."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* All additional input after the *command word* `exit` will be ignored. E.g. `exit` and `exit 123` will have the same effect."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### 5.17 Saving the data"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "McGymmy\u0027s data is saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jh123x"
        },
        "content": "## 6. FAQ"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**Q1**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**A1**:  "
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. Install the app in the other computer."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. Export your save file from your previous McGymmy using the `export` function in section `5.11`."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. Use the `import` function in section `5.10` to import the save file to your McGymmy."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**Q2**: How do I backup my current version of McGymmy?\u003cbr\u003e"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**A2**: "
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. Use the `export` function in section `5.11` to export the save file to a directory of your choice."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. A Copy of your save file will be created at the location."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**Q3**: How do I find out what I ate on a particular day?\u003cbr\u003e"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**A3**: "
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jh123x"
        },
        "content": "For those who prefer typing:"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. Use the find command in section `5.5` and add the `-d` tag before specifying a date"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. You will see the food you ate on that day"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jh123x"
        },
        "content": "For those who prefer clicking:"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. Click on `date` button at the file menu"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. Click on the calendar icon"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. Select the date you want to filter (You will see a calendar similar to the one below)"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. You will see the food you ate on that day"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "jh123x"
        },
        "content": "![datepicker](images/CommandImagesForUG/DateSelector.png)"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "jh123x"
        },
        "content": "## 7. Command summary"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "Action       | Format, Examples"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "jh123x"
        },
        "content": "-------------|------------------"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "**Add**      | `add -n NAME [-p PROTEIN] [-f FATS] [-c CARBS] [-d DATE] [-t TAG]` \u003cbr\u003e e.g., `add Chicken Rice -p 10 -f 5 -c 23 -d 02/09/2020 -t Lunch`"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**Clear**    | `clear`"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "**Delete**   | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "**Edit**     | `edit INDEX [-n NAME] [-p PROTEIN] [-f FATS] [-c CARBS] [-d DATE]`\u003cbr\u003e e.g.,`edit 2 -n Chicken Rice -p 30 -f 50 -c 60 -d 02/09/2020`"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**Exit**     | `exit`"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "**Export**   | `export DIRPATH [-o FILENAME]` \u003cbr\u003e e.g., `export c:/mcgymmy -o save_file`"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "**Find**     | `find [KEYWORDS] [-n WORDS_IN_NAME] [-t WORDS_IN_TAG] [-d DATE]` \u003cbr\u003e e.g., `find chicken -t Dinner -d 28-10-2020`"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**Help**     | `help [COMMAND]` \u003cbr\u003e e.g., `help add`"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "**Import**   | `import [FILEPATH]​` \u003cbr\u003e e.g., `import c:/mcgymmy/save_file.json`"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**List**     | `list`"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**Macro**    | `macro SHORTCUT; COMMAND_1; [COMMAND_2;] …​` \u003cbr\u003e e.g., `macro lunch; add Chicken`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**RemMacro** | `remmacro MACRONAME` \u003cbr\u003e e.g., `remmacro lunch`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**ListMacro**| `listmacro [macro]` \u003cbr\u003e e.g., `listmacro kfc`"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**Tag**      | `tag INDEX -t TAG_NAME` \u003cbr\u003e e.g., `tag 1 -t Lunch`"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**UnTag**    | `untag INDEX -t TAG_NAME` \u003cbr\u003e e.g., `untag 1 -t Lunch`"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "jh123x"
        },
        "content": "## 8. Appendix A"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "List of supported input date formats, sorted from highest parsing priority to lowest parsing priority"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Format       | Example"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "------------ | --------"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "*yyyy-MM-dd* | 2020-09-02"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "*yyyy-M-dd*  | 2020-9-02"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "*yyyy-M-d*   | 2020-9-2"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "*dd-MM-yyyy* | 02-09-2020"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "*dd-M-yyyy*  | 02-9-2020"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "*d-M-yyyy*   | 2-9-2020"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "*yyyy/MM/dd* | 2020/09/02"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "*dd/MM/yyyy* | 02/09/2020"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "*dd/M/yyyy*  | 02/9/2020"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "*d/M/yyyy*   | 2/9/2020"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "*d MMM yyyy* | 2 Sep 2020"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 79,
      "dcchan98": 33,
      "jh123x": 149,
      "joeychensmart": 166,
      "-": 129,
      "aidoxe-123": 48
    }
  },
  {
    "path": "docs/diagrams/AddToHistoryActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "if () then ([command change ModelManager state])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    :Make a copy of ModelManager"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                     to History;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    :Change ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "aidoxe-123": 4
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteFood(1)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveMcGymmy(mcGymmy)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "aidoxe-123": 2
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "McGymmy *-down-\u003e \"1\" Fridge"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "TagSet -[hidden]down- Fridge"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "TagSet -[hidden]down- Fridge"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Fridge o-down-\u003e Food"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Food *--\u003e \"1\" Name"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Food *--\u003e \"1\" Protein"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Food *--\u003e \"1\" Carbohydrate"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Food *--\u003e \"1\" Fat"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Food *--\u003e \"1\" Date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Food *--\u003e \"1\" TagSet"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "TagSet *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "aidoxe-123": 11
    }
  },
  {
    "path": "docs/diagrams/ClearSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "participant \"executable:ClearCommand\" as ClearCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "[-\u003e LogicManager : execute(\"clear\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "create ClearCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "LogicManager -\u003e ClearCommand : Parser::parse**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "activate ClearCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "ClearCommand --\u003e LogicManager : executable"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "deactivate ClearCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "|||"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "LogicManager -\u003e ClearCommand : execute()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "activate ClearCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "|||"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "ClearCommand -\u003e Model : clearFilteredFood()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "|||"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "Model --\u003e ClearCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "|||"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "ClearCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "CommandResult --\u003e ClearCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "ClearCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "deactivate ClearCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "dcchan98": 55
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "participant \":McGymmyParser\" as McGymmyParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "participant \":PrimitiveCommandParser\" as PrimitiveCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "LogicManager -\u003e McGymmyParser : parse(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "activate McGymmyParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "McGymmyParser -\u003e PrimitiveCommandParser : parsePrimitiveCommand(\"delete\", [\"1\"])"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "activate PrimitiveCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "PrimitiveCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "DeleteCommand --\u003e PrimitiveCommandParser : d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "|||"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "PrimitiveCommandParser -\u003e DeleteCommand : getParameterSet"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "DeleteCommand --\u003e PrimitiveCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "|||"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "PrimitiveCommandParser -\u003e PrimitiveCommandParser : provideValuesToParameterSet"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "activate PrimitiveCommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "PrimitiveCommandParser --\u003e PrimitiveCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "deactivate PrimitiveCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "PrimitiveCommandParser --\u003e McGymmyParser : d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "deactivate PrimitiveCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "McGymmyParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "deactivate McGymmyParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e Model : deletePerson(1)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "|||"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 28,
      "-": 47
    }
  },
  {
    "path": "docs/diagrams/ExportSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "participant \":McGymmyParser\" as McGymmyParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "participant \"executable:ExportCommand\" as ExportCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "box Storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "participant \":McGymmyStorage\" as McGymmyStorage STORAGE_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[-\u003e LogicManager : execute(\"export c:/mcgymmy\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "LogicManager -\u003e McGymmyParser : parseCommand(\"export c:/mcgymmy\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate McGymmyParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "McGymmyParser --\u003e LogicManager : executable"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate McGymmyParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "LogicManager -\u003e ExportCommand : execute()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate ExportCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "ExportCommand -\u003e Model:getMcGymmy()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Model --\u003e ExportCommand : mcGymmy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "create McGymmyStorage"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "ExportCommand -\u003e McGymmyStorage"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate McGymmyStorage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "McGymmyStorage --\u003e ExportCommand :"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate McGymmyStorage"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "ExportCommand -\u003e McGymmyStorage : saveMcGymmy(mcGymmy)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate McGymmyStorage"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "McGymmyStorage -\u003e ExportCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate McGymmyStorage"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "ExportCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "CommandResult --\u003e ExportCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "ExportCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate ExportCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jh123x": 62
    }
  },
  {
    "path": "docs/diagrams/FindSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "participant \"f:FindCommand\" as FindCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "participant \":NameContainsKeywordsPredicate\" as NameContainsKeywordsPredicate LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "participant \":TagContainsKeywordsPredicate\" as TagContainsKeywordsPredicate LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "[-\u003e LogicManager : execute(\"find -n apple\\n -t fruit\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "create FindCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "LogicManager -\u003e FindCommand : Parser::parse**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "FindCommand --\u003e LogicManager : f"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "|||"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "LogicManager -\u003e FindCommand : execute()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "create NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "FindCommand -\u003e NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "activate NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "NameContainsKeywordsPredicate --\u003e FindCommand : namePredicate"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "deactivate NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "|||"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "create TagContainsKeywordsPredicate"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "FindCommand -\u003e TagContainsKeywordsPredicate"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "activate TagContainsKeywordsPredicate"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "TagContainsKeywordsPredicate --\u003e FindCommand : tagPredicate"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "deactivate TagContainsKeywordsPredicate"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "|||"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "FindCommand -\u003e FindCommand : Predicate::and"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "FindCommand --\u003e FindCommand : combinedPredicate"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "FindCommand -\u003e Model : updateFilteredFoodList(combinedPredicate)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "|||"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Model --\u003e FindCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "|||"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "FindCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "CommandResult --\u003e FindCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "FindCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 76
    }
  },
  {
    "path": "docs/diagrams/ImportSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "participant \"executable:ImportCommand\" as ImportCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "box Storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "participant \":JsonMcGymmyStorage\" as JsonMcGymmyStorage STORAGE_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[-\u003e LogicManager : execute(\"import c:/mcgymmy\\n -o mcgymmy.json\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "create ImportCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "LogicManager -\u003e ImportCommand : Parser::parse**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate ImportCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "ImportCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate ImportCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "LogicManager -\u003e ImportCommand : execute()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate ImportCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "create JsonMcGymmyStorage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "ImportCommand -\u003e JsonMcGymmyStorage"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate JsonMcGymmyStorage"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "JsonMcGymmyStorage --\u003e ImportCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate JsonMcGymmyStorage"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "ImportCommand -\u003e JsonMcGymmyStorage : readMcGymmy()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate JsonMcGymmyStorage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "JsonMcGymmyStorage --\u003e ImportCommand : mcGymmy"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate JsonMcGymmyStorage"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "ImportCommand -\u003e Model : setMcGymmy(mcGymmy)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "|||"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Model --\u003e ImportCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "|||"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "ImportCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "CommandResult --\u003e ImportCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "ImportCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate ImportCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jh123x": 64
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Class McGymmyParser"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Class PrimitiveCommandParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package Command as CommandPackage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Interface CommandExecutable \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package Parameter as ParameterPackage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Class ParameterSet"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Class \"{abstract}\\nAbstractParameter\" as AbstractParameter"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Class Parameter"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Class OptionalParameter"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "LogicManager .down.\u003e CommandExecutable : executes \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "LogicManager -right-\u003e McGymmyParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "LogicManager --\u003e HiddenModel"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "McGymmyParser -down-\u003e PrimitiveCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "PrimitiveCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "PrimitiveCommandParser ...\u003e ParameterSet : populates \u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "CommandExecutable .left.\u003e CommandResult"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "CommandExecutable .left.\u003e HiddenModel : modifies \u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Command .up.|\u003e CommandExecutable"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "ParameterSet .down.\u003e AbstractParameter"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Parameter -up-|\u003e AbstractParameter"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "OptionalParameter -up-|\u003e AbstractParameter"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Command ....\u003e ParameterSet : consumes from \u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 28,
      "-": 33
    }
  },
  {
    "path": "docs/diagrams/MacroClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Class McGymmyParser"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Class PrimitiveCommandParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Package MacroRunner as MacroPackage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Class MacroRunner"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package Command as CommandPackage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Interface CommandExecutable \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Class MacroList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Class Macro"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "LogicManager --\u003e McGymmyParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "PrimitiveCommandParser -[hidden]u- McGymmyParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "PrimitiveCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Command .up.|\u003e CommandExecutable"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "MacroRunner --\u003e PrimitiveCommandParser : uses \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "MacroRunner ..\u003e CommandExecutable : creates \u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "MacroList -down-\u003e Macro"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "McGymmyParser ..\u003e MacroList : has a \u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "McGymmyParser ..\u003e MacroRunner : uses \u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 47
    }
  },
  {
    "path": "docs/diagrams/MacroSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "participant \":McGymmyParser\" as McGymmyParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "participant \":MacroList\" as MacroList LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "participant \":MacroRunner\" as Macro LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "participant \"testInstance:CommandExecutable\" as CommandExecutable LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "participant \":PrimitiveCommandParser\" as PrimitiveCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "participant \":Command\" as Command LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "LogicManager -\u003e McGymmyParser : parseCommand(\"test -a banana\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "activate McGymmyParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "activate MacroList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "McGymmyParser -\u003e MacroList : getMacro(\"test\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "MacroList --\u003e McGymmyParser : test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "deactivate MacroList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "McGymmyParser -\u003e Macro : commandInstance(test, arguments)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "activate Macro"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "create CommandExecutable"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Macro -\u003e CommandExecutable"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "activate CommandExecutable"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "CommandExecutable --\u003e Macro"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "deactivate CommandExecutable"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Macro --\u003e McGymmyParser : testInstance"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "deactivate Macro"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "McGymmyParser --\u003e LogicManager : testInstance"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "deactivate McGymmyParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "LogicManager -\u003e CommandExecutable : execute()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "activate CommandExecutable"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "create PrimitiveCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "CommandExecutable -\u003e PrimitiveCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "activate PrimitiveCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "PrimitiveCommandParser --\u003e CommandExecutable"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "deactivate PrimitiveCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "loop for each macro line"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "CommandExecutable -\u003e PrimitiveCommandParser : parse"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "activate PrimitiveCommandParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "create Command"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "PrimitiveCommandParser -\u003e Command"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "activate Command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Command --\u003e PrimitiveCommandParser"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "deactivate Command"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "PrimitiveCommandParser --\u003e CommandExecutable"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "deactivate PrimitiveCommandParser"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "end"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "loop for each parsed command"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "CommandExecutable -\u003e Command : execute"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "activate Command"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Command --\u003e CommandExecutable"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "deactivate Command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "end"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "CommandExecutable --\u003e LogicManager : result"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "deactivate CommandExecutable"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 75
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Interface ReadOnlyMcGymmy \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Class McGymmy"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Class ReadOnlyMcGymmy"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Package Food {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Class Food"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Class Carbohydrate"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Class Fat"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Class Date"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Class Protein"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Class UniqueFoodList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "McGymmy .up.|\u003e ReadOnlyMcGymmy"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "ModelManager o--\u003e \"1\" McGymmy"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "McGymmy *--\u003e \"1\" UniqueFoodList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "UniqueFoodList o--\u003e \"*\" Food"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Food *--\u003e Name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Food *--\u003e Protein"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Food *--\u003e Fat"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Food *--\u003e Carbohydrate"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Food *--\u003e Date"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Food *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Name -[hidden]right-\u003e Protein"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Protein -[hidden]right-\u003e Carbohydrate"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Carbohydrate -[hidden]right-\u003e Fat"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Fat -[hidden]right-\u003e Date"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "ModelManager --\u003e\"1\" Food : filtered list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 27,
      "-": 32
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Interface McGymmyStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Class JsonMcGymmyStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "StorageManager o--\u003e McGymmyStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "JsonMcGymmyStorage .left.|\u003e McGymmyStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "JsonMcGymmyStorage .down.\u003e JsonSerializableMcGymmyStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "JsonSerializableMcGymmyStorage .right.\u003e JsonSerializableFood"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "JsonSerializableFood .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "aidoxe-123": 7
    }
  },
  {
    "path": "docs/diagrams/TagSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "participant \":McGymmyParser\" as McGymmyParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "participant \"executable:TagCommand\" as TagCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "participant \"tag:Tag\" as Tag MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "participant \":Food\" as Food MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "participant \"model:Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[-\u003e LogicManager : execute(\"tag 1 -t Lunch\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "LogicManager -\u003e McGymmyParser : parseCommand(\"tag 1 -t Lunch\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate McGymmyParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "McGymmyParser --\u003e LogicManager : executable"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate McGymmyParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "LogicManager -\u003e TagCommand : execute()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate TagCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "TagCommand -\u003e Model : getFilteredFoodList()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Model --\u003e TagCommand : filteredFoodList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "TagCommand -\u003e Food : getTags()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate Food"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Food -\u003e TagCommand : List\u003cTags\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate Food"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "create Tag"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "TagCommand -\u003e Tag"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate Tag"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Tag --\u003e TagCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate Tag"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "TagCommand -\u003e Food : addTag(tag)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate Food"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Food --\u003e TagCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate Food"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "TagCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "CommandResult --\u003e TagCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "TagCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate TagCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jh123x": 66
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Class FoodListPanel"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Class FoodCard"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Class SummaryBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "MainWindow *-down-\u003e FoodListPanel"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "MainWindow *-down-\u003e SummaryBox"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "FoodListPanel -down-\u003e FoodCard"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "SummaryBox .left.\u003e FoodListPanel"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "FoodListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "FoodCard --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "SummaryBox --|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "FoodCard ..\u003e Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jh123x": 12,
      "-": 48
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "participant \":ModelManager\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "participant \":History\" as History MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "LogicManager -\u003e UndoCommand : Parser::parse(undo)**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "UndoCommand -\u003e LogicManager : u"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "LogicManager -\u003e UndoCommand : execute(model)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "UndoCommand -\u003e Model : undo()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Model -\u003e History :pop()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "activate History"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "History -\u003e Model : m"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "deactivate History"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Model -\u003e Model: updateModelManager(m)***"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Model -\u003e Model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "UndoCommand --\u003e LogicManager : :CommandResult"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "aidoxe-123": 18
    }
  },
  {
    "path": "docs/diagrams/UndoState0.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "package History {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    note \"Empty history\" as N"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    class State1 as \"__copy0:Pair\u003cReadOnlyMcGymmy, Predicate\u003cFood\u003e\u003e__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    class State2 as \"__copy1:Pair\u003cReadOnlyMcGymmy, Predicate\u003cFood\u003e\u003e__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    class State3 as \"__copy2:Pair\u003cReadOnlyMcGymmy, Predicate\u003cFood\u003e\u003e__\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "State1 -[hidden]up-\u003e State2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "State2 -[hidden]up-\u003e State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "hide State1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "class ModelManager as \"Current ModelManager\" #FFFFF"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "McGymmy -left-\u003e State1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "aidoxe-123": 25
    }
  },
  {
    "path": "docs/diagrams/UndoState1a.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "title Command \"delete 5\", before deleting"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "package History {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    class State1 as \"__copy0:Pair\u003cReadOnlyMcGymmy, Predicate\u003cFood\u003e\u003e__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    class State2 as \"__copy1:Pair\u003cReadOnlyMcGymmy, Predicate\u003cFood\u003e\u003e__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    class State3 as \"__copy2:Pair\u003cReadOnlyMcGymmy, Predicate\u003cFood\u003e\u003e__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "State1 -[hidden]up-\u003e State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "State2 -[hidden]up-\u003e State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "class ModelManager as \"Current ModelManager\" #FFFFF"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "ModelManager -left-\u003e State1: save"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "aidoxe-123": 23
    }
  },
  {
    "path": "docs/diagrams/UndoState1b.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "title Command \"delete 5\", after deleting"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "package History {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    class State1 as \"__copy0:Pair\u003cReadOnlyMcGymmy, Predicate\u003cFood\u003e\u003e__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    class State2 as \"__copy1:Pair\u003cReadOnlyMcGymmy, Predicate\u003cFood\u003e\u003e__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    class State3 as \"__copy2:Pair\u003cReadOnlyMcGymmy, Predicate\u003cFood\u003e\u003e__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "State1 -[hidden]up-\u003e State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "State2 -[hidden]up-\u003e State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "class ModelManager as \"Updated ModelManager\" #FFFFF"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "ModelManager -[hidden]left-\u003e State2"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "aidoxe-123": 23
    }
  },
  {
    "path": "docs/diagrams/UndoState2a.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "title Command \"add -n Rice ...\", before adding"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "package Stack {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    class State1 as \"__copy0:Pair\u003cReadOnlyMcGymmy, Predicate\u003cFood\u003e\u003e__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    class State2 as \"__copy1:Pair\u003cReadOnlyMcGymmy, Predicate\u003cFood\u003e\u003e__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    class State3 as \"__copy2:Pair\u003cReadOnlyMcGymmy, Predicate\u003cFood\u003e\u003e__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "State1 -[hidden]up-\u003e State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "State2 -[hidden]up-\u003e State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "class ModelManager as \"Current ModelManager\" #FFFFF"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "ModelManager -left-\u003e State2: save"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "aidoxe-123": 22
    }
  },
  {
    "path": "docs/diagrams/UndoState2b.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "title Command \"add -n Rice ...\", after adding"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "package Stack {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    class State1 as \"__copy0:Pair\u003cReadOnlyMcGymmy, Predicate\u003cFood\u003e\u003e__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    class State2 as \"__copy1:Pair\u003cReadOnlyMcGymmy, Predicate\u003cFood\u003e\u003e__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    class State3 as \"__copy2:Pair\u003cReadOnlyMcGymmy, Predicate\u003cFood\u003e\u003e__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "State1 -[hidden]up-\u003e State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "State2 -[hidden]up-\u003e State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "class ModelManager as \"Updated ModelManager\" #FFFFF"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "ModelManager -[hidden]left-\u003e State3"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "aidoxe-123": 22
    }
  },
  {
    "path": "docs/diagrams/UndoState3.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "title After \"undo\" command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "package Stack {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    class State1 as \"__copy0:Pair\u003cReadOnlyMcGymmy, Predicate\u003cFood\u003e\u003e__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    class State2 as \"__copy1:Pair\u003cReadOnlyMcGymmy, Predicate\u003cFood\u003e\u003e__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    class State3 as \"__copy2:Pair\u003cReadOnlyMcGymmy, Predicate\u003cFood\u003e\u003e__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "State1 -[hidden]up-\u003e State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "State2 -[hidden]up-\u003e State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "class ModelManager as \"Current ModelManager\" #FFFFF"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "note top of ModelManager"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    Now storing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    content of copy1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "end note"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "ModelManager -left-\u003e State2"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "aidoxe-123": 29
    }
  },
  {
    "path": "docs/diagrams/UntagSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "participant \":McGymmyParser\" as McGymmyParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "participant \"executable:UntagCommand\" as UntagCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "participant \":Food\" as Food MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "participant \"model:Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[-\u003e LogicManager : execute(\"untag 1 -t Lunch\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "LogicManager -\u003e McGymmyParser : parseCommand(\"untag 1 -t Lunch\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate McGymmyParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "McGymmyParser --\u003e LogicManager : executable"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate McGymmyParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "LogicManager -\u003e UntagCommand : execute()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate UntagCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "UntagCommand -\u003e Model : getFilteredFoodList()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Model --\u003e UntagCommand : filteredFoodList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "UntagCommand -\u003e Food : getTags()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate Food"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Food -\u003e UntagCommand : List\u003cTags\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate Food"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "UntagCommand -\u003e Food : removeTag(tag)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate Food"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Food --\u003e UntagCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate Food"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "UntagCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "CommandResult --\u003e UntagCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "UntagCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate UntagCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jh123x": 58
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "title: McGymmy"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W17-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W17-3/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-W17-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-W17-3/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**McGymmy is a desktop application for managing and keeping track of your food details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* If you are interested in using McGymmy, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* If you are interested about developing McGymmy, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "jh123x": 7,
      "-": 12
    }
  },
  {
    "path": "docs/team/aidoxe-123.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "title: Thai Duong\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "## Project: McGymmy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "McGymmy is a **desktop app for Software Engineers who need help managing their diet, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "This project has about 10 kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Given below are my contributions to the project:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* **Code contributed**:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "[RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003daidoxe-123\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* **New Feature**: Create the food model."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * What it does: this is the food item that McGymmy keeps track of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * Justification: "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * Highlights: It is important that this feature must be bug-free, otherwise it could cause subtle bugs in other parts of the code base, such as the one mentioned in"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": " this [pull request](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/120)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* **New Feature**: Added the date property for food."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * What it does: allows user to add date for the food item"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * Justification: This enhancement includes updating the UI so that it shows date property, and updating the storage to store date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * Highlights: This date property can accept inputs in various formats"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * Credits: The idea of implementing this is taken from this StackOverflow\u0027s [post](https://stackoverflow.com/questions/4024544/how-to-parse-dates-in-multiple-formats-using-simpledateformat)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* **New Feature**: Added the ability to undo previous commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  The process of implementing this feature is difficult and time-consuming, as it includes testing if it interacts correctly with all existing components."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  This process help me found a bug relating to mutable `Tag` set in `Food` and fix it"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": " * **New Feature**: Allowed finding food by tag. [\\#82](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/82)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * What it does: allows user to categorize food by tag"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * Justification: I found that user can add tag to food item, but there is no meaningful usage of them beside viewing. "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  Therefore I decided to make find command to work with tag, so that users can use tag as a way to categorize their food."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* **Enhancement**: "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * Tweaked [AB3\u0027s UniquePersonList](https://github.com/nus-cs2103-AY2021S1/tp/blob/master/src/main/java/seedu/address/model/person/UniquePersonList.java) to become a `Fridge` class that allows duplicate foods.  "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * Added tests for codes written by my teammates to minimize the possibility of getting bugs: [\\#70](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/70),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "[\\#69](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/69)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * Enabled assertion on Java CI [\\#109](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/109) "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    * Added documentation for the `undo` feature [\\#131](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/131)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    * Updated the existing commands to include date, and add an appendix to show supported date formats [\\#91](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/91)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    * Document the undo feature in the DG, including updated all the diagrams inside that section"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    * Updated the user profile, value proposition, and user stories [\\#17](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/17)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    * Updated the glossary [\\#150](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/150), [\\#41](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/41)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    * Update storage class diagram [\\#100](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/100)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": " * PRs reviewed (with non-trivial review comments): [\\#39](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/39),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": " [\\#57](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/57), [\\#76](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/76),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": " [\\#104](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/104)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": " * Contributed to forum discussion: "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "   1. Help fix trailing white space [forum#276](https://github.com/nus-cs2103-AY2021S1/forum/issues/276)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "   2. Share how to temporary disable checkstyle [forum#260](https://github.com/nus-cs2103-AY2021S1/forum/issues/260)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "   3. Explain why a test fails: [forum\\#65](https://github.com/nus-cs2103-AY2021S1/forum/issues/65)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": " * Reported bugs and suggestions for other teams in the class: [List of bugs and suggestions](https://github.com/aidoxe-123/ped/issues)"
      }
    ],
    "authorContributionMap": {
      "aidoxe-123": 67
    }
  },
  {
    "path": "docs/team/chewypiano.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "title: Kamil Gimik\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "## Project: McGymmy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "McGymmy is a desktop diet tracker application for health-conscious software engineers."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* **New Feature**: Added the ability to find food items based on criteria. [\\#105](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/105)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  * What it does: allows the user to specify certain optional criteria (name, tag, date) in order to filter the displayed food list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  * Justification: This feature allows for greater navigability within the app as users can filter the food list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  It also allows for more efficient execution of commands, by allowing the user to execute commands on a localised filtered"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  list instead of the entire food list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  * Highlights: This enhancement required changing the structure of `FindCommand`, amending the `PrimitiveCommandParser` to work"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  with optional flag-less parameters as well as creating the `DatePredicate` class to filter by dates. A lot of thought went through to devise"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  how to make the `FindCommand` optimally functional and useful."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* **Enhancement**: Major refactoring of codebase from AB3 to McGymmy. (Pull requests [\\#56](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/56), [\\#55](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/55))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  * What it does: sets up the core of the codebase for McGymmy and allows additional enhancements to be incorporated easily."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  * Highlights: Refactored entirety of AB3 to fit food items instead of contacts which involved changing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  thousands of lines of code. Partook in pair programming with [Junhua](team/jh123x), as a live code reviewer for the refactoring of core commands and overall structure."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  Personally, I refactored all existing AB3 test classes to fit McGymmy which required extensive and exhaustive debugging in order to ensure the \"updated\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  tests passed while ensuring the logic remained correct and relevant."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* **Enhancement to existing features**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  * Wrote additional tests for existing features to increase test coverage. (Pull requests [\\#105](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/105), [\\#135](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/135))  "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dchewypiano\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dchewypiano\u0026tabRepo\u003dAY2021S1-CS2103T-W17-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  * Set up and managed milestones v1.1 and v1.2 (2 Milestones)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  * Update shared docs with updated UI images."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    * Updated `find` command description and examples. [\\#135](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/135)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    * Added in more user-friendly language and formatting. (Pull requests [\\#236](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/236), [\\#209](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/209))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    * Updated and added UI images. [\\#149](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/149)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    * Added `find` command with associated details and UML diagrams. [\\#106](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/106)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    * Updated model class diagram to fit McGymmy. [\\#114](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/114)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#216](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/216),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  [\\#101](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/101), [\\#246](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/246), [\\#143](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/143),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  [\\#49](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/49), [\\#219](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/219),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  [\\#229](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/229). Full list of PR\u0027s reviewed: [PRs](https://github.com/AY2021S1-CS2103T-W17-3/tp/pulls?q\u003dis%3Apr+reviewed-by%3A%40me)."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](https://github.com/chewypiano/ped/issues/1), [2](https://github.com/chewypiano/ped/issues/2), [3](https://github.com/chewypiano/ped/issues/3), [4](https://github.com/chewypiano/ped/issues/4))"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 52
    }
  },
  {
    "path": "docs/team/dcchan98.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "title: Sean Chan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "## Project: McGymmy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "This portfolio aims to document the contributions that I have made to the McGymmy project. McGymmy can be found [here](https://github.com/AY2021S1-CS2103T-W17-3/tp/releases)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "McGymmy is a desktop diet tracking application to provide a simple an easy way for users to track their diet. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "## Code contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "* **New Feature**: Enhanced the clear function to remove food items as shown in the list. [\\#104](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/104)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "  * What it does: allows the user to remove specific items based on tags, names or date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "  * Highlights: This update allows user the easy removal of food specific food groups."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "* **New Feature**: Created food and macro for the model. [\\#49](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/87) and export files [\\#49](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/94)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "  * What it does: Lays the groundwork for future development of the application as UI and parsers require food item to work."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "  * Highlights: Allows the user to properly create food items in McGymmy."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "* **New Feature**: Did pair programming with [Junhua](team/jh123x.html) to add a `PieChart` with summary values along with the labels for total calories. [\\#80](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/80/)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "  * What it does: The `PieChart` shows the percentage and weight of the different MacroNutrients as well as the total calories consumed "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "  * Justification: The Visualisation of the data allows the user to get a rough idea how much he had consumed, compared to just staring at numbers. It also provides more visual impact to the user and give them a sense of progress."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "  * Highlights: The animations of the PieChart was buggy and does not work as expected. As such we disabled the animation."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "  * Credits: *JavaFx Library and Documentation*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "* **Code contributed**: [Commits](https://github.com/AY2021S1-CS2103T-W17-3/tp/commits/master?author\u003ddcchan98), [RepoSense](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003ddcchan98\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dzoom\u0026zA\u003ddcchan98\u0026zR\u003dAY2021S1-CS2103T-W17-3%2Ftp%5Bmaster%5D\u0026zACS\u003d65.23076923076923\u0026zS\u003d2020-08-14\u0026zFS\u003ddcchan98\u0026zU\u003d2020-11-05\u0026zMG\u003dfalse\u0026zFTF\u003dcommit\u0026zFGS\u003dgroupByRepos\u0026zFR\u003dfalse) "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "## Other Contributions"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "  * Managed releases `v1.3 trial` and `v1.3` (2 releases) on GitHub"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "* **Enhancements to existing features**:    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "  * **Add Defensive elements**: Made use of assertions to ensure proper caloric amount for macronutrients [\\#49](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/49)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    * What it does: It only allows specific value of different MacroNutrients to be keyed in."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    * Justification: As there are only 3 main form of macronutrients our application allows, we want to make sure that the values we add corresponds to these macronutrients exact value."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "  * **Add Defensive Elements**: Add test for model manager for clear and find command [\\#229](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/229)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    * What it does: Ensures the correctness of the model manager on the backend."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    * Justification: Find and clear has to work hand in hand because clear removes the items created by find in model manager\u0027s list. This test is thus imperative to ensure there are no regressions should changes be made there in future."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "  * **Add Defensive elements**: Add relevant test for food [\\#57](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/57)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    * What it does: Ensure the correctness of the food class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    * Justification: The correctness of food is important as the application builds on this."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    * Highlights: Tests detected a major error whereby a food item incorrectly asserts that it has to have more than 0 calories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    * Streamlined entire document to make it user-friendly on front matters [\\#93](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/93)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    * Added implementation details of the `clear` feature. [\\#143](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/143)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    * PRs reviewed (with non-trivial review comments): [\\#49](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/49), [\\#56](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/56),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dcchan98": 58
    }
  },
  {
    "path": "docs/team/duong.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "title: Huynh Thai Duong\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "## Project: McGymmy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "McGymmy is a **desktop app for Software Engineers who need help managing their diet, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "This project has about 10 kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "Given below are my contributions to the project:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* **Code contributed**:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "[RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003daidoxe-123\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* **New Feature**: Create the food model."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * What it does: this is the food item that McGymmy keeps track of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * Justification: "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * Highlights: It is important that this feature must be bug-free, otherwise it could cause subtle bugs in other parts of the code base, such as the one mentioned in"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": " this [pull request](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/120)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* **New Feature**: Added the date property for food."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * What it does: allows user to add date for the food item"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * Justification: This enhancement includes updating the UI so that it shows date property, and updating the storage to store date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * Highlights: This date property can accept inputs in various formats"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * Credits: The idea of implementing this is taken from this StackOverflow\u0027s [post](https://stackoverflow.com/questions/4024544/how-to-parse-dates-in-multiple-formats-using-simpledateformat)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* **New Feature**: Added the ability to undo previous commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  The process of implementing this feature is difficult and time-consuming, as it includes testing if it interacts correctly with all existing components."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  This process help me found a bug relating to mutable `Tag` set in `Food` and fix it"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": " * **New Feature**: Allowed finding food by tag. [\\#82](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/82)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * What it does: allows user to categorize food by tag"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * Justification: I found that user can add tag to food item, but there is no meaningful usage of them beside viewing. "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  Therefore I decided to make find command to work with tag, so that users can use tag as a way to categorize their food."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* **Enhancement**: "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * Tweaked [AB3\u0027s UniquePersonList](https://github.com/nus-cs2103-AY2021S1/tp/blob/master/src/main/java/seedu/address/model/person/UniquePersonList.java) to become a `Fridge` class that allows duplicate foods.  "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * Added tests for codes written by my teammates to minimize the possibility of getting bugs: [\\#70](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/70),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "[\\#69](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/69)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * Enabled assertion on Java CI [\\#109](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/109) "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    * Added documentation for the `undo` feature [\\#131](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/131)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    * Updated the existing commands to include date, and add an appendix to show supported date formats [\\#91](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/91)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    * Document the undo feature in the DG, including updated all the diagrams inside that section"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    * Updated the user profile, value proposition, and user stories [\\#17](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/17)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    * Updated the glossary [\\#150](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/150), [\\#41](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/41)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    * Update storage class diagram [\\#100](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/100)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": " * PRs reviewed (with non-trivial review comments): [\\#39](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/39),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": " [\\#57](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/57), [\\#76](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/76),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": " [\\#104](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/104)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": " * Contributed to forum discussion: "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "   1. Help fix trailing white space [forum#276](https://github.com/nus-cs2103-AY2021S1/forum/issues/276)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "   2. Share how to temporary disable checkstyle [forum#260](https://github.com/nus-cs2103-AY2021S1/forum/issues/260)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "   3. Explain why a test fails: [forum\\#65](https://github.com/nus-cs2103-AY2021S1/forum/issues/65)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": " * Reported bugs and suggestions for other teams in the class: [List of bugs and suggestions](https://github.com/aidoxe-123/ped/issues)"
      }
    ],
    "authorContributionMap": {
      "aidoxe-123": 67
    }
  },
  {
    "path": "docs/team/jh123x.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "title: Wen Junhua\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "## Project: McGymmy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "This portfolio aims to document the contributions that I have made to the McGymmy project. McGymmy can be found [here](https://github.com/AY2021S1-CS2103T-W17-3/tp/releases)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "McGymmy is a desktop diet tracking application to provide a simple an easy way for users to track their diet. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "## Code contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* **New Feature**: Added the ability to tag and untag food items. [\\#65](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/65)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  * What it does: allows the user to tag and untag food items as and when they need to."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  * Highlights: This update will add additional functionality to the find command as it is able to search for Tags as well."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* **New Feature**: Added the ability to import [\\#87](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/87) and export files [\\#94](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/94)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  * What it does: allows the user to `import` and `export` McGymmy save files both in CLI and GUI."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can transfer their data to other McGymmy programs. A GUI is provided so that users who do not remember their file structure can browse through their system to find the directory they want. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  * Highlights: This enhancement supports future updates to food items if more attributes are to be added."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  * Credits: *JavaFX Library and Documentation*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* **New Feature**: Added calendar filter features into the GUI [\\#80](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/80/)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  * What it does: allows the user to filter the food items based on the date that is selected import. "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  * Justification: For those who are unfamiliar with the UG."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  * Credits: *JFoenix library*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* **New Feature**: Did pair programming with [Sean](team/dcchan98) to add a `PieChart` with summary values along with the labels for total calories. [\\#80](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/80/)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  * What it does: The `PieChart` shows the percentage and weight of the different MacroNutrients as well as the total calories consumed "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  * Justification: The Visualisation of the data allows the user to get a rough idea how much he had consumed, compared to just staring at numbers. It also provides more visual impact to the user and give them a sense of progress."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  * Highlights: The animations of the PieChart was buggy and does not work as expected. As such we disabled the animation."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  * Credits: *JavaFx Library and Documentation*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* **Code contributed**: [Commits](https://github.com/AY2021S1-CS2103T-W17-3/tp/commits/master?author\u003djh123x), [RepoSense](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003djh123x\u0026tabRepo\u003dAY2021S1-CS2103T-W17-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other) "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "## Other Contributions"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  * Managed releases `v1.3 trial` and `v1.3` (2 releases) on GitHub"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  * **Refactoring**: Did pair programming with [Kamil](team/chewypiano) to refactor the code in AB3 to McGymmy "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    * What it does: Combine the functionality of the food classes together with the code of AB3 and rename packages to fit into the McGymmy context."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    * Justification: allows everyone on the team to have a clear interface where they can interact with other packages more effectively. It also changes the package name to McGymmy from AddressBook3"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  * **Refactoring**: Did pair programming with [Joey](team/joeychensmart) to refactor the `IllegalArgumentException` to `IllegalValueException`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    * What it does: This helps us quickly identify where the exceptions were uncaught as Java do not enforce catching runtime exceptions."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    * Justification: This refactor makes it easier to identify where the bugs where the IllegalArgumentException is not caught."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    * Challenges: `IllegalArgumentException` is coupled tightly with AB3 code, and we had to make decisions on where to catch the error. Some streams also had to be changed to catch the errors arising from the refactoring."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  * **Add Defensive elements**: Limit the maximum value of Food values and numbers [\\#119](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/119)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    * What it does: It sets a hard limit on the value of different MacroNutrients to be keyed in"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    * Justification: As our graph shows the total amount of calories, there was a possibility of integer overflow. As a result, we decided to change the variable to long int and limit the maximum value of MacroNutrients allowed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  * **Add Defensive elements**: Limit the maximum length of `Tags` [\\#197](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/197)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    * What it does: It prevents the tags from exceeding the frame of the ListBox"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    * Justification: As tags get deleted based on the name of the tag, it is more user-friendly for the user to be able to see the tags. "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    * Highlights: We decided on the maximum length of the tag based on the smallest window that our GUI can be resized to and check the number of characters that can fit based on that resolution and arrived at the conclusion that the tag should be less than 20 characters."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    * Added Screenshots for User Interface for McGymmy [\\#205](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/205) [\\#151](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/151) [\\#78](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/78)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    * Added more questions to FAQ [\\#151](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/151/)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    * Added implementation details of the `import` feature. [\\#103](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/103)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  * PRs reviewed: [PRs](https://github.com/AY2021S1-CS2103T-W17-3/tp/pulls?q\u003dis%3Apr+is%3Aclosed+reviewed-by%3A%40me+)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  * Integrated a third party library (Jfoenix) to the project ([\\#80](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/80/))"
      }
    ],
    "authorContributionMap": {
      "jh123x": 72
    }
  },
  {
    "path": "docs/team/joeychensmart.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "title: Joey Chen\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "## Project: McGymmy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "McGymmy is a desktop diet tracker application for health-conscious software engineers."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* **Redesigned Feature**: Redesigned the logic component of McGymmy."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  * What I changed: Replaced the existing parser with the [Apache commons-cli](https://github.com/apache/commons-cli) library, and made the creation of commands follow"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  a more declarative style. Also eliminated the need for parsers for each command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  * Justification: I found that the old architecture was problematic as it required the programmer to create a lot of boilerplate just to achieve simple tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  For more information, you can visit"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  [the pull request](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/39)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  * Highlights: Developers now need to write about half the amount of code to get new features working. The code in each command class was also neater, and more intuitive by virtue of being more declarative."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  The design had to be carefully thought out to maximize developer productivity, and cost-benefit analysis had to be carried out for many design alternatives, including the original."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  The implementation was non-trivial, and required changing about 3 kLoC. The new API also had to be documented well enough for fellow developers to understand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  * Credits: As mentioned above, this design made use of the [Apache commons-cli](https://github.com/apache/commons-cli) library for parsing text from the user, and automatically"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  generating help text. All other work is solely by me."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* **New Feature**: Added the ability to create macros."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  * What it does: allows the user to create a \u0027macro\u0027 to run several commands in succession. Macros are saved on disk, and can be deleted in the CLI."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  * Justification: This feature allows users to automate routine, repetitive tasks by creating a macro or alias for it."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  * Highlights: This enhancement works for all commands in the app. The design had to be carefully crafted to ensure the implementation was easy to carry out and understand,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  and followed good design principles, and also to avoid bugs such as infinite loops. The implementation was also non-trivial, and required creating many different classes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  * Credits: The design and implementation was inspired by [my ip](https://github.com/JoeyChenSmart/ip), but many design and implementation details were revisited and"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  tweaked to fit with McGymmy (e.g. saving to storage). Both implementations also rely on the redesigned logic component above."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* **New Feature**: Added a help command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  * Highlights: This feature leverages on the above redesigned logic component. Cleverly reusing information provided by the developer using the declarative style,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  this feature automatically generates help strings for each command. The design was carefully thought out to follow the DRY (don\u0027t repeat yourself) principle, to minimize"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  bugs due to code duplication."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  * Credits: The idea, design and implementation were all carried out by me."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003djoeychensmart\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003djoeychensmart\u0026tabRepo\u003dAY2021S1-CS2103T-W17-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  * Created the github organization for the group and project repository."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  * Created the issue label `code quality improvements` and several issues related to it (e.g. [214](https://github.com/AY2021S1-CS2103T-W17-3/tp/issues/214), [215](https://github.com/AY2021S1-CS2103T-W17-3/tp/issues/215)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  * Copied over draft UG from google docs to the repo. [\\#22](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/22)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  * Fixed bug related to `RuntimeExceptions` with Jun Hua [216](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/216)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    * Add documentation for the features `macro` [\\#63](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/63), `listmacro` and `remmacro` [\\#142](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/142)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    * * Note: I wrote the documentation for macro in the PR comment [\\#63](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/63), and Jun Hua helped me copy it into the UG in another PR."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    * Added reader-friendly elaboration on command format: [\\#93](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/93)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    * Added implementation details of the `macro` feature, and updated the section on the `logic` component under project architecture."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#49](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/49), [\\#53](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/53),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  [\\#56](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/56), [\\#97](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/97), "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  [\\#104](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/104), [\\#105](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/105), "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  [\\#106](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/106)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  * Contributed to forum discussions: [Discussion on CI](https://github.com/nus-cs2103-AY2021S1/forum/issues/264)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](https://github.com/JoeyChenSmart/ped/issues/1), [2](https://github.com/JoeyChenSmart/ped/issues/2), [3](https://github.com/JoeyChenSmart/ped/issues/3), [4](https://github.com/JoeyChenSmart/ped/issues/4))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  * Integrated a third party library [Apache commons-cli](https://github.com/apache/commons-cli) to the project ([\\#39](https://github.com/AY2021S1-CS2103T-W17-3/tp/pull/39))"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 66
    }
  },
  {
    "path": "docs/team/johndoe.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "## Project: McGymmy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "McGymmy is a desktop diet tracker application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    * Add documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "jh123x": 3,
      "-": 43
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Looking in the `jimmy.mcgymmy.logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/jimmy/mcgymmy/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Changes the remark of an existing food in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `McGymmyParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the food identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            + \"by the index number used in the last food listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @param index of the food in the filtered food list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @param remark of the food to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Create a `RemarkCommandParser` class in the `jimmy.mcgymmy.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of food data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the food’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a food."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Create a new `Remark` in `jimmy.mcgymmy.model.food`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each food."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Simply add the following to [`jimmy.mcgymmy.ui.FoodCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public PersonCard(Person food, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    remark.setText(food.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Person editedFood \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        model.setPerson(personToEdit, editedFood);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedFood));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "jh123x": 21,
      "-": 373
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "The `address` field in `Person` is actually an instance of the `jimmy.mcgymmy.model.food.Carbohydrate` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cLabel fx:id\u003d\"protein\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$protein\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cLabel fx:id\u003d\"fat\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$fat\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  \"foods\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    \"protein\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    \"fat\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "jh123x": 6,
      "-": 97
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `jimmy.mcgymmy.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "       Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jh123x"
        },
        "content": "       Person editedFood \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jh123x"
        },
        "content": "       if (!personToEdit.isSamePerson(editedFood) \u0026\u0026 model.hasPerson(editedFood)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jh123x"
        },
        "content": "       model.setPerson(personToEdit, editedFood);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jh123x"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedFood));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jh123x"
        },
        "content": "       foods.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "jh123x": 6,
      "-": 244
    }
  },
  {
    "path": "gradle/wrapper/gradle-wrapper.properties",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "#Tue Sep 15 09:03:03 SGT 2020"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "distributionUrl\u003dhttps\\://services.gradle.org/distributions/gradle-5.2.1-all.zip"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "distributionBase\u003dGRADLE_USER_HOME"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "distributionPath\u003dwrapper/dists"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "zipStorePath\u003dwrapper/dists"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "zipStoreBase\u003dGRADLE_USER_HOME"
      }
    ],
    "authorContributionMap": {
      "aidoxe-123": 3,
      "-": 3
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 11,
      "-": 53
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 5,
      "-": 20
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.MacroList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.storage.JsonMacroListStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.storage.JsonMcGymmyStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.storage.MacroListStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.storage.McGymmyStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing McGymmy ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmyStorage mcGymmyStorage \u003d new JsonMcGymmyStorage(userPrefs.getMcGymmyFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        MacroListStorage macroListStorage \u003d new JsonMacroListStorage(userPrefs.getMacroListFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        storage \u003d new StorageManager(mcGymmyStorage, macroListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s McGymmy and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * The data from the sample McGymmy will be used instead if {@code storage}\u0027s McGymmy is not found,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * or an empty McGymmy will be used instead if errors occur when reading {@code storage}\u0027s McGymmy."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Optional\u003cReadOnlyMcGymmy\u003e mcGymmyOptional;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ReadOnlyMcGymmy initialData;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        MacroList macroList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            mcGymmyOptional \u003d storage.readMcGymmy();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            if (mcGymmyOptional.isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample McGymmy\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            if (mcGymmyOptional.isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                initialData \u003d SampleDataUtil.getSampleMcGymmy();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                initialData \u003d mcGymmyOptional.get();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            macroList \u003d storage.readMacroList().orElseGet(MacroList::new);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            assert false : \"Sample Mcgymmy has an Error\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            logger.warning(\"There was an error in Sample McGymmy. Will be starting with an empty McGymmy\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            initialData \u003d new McGymmy();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            macroList \u003d new MacroList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty McGymmy\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            initialData \u003d new McGymmy();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            macroList \u003d new MacroList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty McGymmy\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            initialData \u003d new McGymmy();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            macroList \u003d new MacroList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return new ModelManager(initialData, userPrefs, macroList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty McGymmy\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        logger.info(\"Starting McGymmy \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping McGymmy ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 55,
      "joeychensmart": 10,
      "-": 137
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String LOG_FILE \u003d \"mcgymmy.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "jh123x": 1,
      "-": 109
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_INVALID_FOOD_DISPLAYED_INDEX \u003d \"The food index provided is invalid\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_FOOD_LISTED_OVERVIEW \u003d \"%1$d food items listed!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "jh123x": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new IllegalValueException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 16,
      "jh123x": 5,
      "-": 98
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public static final String MESSAGE_INDEX_TOO_LARGE \u003d \"Index should be smaller than 2^31.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final int zeroBasedIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 10,
      "jh123x": 2,
      "-": 43,
      "aidoxe-123": 1
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws IllegalValueException if {@code condition} is false."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static void checkArgument(Boolean condition) throws IllegalValueException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new IllegalValueException(\"Error\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws IllegalValueException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) throws IllegalValueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new IllegalValueException(errorMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "jh123x": 5,
      "joeychensmart": 2,
      "-": 34
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 4,
      "-": 33
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "-": 82
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 7,
      "jh123x": 1,
      "-": 138
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) throws IllegalValueException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 4,
      "jh123x": 3,
      "-": 64
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns McGymmy."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @see Model#getMcGymmy()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    ReadOnlyMcGymmy getMcGymmy();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of persons"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns the user prefs\u0027 mcgymmy file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Path getMcGymmyFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 18,
      "-": 36
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandExecutable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.parser.McGymmyParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.MacroList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private McGymmyParser mcGymmyParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            Optional\u003cMacroList\u003e optionalMacroList \u003d storage.readMacroList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.mcGymmyParser \u003d optionalMacroList"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    .map(macroList -\u003e new McGymmyParser(macroList))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    .orElseGet(McGymmyParser::new);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (IOException | DataConversionException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.mcGymmyParser \u003d new McGymmyParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandExecutable executable \u003d mcGymmyParser.parse(commandText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        commandResult \u003d executable.execute(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        mcGymmyParser.setMacroList(model.getMacroList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            storage.saveMacroList(mcGymmyParser.getMacroList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            storage.saveMcGymmy(model.getMcGymmy());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public ReadOnlyMcGymmy getMcGymmy() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return model.getMcGymmy();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return model.getFilteredFoodList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Path getMcGymmyFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return model.getMcGymmyFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 17,
      "joeychensmart": 18,
      "-": 58
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.OptionalParameter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.Parameter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.date.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Fat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Protein;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Adds a food to mcgymmy."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String SHORT_DESCRIPTION \u003d \"Add a new food item to McGymmy.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New food added: \\n%1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Parameter\u003cName\u003e nameParameter \u003d this.addParameter("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"name\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"n\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Name of food to add\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Chicken Rice\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            ParserUtil::parseName"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    );"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private OptionalParameter\u003cProtein\u003e proteinParameter \u003d this.addOptionalParameter("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"protein\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"p\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Protein value of food (g)\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"10\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ParserUtil::parseProtein"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private OptionalParameter\u003cFat\u003e fatParameter \u003d this.addOptionalParameter("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"fat\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"f\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Fat value of food (g)\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"10\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ParserUtil::parseFat"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private OptionalParameter\u003cCarbohydrate\u003e carbParameter \u003d this.addOptionalParameter("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"carb\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"c\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Carbohydrate value of food (g)\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"10\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ParserUtil::parseCarb"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private OptionalParameter\u003cDate\u003e dateParameter \u003d this.addOptionalParameter("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            \"date\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            \"d\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            \"Date on which the food is consumed\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            \"20-04-2020\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            ParserUtil::parseDate"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private OptionalParameter\u003cTag\u003e tagParameter \u003d this.addOptionalParameter("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"tag\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"t\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Tag associated with the Food\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Lunch\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ParserUtil::parseTag"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    );"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void setParameters(Parameter\u003cName\u003e nameParameter, OptionalParameter\u003cProtein\u003e proteinParameter,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                       OptionalParameter\u003cFat\u003e fatParameter, OptionalParameter\u003cCarbohydrate\u003e carbParameter,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                       OptionalParameter\u003cTag\u003e tagParameter, OptionalParameter\u003cDate\u003e dateParameter) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.nameParameter \u003d nameParameter;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.proteinParameter \u003d proteinParameter;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.fatParameter \u003d fatParameter;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.carbParameter \u003d carbParameter;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.tagParameter \u003d tagParameter;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        this.dateParameter \u003d dateParameter;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Name newName \u003d nameParameter.consume();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Protein newProtein \u003d this.proteinParameter.getValue().orElse(Protein.newDefault());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Fat newFat \u003d this.fatParameter.getValue().orElse(Fat.newDefault());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Carbohydrate newCarb \u003d this.carbParameter.getValue().orElse(Carbohydrate.newDefault());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Date newDate \u003d this.dateParameter.getValue().orElse(Date.currentDate());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food toAdd \u003d new Food(newName, newProtein, newFat, newCarb, newDate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (this.tagParameter.getValue().isPresent()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            Tag newTag \u003d this.tagParameter.getValue().get();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            toAdd \u003d toAdd.addTag(newTag);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        model.addFood(toAdd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 53,
      "joeychensmart": 15,
      "-": 14,
      "aidoxe-123": 13
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Clears current list of items in McGymmy."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String SHORT_DESCRIPTION \u003d \"Delete all food items currently shown in McGymmy.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"List has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        model.clearFilteredFood();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcchan98": 2,
      "jh123x": 4,
      "-": 17
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParameterConflictException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.AbstractParameter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.OptionalParameter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.Parameter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.ParameterConverter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.ParameterSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public abstract class Command implements CommandExecutable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final ParameterSet parameterSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    protected Command() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.parameterSet \u003d new ParameterSet();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Registers a parameter for use in the parameter set."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Only registered parameters will be used in parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param parameter parameter to be registered."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    protected void registerParameter(AbstractParameter parameter) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.parameterSet.addParameter(parameter);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (ParameterConflictException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            // Commands can only be created by the developers so any parameter conflicts"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            // should not happen, and should fail here during testing."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            assert false : e.getMessage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new RuntimeException(e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Creates a new required parameter for this command. Also registers it for parsing in the parameter set,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * i.e. will be used in the parser."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param name        Name of the parameter."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param flag        flag used in the command, e.g. \u0027-c\u0027 in \u0027add banana -c 100\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param description short description of what the parameter represents, e.g. \u0027carbs as an integer\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param example     example value, e.g. \u0027100\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param converter   Function to parse the value from a String to T. May throw a ParseError."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    protected \u003cT\u003e Parameter\u003cT\u003e addParameter(String name, String flag, String description,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                                            String example, ParameterConverter\u003cT\u003e converter) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Parameter\u003cT\u003e parameter \u003d new Parameter\u003c\u003e(name, flag, description, example, converter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.registerParameter(parameter);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return parameter;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Creates a new required parameter for this command. Parameter will contain the raw input from the user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Also registers it for parsing in the parameter set, i.e. will be used in the parser."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param name        Name of the parameter."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param flag        flag used in the command, e.g. \u0027-c\u0027 in \u0027add banana -c 100\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param description short description of what the parameter represents, e.g. \u0027carbs as an integer\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param example     example value, e.g. \u0027100\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    protected Parameter\u003cString\u003e addParameter(String name, String flag, String description, String example) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.addParameter(name, flag, description, example, (s) -\u003e s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Creates a new optional parameter for this command. Also registers it for parsing in the parameter set,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * i.e. will be used in the parser."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param name        Name of the parameter."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param flag        flag used in the command, e.g. \u0027-c\u0027 in \u0027add banana -c 100\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param description short description of what the parameter represents, e.g. \u0027carbs as an integer\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param example     example value, e.g. \u0027100\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param converter   Function to parse the value from a String to T. May throw a ParseError."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    protected \u003cT\u003e OptionalParameter\u003cT\u003e addOptionalParameter(String name, String flag, String description,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                                                            String example, ParameterConverter\u003cT\u003e converter) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        OptionalParameter\u003cT\u003e parameter \u003d new OptionalParameter\u003c\u003e(name, flag, description, example, converter);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.registerParameter(parameter);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return parameter;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Creates a new optional parameter for this command. Parameter will contain the raw input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Also registers it for parsing in the parameter set, i.e. will be used in the parser."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param name        Name of the parameter."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param flag        flag used in the command, e.g. \u0027-c\u0027 in \u0027add banana -c 100\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param description short description of what the parameter represents, e.g. \u0027carbs as an integer\u0027"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param example     example value, e.g. \u0027100\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    protected OptionalParameter\u003cString\u003e addOptionalParameter(String name, String flag, String description,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                                                             String example) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.addOptionalParameter(name, flag, description, example, (s) -\u003e s);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public ParameterSet getParameterSet() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return parameterSet;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 12,
      "joeychensmart": 82,
      "-": 7
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/CommandExecutable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Interface for generalized Commands run by the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public interface CommandExecutable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 19
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean exit) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this(feedbackToUser, false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return Objects.hash(feedbackToUser, exit);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 4,
      "jh123x": 3,
      "-": 57
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.Parameter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Deletes a food identified using it\u0027s displayed index from mcgymmy."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String SHORT_DESCRIPTION \u003d \"Delete the selected food item.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public static final String MESSAGE_DELETE_FOOD_SUCCESS \u003d \"Deleted Food: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Parameter\u003cIndex\u003e indexParameter \u003d this.addParameter("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"index\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"index number used in the displayed food list.\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"2\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            ParserUtil::parseIndex"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    );"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void setParameters(Parameter\u003cIndex\u003e indexParameter) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.indexParameter \u003d indexParameter;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        List\u003cFood\u003e lastShownList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Index targetIndex \u003d indexParameter.consume();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food foodToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        model.deleteFood(targetIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FOOD_SUCCESS, foodToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "jh123x": 13,
      "joeychensmart": 13,
      "-": 21,
      "aidoxe-123": 1
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.OptionalParameter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.Parameter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.date.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Fat;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Protein;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Edits the details of an existing food in mcgymmy."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String SHORT_DESCRIPTION \u003d \"Edit the selected food item.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public static final String MESSAGE_FOOD_NO_CHANGE \u003d \"The food item does not change:\\n%1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public static final String MESSAGE_EDIT_FOOD_SUCCESS \u003d \"Edited Food:\\n%1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Parameter\u003cIndex\u003e indexParameter \u003d this.addParameter("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"index\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"index number used in the displayed food list.\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"2\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            ParserUtil::parseIndex"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private OptionalParameter\u003cName\u003e nameParameter \u003d this.addOptionalParameter("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"name\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"n\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Name of food to add\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"John Doe\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            ParserUtil::parseName"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private OptionalParameter\u003cProtein\u003e proteinParameter \u003d this.addOptionalParameter("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"protein\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"p\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Protein value of food (g)\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"10\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ParserUtil::parseProtein"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private OptionalParameter\u003cFat\u003e fatParameter \u003d this.addOptionalParameter("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"fat\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"f\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Fat value of food (g)\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"10\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ParserUtil::parseFat"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private OptionalParameter\u003cCarbohydrate\u003e carbParameter \u003d this.addOptionalParameter("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"carb\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"c\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Carbohydrate value of food (g)\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"10\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ParserUtil::parseCarb"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private OptionalParameter\u003cDate\u003e dateParameter \u003d this.addOptionalParameter("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        \"date\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        \"d\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        \"Date on which the food is consumed\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        \"20-04-2020\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        ParserUtil::parseDate"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    );"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void setParameters(Parameter\u003cIndex\u003e indexParameter, OptionalParameter\u003cName\u003e nameParameter,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                       OptionalParameter\u003cProtein\u003e proteinParameter, OptionalParameter\u003cFat\u003e fatParameter,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                       OptionalParameter\u003cCarbohydrate\u003e carbParameter, OptionalParameter\u003cDate\u003e dateParameter) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.indexParameter \u003d indexParameter;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.nameParameter \u003d nameParameter;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.proteinParameter \u003d proteinParameter;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.fatParameter \u003d fatParameter;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.carbParameter \u003d carbParameter;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        this.dateParameter \u003d dateParameter;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Check for Starting Exceptions."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @param lastShownList Current FilteredList that is shown."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @param index Index input from the user."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @throws CommandException if Index is out of range or there was no arguments provided."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private void checkForExceptions(List\u003cFood\u003e lastShownList, Index index) throws CommandException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (nameParameter.getValue().isEmpty() \u0026\u0026 proteinParameter.getValue().isEmpty()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                \u0026\u0026 fatParameter.getValue().isEmpty() \u0026\u0026 carbParameter.getValue().isEmpty()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                \u0026\u0026 dateParameter.getValue().isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        List\u003cFood\u003e lastShownList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Index index \u003d indexParameter.consume();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Check for Errors."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        checkForExceptions(lastShownList, index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food foodToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Name newName \u003d this.nameParameter.getValue().orElseGet(foodToEdit::getName);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Protein newProtein \u003d this.proteinParameter.getValue().orElseGet(foodToEdit::getProtein);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Fat newFat \u003d this.fatParameter.getValue().orElseGet(foodToEdit::getFat);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Carbohydrate newCarb \u003d this.carbParameter.getValue().orElseGet(foodToEdit::getCarbs);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Date newDate \u003d this.dateParameter.getValue().orElseGet(foodToEdit::getDate);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Set\u003cTag\u003e tags \u003d foodToEdit.getTags();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food editedFood \u003d new Food(newName, newProtein, newFat, newCarb, tags, newDate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        if (foodToEdit.equals(editedFood)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_FOOD_NO_CHANGE, editedFood));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        model.setFood(index, editedFood);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_FOOD_SUCCESS, editedFood));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 71,
      "joeychensmart": 22,
      "-": 19,
      "aidoxe-123": 21
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String SHORT_DESCRIPTION \u003d \"Exit McGymmy.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting McGymmy as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "jh123x": 2,
      "joeychensmart": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/ExportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.OptionalParameter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.Parameter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.storage.JsonMcGymmyStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Exports the current McGymmy to a directory."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String SHORT_DESCRIPTION \u003d \"Export McGymmy save file to directory\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Exported to %s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"File failed to save to %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String DEFAULT_FILENAME \u003d \"mcgymmy.json\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final Logger exportLogger \u003d LogsCenter.getLogger(ExportCommand.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Parameter\u003cPath\u003e pathParameter \u003d addParameter("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"directoryPath\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Path to directory to save McGymmy file\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"C:/mcgymmy\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ParserUtil::parseDir"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private OptionalParameter\u003cString\u003e outputFileName \u003d addOptionalParameter("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"outputName\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"o\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Output name of McGymmy file\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"mcgymmy.json\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ParserUtil::parseOutputName"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void setPathParameter(Parameter\u003cPath\u003e pathParameter, OptionalParameter\u003cString\u003e outputFileName) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.pathParameter \u003d pathParameter;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.outputFileName \u003d outputFileName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Get the path parameter"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Path path \u003d pathParameter.consume();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String filename \u003d outputFileName.getValue().orElseGet(() -\u003e DEFAULT_FILENAME);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        exportLogger.info(String.format(\"Directory Selected: %s\", path.toString()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Check if the directory exists"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        File file \u003d new File(path.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            exportLogger.warning(\"Directory does not exist\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FAILURE, path.toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Add the mcgymmy filename to export"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        path \u003d Paths.get(path.toString(), filename);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        JsonMcGymmyStorage mcGymmyStorage \u003d new JsonMcGymmyStorage(path);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            mcGymmyStorage.saveMcGymmy(model.getMcGymmy());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            exportLogger.warning(e.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FAILURE, path.toString()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Return the successful commandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, path.toString()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 78
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.OptionalParameter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.predicate.DatePredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.logic.predicate.FoodContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.predicate.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.predicate.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Finds and lists all persons in mcgymmy whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String SHORT_DESCRIPTION \u003d \"Filter the displayed list by a given keyword.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(FindCommand.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private OptionalParameter\u003cFoodContainsKeywordsPredicate\u003e foodPredicateParameter \u003d this.addOptionalParameter("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"keyword\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"keywords (case-insensitive).\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            \"chicken beef mutton\", (s) -\u003e new FoodContainsKeywordsPredicate(Arrays.asList(s.split(\"\\\\s+\")))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private OptionalParameter\u003cNameContainsKeywordsPredicate\u003e namePredicateParameter \u003d this.addOptionalParameter("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            \"name\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            \"n\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            \"Name of the Food\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            \"Cereal\", (s) -\u003e new NameContainsKeywordsPredicate(Arrays.asList(s.split(\"\\\\s+\")))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private OptionalParameter\u003cTagContainsKeywordsPredicate\u003e tagPredicateParameter \u003d this.addOptionalParameter("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            \"tag\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            \"t\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            \"Tag associated with the Food\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            \"Lunch\", (s) -\u003e new TagContainsKeywordsPredicate(Arrays.asList(s.split(\"\\\\s+\")))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private OptionalParameter\u003cDatePredicate\u003e datePredicateParameter \u003d this.addOptionalParameter("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            \"date\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            \"d\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            \"Date associated with the Food\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            \"20-04-2020\", DatePredicate::new"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    void setParameters(OptionalParameter\u003cFoodContainsKeywordsPredicate\u003e foodPredicateParameter,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                       OptionalParameter\u003cNameContainsKeywordsPredicate\u003e namePredicateParameter,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                       OptionalParameter\u003cTagContainsKeywordsPredicate\u003e tagPredicateParameter,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                       OptionalParameter\u003cDatePredicate\u003e datePredicateParameter) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        this.foodPredicateParameter \u003d foodPredicateParameter;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        this.namePredicateParameter \u003d namePredicateParameter;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        this.tagPredicateParameter \u003d tagPredicateParameter;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        this.datePredicateParameter \u003d datePredicateParameter;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        logger.fine(\"Executing find command\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        FoodContainsKeywordsPredicate foodPredicate \u003d foodPredicateParameter.getValue().orElse(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d namePredicateParameter.getValue().orElse(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        TagContainsKeywordsPredicate tagPredicate \u003d tagPredicateParameter.getValue().orElse(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        DatePredicate datePredicate \u003d datePredicateParameter.getValue().orElse(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Predicate\u003cFood\u003e combinedPredicate \u003d food -\u003e true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        ArrayList\u003cPredicate\u003cFood\u003e\u003e predicateList \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                foodPredicate, namePredicate, tagPredicate, datePredicate));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        for (Predicate\u003cFood\u003e currentPredicate : predicateList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            if (currentPredicate !\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                combinedPredicate \u003d combinedPredicate.and(currentPredicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        model.updateFilteredFoodList(combinedPredicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                String.format(Messages.MESSAGE_FOOD_LISTED_OVERVIEW, model.getFilteredFoodList().size()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 56,
      "jh123x": 2,
      "joeychensmart": 11,
      "-": 15,
      "aidoxe-123": 3
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/ImportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.Parameter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.storage.JsonMcGymmyStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Imports a McGymmy datafile into McGymmy."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String SHORT_DESCRIPTION \u003d \"Import a McGymmy Save file\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_IMPORT_FOOD_SUCCESS \u003d \"Imported %s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_IMPORT_FOOD_FAILURE \u003d \"Please select a valid .json file: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final Logger importLogger \u003d LogsCenter.getLogger(ExportCommand.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Parameter\u003cPath\u003e fileParameter \u003d this.addParameter("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"filepath\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"File path to the McGymmy save file\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"C:/McGymmy/data\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ParserUtil::parseFile"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void setParameters(Parameter\u003cPath\u003e fileParameter) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.fileParameter \u003d fileParameter;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Path filepath \u003d fileParameter.consume();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        JsonMcGymmyStorage importedMcgymmy \u003d new JsonMcGymmyStorage(filepath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String localFailureMessage \u003d String.format(MESSAGE_IMPORT_FOOD_FAILURE, filepath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String localSuccessMessage \u003d String.format(MESSAGE_IMPORT_FOOD_SUCCESS, filepath.getFileName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            Optional\u003cReadOnlyMcGymmy\u003e readOnlyMcGymmyOptional \u003d importedMcgymmy.readMcGymmy();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            if (readOnlyMcGymmyOptional.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                throw new CommandException(localFailureMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            model.setMcGymmy(readOnlyMcGymmyOptional.get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            importLogger.fine(localSuccessMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return new CommandResult(localSuccessMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            importLogger.warning(localFailureMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new CommandException(localFailureMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 64
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Lists all food items in McGymmy to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String SHORT_DESCRIPTION \u003d \"Display all food items.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all food\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        model.updateFilteredFoodList(Model.PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 5,
      "joeychensmart": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/ListMacroCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.OptionalParameter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.Macro;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.MacroList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Lists all macros, or specific info on a macro."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class ListMacroCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listmacro\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String SHORT_DESCRIPTION \u003d \"List all macros in McGymmy.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private OptionalParameter\u003cString\u003e commandNameParameter \u003d this.addOptionalParameter("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"which\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"List details of a specific macro\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"deleteMatching\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    );"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void setParameters(OptionalParameter\u003cString\u003e commandNameParameter) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.commandNameParameter \u003d commandNameParameter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        MacroList macroList \u003d model.getMacroList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Optional\u003cString\u003e commandName \u003d commandNameParameter.getValue();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (commandName.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return new CommandResult(listAllMacros(macroList));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String macroName \u003d commandName.get();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (!macroList.hasMacro(macroName)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new CommandException(macroName + \" is not an existing macro.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return new CommandResult(formatMacro(macroList.getMacro(macroName)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private String listAllMacros(MacroList macroList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"Here are all the available macros.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        sb.append(\"\\n\\nType \u0027\").append(COMMAND_WORD).append(\" [MACRO_NAME]\u0027 for more info on a specific macro.\\n\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (Macro macro : macroList.getAsList()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            sb.append(macro.getName()).append(\"\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private String formatMacro(Macro macro) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"Information on macro \").append(macro.getName()).append(\":\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        sb.append(\"\\nParameters: \").append(String.join(\", \", macro.getMacroArguments()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        sb.append(\"\\nDeclaration: \").append(String.join(\"; \", macro.getRawCommands()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 62
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/RemoveMacroCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.Parameter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.MacroList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Removes a Macro from the Model."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class RemoveMacroCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remmacro\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String SHORT_DESCRIPTION \u003d \"Remove a macro in McGymmy.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Macro successfully removed: \\n%1$s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Parameter\u003cString\u003e commandNameParameter \u003d this.addParameter("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"which\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"Delete the specific macro\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"deleteMatching\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    );"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void setParameters(Parameter\u003cString\u003e commandNameParameter) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.commandNameParameter \u003d commandNameParameter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        MacroList macroList \u003d model.getMacroList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String macroName \u003d commandNameParameter.consume();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (!macroList.hasMacro(macroName)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new CommandException(macroName + \" is not an existing macro.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        model.setMacroList(macroList.withoutMacro(macroName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, macroName));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 3,
      "joeychensmart": 36
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/TagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.Parameter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Tags a food item with a Tag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class TagCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String SHORT_DESCRIPTION \u003d \"Add tags to the selected food item.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New tag added: %s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"Tag %s already exists in %s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Parameter\u003cIndex\u003e indexParameter \u003d this.addParameter("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"index\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Index of selected Food\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"1\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ParserUtil::parseIndex"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Parameter\u003cTag\u003e tagParameter \u003d this.addParameter("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Tag\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"t\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Tag to be added to food\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Lunch\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ParserUtil::parseTag"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void setParameters(Parameter\u003cIndex\u003e indexParameter, Parameter\u003cTag\u003e tagParameter) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.indexParameter \u003d indexParameter;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.tagParameter \u003d tagParameter;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        List\u003cFood\u003e lastShownList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Index index \u003d indexParameter.consume();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food foodToTag \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Tag tag \u003d tagParameter.consume();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        if (foodToTag.hasTag(tag)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_TAG, tag.tagName, foodToTag.getName().fullName));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food newFood \u003d foodToTag.addTag(tag);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        model.setFood(index, newFood); //To refresh the card"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, tag.tagName));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 64,
      "joeychensmart": 1,
      "aidoxe-123": 3
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/UnTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.Parameter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Removes tag from a food item."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class UnTagCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"untag\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String SHORT_DESCRIPTION \u003d \"Remove a tag from the selected food item.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Tag removed: %s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_NOT_FOUND_TAG \u003d \"Tag %s does not exist in %s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Parameter\u003cIndex\u003e indexParameter \u003d this.addParameter("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"index\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Index of selected Food\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"1\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ParserUtil::parseIndex"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Parameter\u003cTag\u003e tagParameter \u003d this.addParameter("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Tag\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"t\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Tag to be removed from food\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Lunch\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ParserUtil::parseTag"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void setParameters(Parameter\u003cIndex\u003e indexParameter, Parameter\u003cTag\u003e tagParameter) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.indexParameter \u003d indexParameter;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.tagParameter \u003d tagParameter;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        List\u003cFood\u003e lastShownList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Index index \u003d indexParameter.consume();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food foodToTag \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Tag tag \u003d tagParameter.consume();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        if (!foodToTag.hasTag(tag)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NOT_FOUND_TAG, tag.tagName, foodToTag.getName().fullName));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food newFood \u003d foodToTag.removeTag(tag);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        model.setFood(index, newFood); //To refresh the card"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, tag.tagName));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 64,
      "joeychensmart": 1,
      "aidoxe-123": 3
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Undoes the last command that changed ModelManager."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public static final String SHORT_DESCRIPTION \u003d \"Undo the last command.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public static final String MESSAGE_UNDO_SUCCESS \u003d \"Successfully undid the last command.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public static final String MESSAGE_NOT_UNDOABLE \u003d \"Cannot undo anymore.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        if (!model.canUndo()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            return new CommandResult(MESSAGE_NOT_UNDOABLE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        model.undo();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return new CommandResult(MESSAGE_UNDO_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 3,
      "aidoxe-123": 20
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/macro/MacroRunner.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.logic.macro;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.CommandLine;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.Option;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.LogicManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandExecutable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.parser.PrimitiveCommandParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.Macro;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Utility class that deals with the execution of macro objects."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class MacroRunner {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final Logger LOGGER \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static CommandExecutable asCommandInstance(Macro macro, CommandLine args) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return model -\u003e executeWith(model, substituteAll(args, macro.getRawCommands()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Executes the macro on the model."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Returns upon encountering a help or exit function"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * (i.e. does not attempt to execute any command"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * after encountering help or exit)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param model Model to run the macro\u0027s commands on."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return CommandResult produced by concatenating the messages from all the executed commands."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws CommandException if any command encounters an error."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static CommandResult executeWith(Model model, String[] substitutedCommands)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CollectionUtil.requireAllNonNull(model, substitutedCommands);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        List\u003cString\u003e messagesToUser \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        List\u003cCommandExecutable\u003e commandExecutables \u003d parseCommands(substitutedCommands);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        int lastCommandIndex \u003d 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            LOGGER.info(\"----------------[BEGIN MACRO EXECUTION]\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            for (lastCommandIndex \u003d 0; lastCommandIndex \u003c commandExecutables.size(); lastCommandIndex++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                CommandResult result \u003d commandExecutables.get(lastCommandIndex).execute(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                if (result.isExit()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    LOGGER.info(\"----------------[LAST COMMAND IS EXIT][TERMINATING]\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    return result;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                messagesToUser.add(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return new CommandResult(String.join(\"\\n\", messagesToUser));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            LOGGER.info(\"----------------[MACRO EXECUTION FAILED][\" + e.getMessage() + \"]\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            /* note: not factoring out code below because its only used here and its"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "               purpose/what it\u0027s doing is obvious, and factoring it out will be very messy. */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String errorLocation \u003d \"\\n\\nAn error occurred when executing this command:\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    + substitutedCommands[lastCommandIndex];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String doneCommands \u003d lastCommandIndex \u003d\u003d 0 ? \"\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    : \"\\n\\nThe following commands executed successfully:\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    + String.join(\"\\n\", Arrays.copyOfRange(substitutedCommands, 0, lastCommandIndex));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String notDoneCommands \u003d lastCommandIndex + 1 \u003d\u003d substitutedCommands.length ? \"\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    : \"\\n\\n The following commands were not executed:\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    + String.join(\"\\n\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    Arrays.copyOfRange(substitutedCommands, lastCommandIndex + 1, substitutedCommands.length));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String message \u003d e.getMessage() + errorLocation + doneCommands + notDoneCommands;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new CommandException(message);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static String[] substituteAll(CommandLine args, String[] rawCommands) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String[] output \u003d new String[rawCommands.length];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (int i \u003d 0; i \u003c rawCommands.length; i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            output[i] \u003d substitute(args, rawCommands[i]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static List\u003cCommandExecutable\u003e parseCommands(String[] rawCommands) throws CommandException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        PrimitiveCommandParser parser \u003d new PrimitiveCommandParser();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        List\u003cCommandExecutable\u003e commandExecutables \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            LOGGER.info(\"----------------[BEGIN MACRO PARSING]\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            for (String rawCommand : rawCommands) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                commandExecutables.add(parser.parse(rawCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return commandExecutables;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new CommandException(\"Error when executing the macro: \\n\" + e.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static String substitute(CommandLine args, String line) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (Iterator\u003cOption\u003e i \u003d args.iterator(); i.hasNext(); ) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            Option option \u003d i.next();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String from \u003d option.getOpt();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String to \u003d args.getOptionValue(from);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            line \u003d line.replaceAll(\"\\\\\\\\\" + from, to);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String unusedArgs \u003d String.join(\" \", args.getArgList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // regex is matching for \"\\$\"."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return line.replaceAll(\"\\\\\\\\\\\\$\", unusedArgs).trim();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 1,
      "joeychensmart": 114
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/macro/NewMacroCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.logic.macro;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandExecutable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.Macro;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.MacroList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Creates a new macro. Special constructor since the format for this command is special."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class NewMacroCommand implements CommandExecutable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String argumentDeclaration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String[] statements;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Constructor for this unique command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param argumentDeclaration The macro declaration containing the name and arguments to the macro."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *                            e.g. \"macro poop n m\"."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param statements The commands to be executed in the macro."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public NewMacroCommand(String argumentDeclaration, String[] statements) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.argumentDeclaration \u003d argumentDeclaration;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.statements \u003d statements;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String[] splitDeclaration \u003d argumentDeclaration.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            Macro newMacro \u003d new Macro("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    splitDeclaration[1],"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    Arrays.copyOfRange(splitDeclaration, 2, splitDeclaration.length),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    this.statements);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            MacroList macroList \u003d model.getMacroList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            model.setMacroList(macroList.withNewMacro(newMacro));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return new CommandResult(newMacro.getName() + \" successfully added.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new CommandException(\"Error: missing macro name.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getArgumentDeclaration() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return argumentDeclaration;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String[] getStatements() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return statements;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 56
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/parser/McGymmyParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.CommandLine;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.CommandLineParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.DefaultParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.Options;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.LogicManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandExecutable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.macro.MacroRunner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.macro.NewMacroCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.Macro;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.MacroList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Parser for all McGymmy commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class McGymmyParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private MacroList macroList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final PrimitiveCommandParser primitiveCommandParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Constructor for McGymmyParser, but create a new macroList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public McGymmyParser() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this(new MacroList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Constructor for McGymmyParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param macroList the macroList to supply"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public McGymmyParser(MacroList macroList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.primitiveCommandParser \u003d new PrimitiveCommandParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.macroList \u003d macroList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Parses a raw input string from the user into an executable Command or macro."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param text raw input from the user"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return Command if parsing is successful"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParseException if command is not found"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParseException if a required argument to the command is not supplied"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParseException if an argument to the command is not in the correct format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public CommandExecutable parse(String text) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Pair\u003cString, String[]\u003e splitString \u003d ParserUtil.splitString(text);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String commandName \u003d splitString.getKey();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String[] commandArguments \u003d splitString.getValue();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (commandName.equals(\"macro\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return parseCreateMacro(text);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } else if (this.macroList.hasMacro(commandName)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return this.parseRunMacro(commandName, commandArguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } else if (this.primitiveCommandParser.hasCommand(commandName)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return this.primitiveCommandParser.parsePrimitiveCommand(commandName, commandArguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void setMacroList(MacroList macroList) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.macroList \u003d macroList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public MacroList getMacroList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return macroList;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Creates a new macro using the String declaration."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param declaration Macro declaration string. Format in the user guide."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return Macro that was created"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParseException if declaration has the wrong format."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private CommandExecutable parseCreateMacro(String declaration) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        logger.info(\"----------------[PARSING CREATE MACRO]\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // note: following line also trims whitespace between semicolons."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Pair\u003cString, String[]\u003e headTail \u003d ParserUtil.splitString(declaration, \" *; *\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String[] tailWithoutBlanks \u003d Arrays.stream(headTail.getValue())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .filter(s-\u003e!s.isBlank())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .toArray(String[]::new);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return new NewMacroCommand(headTail.getKey(), tailWithoutBlanks);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Returns an executable form of macro with the given name."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param commandName name of the macro to run."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param arguments arguments to the macro."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return CommandExecutable of the macro."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParseException If the arguments to the macro are invalid."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private CommandExecutable parseRunMacro(String commandName, String[] arguments) throws ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        logger.info(\"----------------[PARSING RUN MACRO]\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandLineParser commandLineParser \u003d new DefaultParser();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Macro macro \u003d this.macroList.getMacro(commandName);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Options options \u003d macro.getOptions();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            CommandLine args \u003d commandLineParser.parse(options, arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return MacroRunner.asCommandInstance(macro, args);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (org.apache.commons.cli.ParseException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            logger.info(\"----------------[PARSE ERROR][\" + e.getMessage() + \"]\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String formattedHelp \u003d ParserUtil.getUsageFromHelpFormatter(commandName, \"\", options);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new ParseException(e.getMessage() + \"\\n\" + formattedHelp);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 117
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.HelpFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.Options;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.date.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Fat;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Protein;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        String validationRegex \u003d \"[0-9]+\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // if contains non-digit -\u003e invalid index"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        if (!trimmedIndex.matches(validationRegex)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new ParseException(Index.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // contains all digit but still cannot parse -\u003e index to large"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            throw new ParseException(Index.MESSAGE_INDEX_TOO_LARGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return new Name(trimmedName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Gets integer from string value."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @param value        String containing value of nutrient."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @param errorMessage String containing the error message."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @return Integer value of string."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @throws ParseException if the value is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static int getNutrientValue(String value, String errorMessage) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String trimmedValue \u003d value.trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        int nutrientValue;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            nutrientValue \u003d Integer.parseInt(trimmedValue);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        } catch (NumberFormatException numberFormatException) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new ParseException(errorMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return nutrientValue;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Parses a {@code String protein} into a {@code Protein}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @throws ParseException if the given {@code Protein} is invalid."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Protein parseProtein(String protein) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        int proteinValue \u003d getNutrientValue(protein, Protein.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return new Protein(proteinValue);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Parses a {@code String carb} into an {@code Carbohydrate}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @throws ParseException if the given {@code carb} is invalid."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Carbohydrate parseCarb(String carb) throws ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        int carbValue \u003d getNutrientValue(carb, Carbohydrate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return new Carbohydrate(carbValue);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Parses a {@code String fat} into an {@code Fat}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @throws ParseException if the given {@code fat} is invalid."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Fat parseFat(String fat) throws ParseException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        int fatValue \u003d getNutrientValue(fat, Fat.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return new Fat(fatValue);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Parses a {@code String filepath} into an {@code File}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @throws ParseException if the given {@code filepath} is invalid."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Path parseFile(String filepath) throws ParseException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //If filepath is invalid or does not exist throw an exception"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (!FileUtil.isValidPath(filepath)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new ParseException(String.format(\"Invalid Filepath %s\", filepath));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (!FileUtil.isFileExists(Path.of(filepath))) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new ParseException(String.format(\"File at %s does not exist\", filepath));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Return Path object of file"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return Path.of(filepath);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Parses {@Code String directory} into a {@code File}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @param directory Directory to store the file."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @return Path containing directoryPath."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @throws ParseException if directory does not exist."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Path parseDir(String directory) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Create the directory"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Path path \u003d Path.of(directory);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        File file \u003d new File(directory);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (!file.exists() || !file.isDirectory()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new ParseException(String.format(\"Directory does not exist %s\", path.toString()));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Parse {@code String outputName} into a {@code String}."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @param outputPath Name to save the output file."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @return outputPath as string."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @throws ParseException when outputPath is empty."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static String parseOutputName(String outputPath) throws ParseException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        outputPath \u003d outputPath.trim();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (outputPath.equals(\"\")) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new ParseException(\"Filename cannot be empty\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (!outputPath.contains(\".json\")) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            outputPath +\u003d \".json\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return outputPath;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            return new Date(trimmedDate);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Helper function for commons-cli\u0027s HelpFormatter."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Generates the usage string from commons-cli options."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param commandName name of the command."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param header extra text to be included before usage statement."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param options commons-cli options to format."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return usage string."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static String getUsageFromHelpFormatter(String commandName, String header, Options options) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        HelpFormatter formatter \u003d new HelpFormatter();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        StringWriter stringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(stringWriter);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        formatter.printHelp("
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            printWriter,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            formatter.getWidth(),"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            commandName,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            header,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            options,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            formatter.getLeftPadding(),"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            formatter.getDescPadding(),"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return stringWriter.toString();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Splits a string using the delimiter,"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * storing the first string as the head, and the rest as the tail."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param input raw input string."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param delimiter Java regex string to split the string by."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return Pair of (first word, array of the rest of the words)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static Pair\u003cString, String[]\u003e splitString(String input, String delimiter) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String[] headTail \u003d input.split(delimiter);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return new Pair\u003c\u003e(headTail[0], Arrays.copyOfRange(headTail, 1, headTail.length));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return new Pair\u003c\u003e(\"\", new String[]{\"\"});"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Splits a string by whitespaces,"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * storing the first string as the head, and the rest as the tail."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param input raw input string."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return Pair of (first word, array of the rest of the words)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static Pair\u003cString, String[]\u003e splitString(String input) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return splitString(input, \"\\\\s+\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 135,
      "joeychensmart": 60,
      "-": 71,
      "aidoxe-123": 23
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/parser/PrimitiveCommandHelpUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.Options;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandExecutable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.AbstractParameter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.ParameterSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * A class to generate various help strings for primitive commands."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class PrimitiveCommandHelpUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /* In the future, instead of these constants we could create a method"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    that inserts help strings for commands that are not stored in the table,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    but should also be listed using `help`. But for now, YAGNI. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final String MACRO_HELP_STRING \u003d \"Add a macro to run several commands in succession.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    // not splitting up usage with new lines because that may confuse user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final String MACRO_USAGE_STRING \u003d \"usage: macro\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"\\nMACRONAME FLAG_1 FLAG_2 ... ; \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"COMMAND_1 PARAMETERS_TO_COMMAND_1; \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"[COMMAND_2 PARAMETERS_TO_COMMAND_2; ...]\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"\\n\\nEXAMPLE: macro breakfast; add -n toast -c 10; add -n egg -p 10\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Map\u003cString, Supplier\u003cCommand\u003e\u003e commandTable;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Map\u003cString, String\u003e commandDescriptionTable;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    PrimitiveCommandHelpUtil(Map\u003cString, Supplier\u003cCommand\u003e\u003e commandTable, Map\u003cString, String\u003e commandDescriptionTable) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.commandTable \u003d commandTable;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.commandDescriptionTable \u003d commandDescriptionTable;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Creates the usage string using commons-cli\u0027s HelpFormatter and the createExampleCommand function."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param commandName name of the command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param parameterSet parameterSet of the command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return usage string for the command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getUsage(String commandName, ParameterSet parameterSet) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Options options \u003d parameterSet.asOptions();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String formattedHelp \u003d ParserUtil.getUsageFromHelpFormatter(commandName,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                getUnnamedParameterUsage(parameterSet), options);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return formattedHelp + \"\\nEXAMPLE: \" + createExampleCommand(commandName, parameterSet.getParameterList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private String getUnnamedParameterUsage(ParameterSet parameterSet) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return parameterSet.getUnnamedParameter()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .map(param -\u003e String.format(\"\u003carg\u003e %s: %s\", param.getName(), param.getDescription()))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .orElseGet(() -\u003e \"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private String createExampleCommand(String commandName, List\u003cAbstractParameter\u003e parameterList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return commandName + \" \" + parameterList.stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .map(p -\u003e p.getFlag().equals(\"\") ? p.getExample() : \"-\" + p.getFlag() + \" \" + p.getExample())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private String formatAllCommandsHelp() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        StringBuilder result \u003d new StringBuilder(\"Here are all the available commands.\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + \"\\n\\nType: \u0027help [COMMAND]\u0027 for more info on a specific command.\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (String commandName : commandDescriptionTable.keySet()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            result.append(String.format(\"\\n%s: %s\", commandName, commandDescriptionTable.get(commandName)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        result.append(\"\\nmacro: \").append(MACRO_HELP_STRING);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Generates a command that outputs the usage of the given command."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param commandName the command to generate usage of."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return Command that outputs the usage string of the command."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public CommandExecutable newHelpCommand(String commandName) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return model -\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if (commandName.equals(\"macro\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                return new CommandResult(MACRO_USAGE_STRING);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if (!commandTable.containsKey(commandName)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                throw new CommandException(\"Error: That command does not exist.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            Command usageOf \u003d commandTable.get(commandName).get();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return new CommandResult(getUsage(commandName, usageOf.getParameterSet()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        };"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Returns a command that lists all available commands."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return Command that outputs all available commands."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public CommandExecutable newHelpCommand() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return model -\u003e new CommandResult(formatAllCommandsHelp());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 100
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/parser/PrimitiveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.CommandLine;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.CommandLineParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.DefaultParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.Options;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.LogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.Command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandExecutable;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.ListMacroCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.RemoveMacroCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import jimmy.mcgymmy.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import jimmy.mcgymmy.logic.commands.UnTagCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.AbstractParameter;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.ParameterSet;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Parser for Primitive (non-macro) McGymmy commands."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class PrimitiveCommandParser {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final Map\u003cString, Supplier\u003cCommand\u003e\u003e commandTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final Map\u003cString, String\u003e commandDescriptionTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final CommandLineParser parser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final PrimitiveCommandHelpUtil helpUtil;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        addCommand(AddCommand.COMMAND_WORD, AddCommand.SHORT_DESCRIPTION, AddCommand::new);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        addCommand(EditCommand.COMMAND_WORD, EditCommand.SHORT_DESCRIPTION, EditCommand::new);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        addCommand(DeleteCommand.COMMAND_WORD, DeleteCommand.SHORT_DESCRIPTION, DeleteCommand::new);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        addCommand(ClearCommand.COMMAND_WORD, ClearCommand.SHORT_DESCRIPTION, ClearCommand::new);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        addCommand(ExitCommand.COMMAND_WORD, ExitCommand.SHORT_DESCRIPTION, ExitCommand::new);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        addCommand(FindCommand.COMMAND_WORD, FindCommand.SHORT_DESCRIPTION, FindCommand::new);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        addCommand(ListCommand.COMMAND_WORD, ListCommand.SHORT_DESCRIPTION, ListCommand::new);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        addCommand(TagCommand.COMMAND_WORD, TagCommand.SHORT_DESCRIPTION, TagCommand::new);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        addCommand(UnTagCommand.COMMAND_WORD, UnTagCommand.SHORT_DESCRIPTION, UnTagCommand::new);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        addCommand(UndoCommand.COMMAND_WORD, UndoCommand.SHORT_DESCRIPTION, UndoCommand::new);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        addCommand(ImportCommand.COMMAND_WORD, ImportCommand.SHORT_DESCRIPTION, ImportCommand::new);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        addCommand(ExportCommand.COMMAND_WORD, ExportCommand.SHORT_DESCRIPTION, ExportCommand::new);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        addCommand(ListMacroCommand.COMMAND_WORD, ListMacroCommand.SHORT_DESCRIPTION, ListMacroCommand::new);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        addCommand(RemoveMacroCommand.COMMAND_WORD, RemoveMacroCommand.SHORT_DESCRIPTION, RemoveMacroCommand::new);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Creates a new McGymmyParser"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public PrimitiveCommandParser() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.helpUtil \u003d new PrimitiveCommandHelpUtil(commandTable, commandDescriptionTable);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.parser \u003d new DefaultParser();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Parses a raw input string from the user into an executable Command."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param text raw input from the user"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return Command if parsing is successful"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParseException if command is not found"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParseException if a required argument to the command is not supplied"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParseException if an argument to the command is not in the correct format"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public CommandExecutable parse(String text) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Pair\u003cString, String[]\u003e headTail \u003d ParserUtil.splitString(text);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (headTail.getKey().equals(\"\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new ParseException(\"Please enter a command.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return parsePrimitiveCommand(headTail.getKey(), headTail.getValue());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Parses a raw input string from the user into an executable Command."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param commandName name of the command. Typically the first word in the line."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param arguments   array of String arguments to the command."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return Command if parsing is successful"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParseException if command is not found"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParseException if a required argument to the command is not supplied"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParseException if an argument to the command is not in the correct format"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public CommandExecutable parsePrimitiveCommand(String commandName, String[] arguments) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (commandName.equals(\"help\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if (arguments.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                return this.helpUtil.newHelpCommand(arguments[0]);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                return this.helpUtil.newHelpCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (!commandTable.containsKey(commandName)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        logger.info(\"----------------[PARSING PRIMITIVE COMMAND][\" + commandName + \"]\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Command result \u003d commandTable.get(commandName).get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ParameterSet parameterSet \u003d result.getParameterSet();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Options options \u003d parameterSet.asOptions();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            CommandLine cmd \u003d this.parser.parse(options, arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.provideValuesToParameterSet(cmd, parameterSet);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            logger.info(\"----------------[PARSE SUCCESSFUL]\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (org.apache.commons.cli.ParseException | ParseException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            logger.info(\"----------------[PARSE ERROR][\" + e.getMessage() + \"]\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String message \u003d e.getMessage() + \"\\n\" + helpUtil.getUsage(commandName, parameterSet);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new ParseException(message);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    // NOTE: the following methods that deal with ParameterSets should be relocated to the ParameterSet"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    // class, but there\u0027s not enough time to do this properly so we\u0027ll defer this change to v1.5."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Helper function that takes values in the commons-cli CommandLine object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * and puts them in the parameterList"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param cmd          CommandLine object to take values from"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param parameterSet parameterSet to put values in"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParseException if any of the parameter\u0027s conversion functions breaks (wrongly formatted argument)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private void provideValuesToParameterSet(CommandLine cmd, ParameterSet parameterSet) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        List\u003cAbstractParameter\u003e parameterList \u003d parameterSet.getParameterList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (AbstractParameter parameter : parameterList) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String flag \u003d parameter.getFlag();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if (flag.equals(\"\")) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                provideValuesToUnnamedParameter(cmd, parameter, parameterSet);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                provideValuesToParameter(cmd, parameter, flag);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private void provideValuesToUnnamedParameter(CommandLine cmd, AbstractParameter parameter,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                                                 ParameterSet parameterSet) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        List\u003cString\u003e unconsumedArgs \u003d cmd.getArgList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (unconsumedArgs.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if (!parameter.isRequired()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String message \u003d parameterSet.getUnnamedParameter()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    .map(param -\u003e String.format(\"Missing required option: %s\", param.getName()))"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    .orElseGet(() -\u003e \"\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new ParseException(message);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        parameter.setValue(String.join(\" \", unconsumedArgs));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private void provideValuesToParameter(CommandLine cmd, AbstractParameter parameter,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                                          String flag) throws ParseException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String[] values \u003d cmd.getOptionValues(flag);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (values \u003d\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            // optional value that was not supplied by user."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        parameter.setValue(String.join(\" \", values));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Adds a new command into the parser."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Package private for testing purposes."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param name            Name of command to be added"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param commandSupplier a constructor of the command taking no arguments"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    static void addCommand(String name, String description, Supplier\u003cCommand\u003e commandSupplier) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assert !commandTable.containsKey(name) : name + \" command has already been added\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        commandDescriptionTable.put(name, description);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        commandTable.put(name, commandSupplier);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Removes a new command into the parser."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Package private for testing purposes."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param name Name of command to be removed"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    static void removeCommand(String name) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        commandTable.remove(name);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        commandDescriptionTable.remove(name);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static Set\u003cString\u003e getRegisteredCommands() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Set\u003cString\u003e result \u003d new HashSet\u003c\u003e(commandTable.keySet());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        result.add(\"help\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Boolean hasCommand(String command) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return getRegisteredCommands().contains(command);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    // for testing"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    Map\u003cString, Supplier\u003cCommand\u003e\u003e getCommandTable() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return commandTable;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    Map\u003cString, String\u003e getCommandDescriptionTable() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return commandDescriptionTable;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 18,
      "jh123x": 3,
      "joeychensmart": 195,
      "-": 2,
      "aidoxe-123": 1
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/parser/exceptions/ParameterConflictException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Signals that the command has multiple parameters of the same name."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class ParameterConflictException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final String defaultMessage \u003d \"The command cannot have multiple parameters with the same name.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public ParameterConflictException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super(defaultMessage);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "joeychensmart": 12
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "-": 12
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/parser/parameter/AbstractParameter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser.parameter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.Option;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Abstract class for the parameter classes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public abstract class AbstractParameter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Option option;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String flag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String example;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Optional\u003cString\u003e rawValue \u003d Optional.empty();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    protected AbstractParameter(String name, String flag, String description, String example, boolean isRequired) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.flag \u003d flag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.example \u003d example;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.option \u003d Option.builder(flag)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .longOpt(name)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .desc(description)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .hasArg()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .numberOfArgs(Option.UNLIMITED_VALUES)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .required(isRequired)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void setValue(String rawValue) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.rawValue \u003d Optional.of(rawValue);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Optional\u003cString\u003e getRawValue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.rawValue;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getFlag() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.flag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getExample() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.example;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Returns a commons-cli Option representing the parameter."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return Option of the parameter."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Option asOption() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.option;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public boolean isRequired() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "joeychensmart": 68
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/parser/parameter/OptionalParameter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser.parameter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Class used to declare and contain optional parameters for McGymmy commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * @param \u003cT\u003e The type of the parameter."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class OptionalParameter\u003cT\u003e extends AbstractParameter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final ParameterConverter\u003cT\u003e converter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Optional\u003cT\u003e value \u003d Optional.empty();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Creates an optional parameter."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param name        Name of the parameter."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param flag        flag used in the command, e.g. \u0027-c\u0027 in \u0027add banana -c 100\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param description short description of what the parameter represents, e.g. \u0027carbs as an integer\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param example     example value, e.g. \u0027100\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param converter   Function to parse the value from a String to T. May throw a ParseError."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public OptionalParameter(String name, String flag, String description,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                             String example, ParameterConverter\u003cT\u003e converter) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super(name, flag, description, example, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.converter \u003d converter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public Optional\u003cT\u003e getValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void setValue(String rawValue) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super.setValue(rawValue);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.value \u003d Optional.of(converter.apply(rawValue));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public boolean isRequired() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chewypiano": 8,
      "jh123x": 1,
      "joeychensmart": 37
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/parser/parameter/Parameter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser.parameter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Class used to declare and contain required parameters for McGymmy commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * @param \u003cT\u003e The type of the parameter."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class Parameter\u003cT\u003e extends AbstractParameter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final ParameterConverter\u003cT\u003e converter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Optional\u003cT\u003e value \u003d Optional.empty();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Creates a required parameter."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param name        Name of the parameter."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param flag        flag used in the command, e.g. \u0027-c\u0027 in \u0027add banana -c 100\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param description short description of what the parameter represents, e.g. \u0027carbs as an integer\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param example     example value, e.g. \u0027100\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param converter   Function to parse the value from a String to T. May throw a ParseError."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Parameter(String name, String flag, String description, String example, ParameterConverter\u003cT\u003e converter) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super(name, flag, description, example, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.converter \u003d converter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void setValue(String rawValue) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super.setValue(rawValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.value \u003d Optional.of(converter.apply(rawValue));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Returns the value entered by the user. Value is guaranteed to be present."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return T value that was parsed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public T consume() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assert this.value.isPresent() : \"Command being run before being initialized correctly.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.value.get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 5,
      "joeychensmart": 40
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/parser/parameter/ParameterConverter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser.parameter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Functional interface for parameter parsers."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * @param \u003cR\u003e Output type of this parser."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "@FunctionalInterface"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public interface ParameterConverter\u003cR\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    R apply(String t) throws ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "joeychensmart": 10
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/parser/parameter/ParameterSet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser.parameter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.Options;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParameterConflictException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Container for AbstractParameter objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class ParameterSet {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final List\u003cAbstractParameter\u003e parameterList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Options options \u003d new Options();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public ParameterSet() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.parameterList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private void refreshOptions() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.options \u003d new Options();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (AbstractParameter parameter : this.parameterList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if (parameter.getFlag().equals(\"\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                // unnamed parameter, e.g. \u00271\u0027 in \u0027DELETE 1\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.options.addOption(parameter.asOption());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Adds a parameter to the set"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param parameter parameter to add"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParameterConflictException if there are 2 parameters with the same flag"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void addParameter(AbstractParameter parameter) throws ParameterConflictException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.parameterList.add(parameter);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (this.hasParameterConflict()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new ParameterConflictException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.refreshOptions();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private boolean hasParameterConflict() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        HashSet\u003cString\u003e set \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        parameterList.forEach(x -\u003e set.add(x.getFlag()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return set.size() !\u003d parameterList.size();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Returns the unnamed parameter, if present"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return Optional.of the unnamed parameter is present, Optional.empty() otherwise."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Optional\u003cAbstractParameter\u003e getUnnamedParameter() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (AbstractParameter param : parameterList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if (param.getFlag().equals(\"\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                return Optional.of(param);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Get the set of commons-cli options generated from the parameters."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return commons-cli options"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Options asOptions() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return options;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public List\u003cAbstractParameter\u003e getParameterList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return parameterList;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 5,
      "joeychensmart": 75
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/predicate/DatePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.date.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewypiano"
        },
        "content": " * Tests that a {@code Food}\u0027s {@code Date} matches the {@code String} date given."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewypiano"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "public class DatePredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DatePredicate.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * Initialises {@code DatePredicate} object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public DatePredicate(String date) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        this.date \u003d ParserUtil.parseDate(date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * Checks if the food contains the same date as the input (format insensitive)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * @param food The food to be checked"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * @return True if Food contains the date equal to the input date, false otherwise"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return this.date.equals(food.getDate());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                || (other instanceof DatePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                \u0026\u0026 date.equals(((DatePredicate) other).date)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 44
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/predicate/FoodContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "package jimmy.mcgymmy.logic.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": " * Tests that a {@code Food} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "public class FoodContainsKeywordsPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public FoodContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return new TagContainsKeywordsPredicate(keywords).test(food)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                || new NameContainsKeywordsPredicate(keywords).test(food);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                || (other instanceof FoodContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                \u0026\u0026 keywords.equals(((FoodContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidoxe-123": 30
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/predicate/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "package jimmy.mcgymmy.logic.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Tests that a {@code Food}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(NameContainsKeywordsPredicate.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assert food !\u003d null : \"NameContainsKeywordsPredicate -\u003e Name cannot be null\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .anyMatch(keyword -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                        return StringUtil.containsWordIgnoreCase(food.getName().fullName, keyword);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                    } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 5,
      "jh123x": 11,
      "aidoxe-123": 2,
      "-": 25
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/predicate/TagContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "package jimmy.mcgymmy.logic.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": " * Tests that a {@code Food}\u0027s {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "public class TagContainsKeywordsPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * Check if the food contains the tag with exactly the same name as one of the keyword (case sensitive)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * @param food The food to be checked"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * @return True if can create a tag with the keyword and Food contains the tag equals to that tag, false otherwise"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                .anyMatch(keyword -\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                        return food.getTags().contains(new Tag(keyword));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                    } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 2,
      "aidoxe-123": 42
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/History.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "package jimmy.mcgymmy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import java.util.EmptyStackException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.MacroList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "class History {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    protected final Stack\u003cPair\u003cMcGymmy, Pair\u003cPredicate\u003cFood\u003e, MacroList\u003e\u003e\u003e stack;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    History() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        stack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * Saves the mcGymmy, predicate and macrolist of \u003ccode\u003eModelManager\u003c/code\u003e to history"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    void save(ModelManager modelManager) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        McGymmy mcGymmy \u003d new McGymmy(modelManager.getMcGymmy());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Predicate\u003cFood\u003e predicate \u003d modelManager.getFilterPredicate();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        MacroList macroList \u003d modelManager.getMacroList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        stack.push(new Pair\u003c\u003e(mcGymmy, new Pair\u003c\u003e(predicate, macroList)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * @return True if the history is empty"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    boolean empty() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return stack.empty();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * Get the previous state from history"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * @throws EmptyStackException"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    void pop() throws EmptyStackException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assert !stack.empty() : \"History is empty\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        stack.pop();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    McGymmy peekMcGymmy() throws EmptyStackException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assert !stack.empty() : \"History is empty\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return stack.peek().getKey();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    Predicate\u003cFood\u003e peekPredicate() throws EmptyStackException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assert !stack.empty() : \"History is empty\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return stack.peek().getValue().getKey();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    MacroList peekMacroList() throws EmptyStackException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assert !stack.empty() : \"History is empty\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return stack.peek().getValue().getValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 16,
      "aidoxe-123": 43
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/McGymmy.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Fridge;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Wraps all data at mcgymmy level."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Duplicates are not allowed (by .isSameFood comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class McGymmy implements ReadOnlyMcGymmy {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Fridge foodItems;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public McGymmy() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        foodItems \u003d new Fridge();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Creates an McGymmy using the Foods in the {@code toBeCopied}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public McGymmy(ReadOnlyMcGymmy toBeCopied) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    // list overwrite operations"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Replaces the contents of the Food list with {@code Foods}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * {@code Foods} must not contain duplicate Foods."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void setFoodItems(List\u003cFood\u003e foodItems) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.foodItems.setFoods(foodItems);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Resets the existing data of this {@code McGymmy} with {@code newData}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void resetData(ReadOnlyMcGymmy newData) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        setFoodItems(newData.getFoodList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    // Food-level operations"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns true if a Food with the same identity as {@code Food} exists in mcgymmy."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return foodItems.contains(food);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Adds a Food to mcgymmy."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * The Food must not already exist in mcgymmy."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void addFood(Food food) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        foodItems.add(food);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Replaces the given Food {@code target} in the list with {@code editedFood}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * {@code index} must be valid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void setFood(Index index, Food editedFood) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(editedFood);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        foodItems.setFood(index, editedFood);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Removes {@code key} from this {@code McGymmy}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * {@code index} must be valid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void removeFood(Index index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        foodItems.remove(index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Removes {@code food} from this {@code McGymmy}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * {@code food} must be valid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void removeFood(Food food) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        foodItems.remove(food);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    // util methods"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return foodItems.asUnmodifiableObservableList().size() + \" Foods\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return foodItems.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                || (other instanceof McGymmy // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                \u0026\u0026 foodItems.equals(((McGymmy) other).foodItems));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return foodItems.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 111,
      "aidoxe-123": 7
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.MacroList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Predicate\u003cFood\u003e PREDICATE_SHOW_ALL_FOODS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Returns the current MacroList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public MacroList getMacroList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Replaces the current MacroList"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void setMacroList(MacroList replacement);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns the user prefs\u0027 mcgymmy file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Path getMcGymmyFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Sets the user prefs\u0027 mcgymmy file path."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void setMcGymmyFilePath(Path mcGymmyFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns  McGymmy"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    ReadOnlyMcGymmy getMcGymmy();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * Sets McGymmy"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void setMcGymmy(ReadOnlyMcGymmy mcGymmy);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns true if a food with the same identity as {@code food} exists in mcgymmy."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    boolean hasFood(Food food);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Deletes the given food."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * The index must be valid"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    void deleteFood(Index index);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Adds the given food."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void addFood(Food food);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Replaces the given food {@code target} with {@code editedFood}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * The index must be valid"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    void setFood(Index index, Food editedFood);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     * Removes all filtered food from Fridge and clears filtered food list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    void clearFilteredFood();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * Check if McGymmy can undo"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    boolean canUndo();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * Undo the previous change to mcGymmy"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    void undo();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns an unmodifiable view of the filtered food list"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Updates the filter of the filtered food list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void updateFilteredFoodList(Predicate\u003cFood\u003e predicate);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 4,
      "dcchan98": 6,
      "jh123x": 31,
      "joeychensmart": 11,
      "-": 52,
      "aidoxe-123": 17
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.MacroList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Represents the in-memory model of McGymmy data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String ADD_MESSAGE_FORMAT \u003d \"Add food:\\n%s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String DELETE_MESSAGE_FORMAT \u003d \"Delete food at index: %s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String SET_FOOD_MESSAGE_FORMAT \u003d \"Change food at index %S to food:\\n%S\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String UNDO_MESSAGE_FORMAT \u003d \"Undo Last Command that modified McGymmy\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String CLEAR_FILTERED_FOOD_MESSAGE_FORMAT \u003d \"Current Filtered Food cleared\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String INIT_MESSAGE_FORMAT \u003d \"Initializing with food list: %s and user prefs %s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private MacroList macroList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final McGymmy mcGymmy;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private Predicate\u003cFood\u003e filterPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final History history;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final FilteredList\u003cFood\u003e filteredFoodItems;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Initializes a ModelManager with the given mcGymmy and userPrefs and macroList."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public ModelManager(ReadOnlyMcGymmy mcGymmy, ReadOnlyUserPrefs userPrefs, MacroList macroList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CollectionUtil.requireAllNonNull(mcGymmy, userPrefs, macroList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        logger.fine(String.format(INIT_MESSAGE_FORMAT, mcGymmy, userPrefs));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.macroList \u003d macroList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.history \u003d new History();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.mcGymmy \u003d new McGymmy(mcGymmy);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        filterPredicate \u003d PREDICATE_SHOW_ALL_FOODS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        filteredFoodItems \u003d new FilteredList\u003c\u003e(this.mcGymmy.getFoodList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        filteredFoodItems.setPredicate(filterPredicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Initializes a ModelManager with the given mcGymmy and userPrefs. Creates a new macroList."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public ModelManager(ReadOnlyMcGymmy mcGymmy, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this(mcGymmy, userPrefs, new MacroList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this(new McGymmy(), new UserPrefs(), new MacroList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MacroList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public MacroList getMacroList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.macroList;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void setMacroList(MacroList replacement) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        saveCurrentStateToHistory();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.macroList \u003d replacement;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Path getMcGymmyFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return userPrefs.getMcGymmyFilePath();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void setMcGymmyFilePath(Path mcGymmyFilePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(mcGymmyFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        userPrefs.setMcGymmyFilePath(mcGymmyFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d McGymmy \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public ReadOnlyMcGymmy getMcGymmy() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return mcGymmy;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * Sets McGymmy and saves the current state to the history"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * @param mcGymmy"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void setMcGymmy(ReadOnlyMcGymmy mcGymmy) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        saveCurrentStateToHistory();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.mcGymmy.resetData(mcGymmy);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        updateFilterPredicate(PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return mcGymmy.hasFood(food);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * Deletes the given food and saves the current state to the history"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * The index must be valid"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void deleteFood(Index index) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        logger.fine(String.format(DELETE_MESSAGE_FORMAT, index.getOneBased()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        saveCurrentStateToHistory();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Delete food based on food index"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        mcGymmy.removeFood(filteredFoodItems.get(index.getZeroBased()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * Adds the given food and saves the current state to the history"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void addFood(Food food) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        logger.fine(String.format(ADD_MESSAGE_FORMAT, food));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        saveCurrentStateToHistory();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        mcGymmy.addFood(food);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        updateFilterPredicate(PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * Replaces the given food {@code target} with {@code editedFood}, and saves the current state to the history"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * The index must be valid"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void setFood(Index index, Food editedFood) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        CollectionUtil.requireAllNonNull(index, editedFood);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        logger.fine(String.format(SET_FOOD_MESSAGE_FORMAT, index.getOneBased(), editedFood.toString()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        saveCurrentStateToHistory();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food food \u003d getFilteredFoodList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Index index1 \u003d Index.fromZeroBased(mcGymmy.getFoodList().indexOf(food));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        mcGymmy.setFood(index1, editedFood);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        updateFilterPredicate(PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return !history.empty();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * Undo the previous change to mcGymmy, remove that state from history"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Guard Clause."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Assert history is not empty."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assert !history.empty() : \"McGymmyStack is empty\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Log the undo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        logger.fine(UNDO_MESSAGE_FORMAT);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        McGymmy prevMcGymmy \u003d history.peekMcGymmy();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Predicate\u003cFood\u003e prevPredicate \u003d history.peekPredicate();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        MacroList macroList \u003d history.peekMacroList();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        history.pop();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        mcGymmy.resetData(prevMcGymmy);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        updateFilterPredicate(prevPredicate);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.macroList \u003d macroList;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private void saveCurrentStateToHistory() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        history.save(this);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    public void clearFilteredFood() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        logger.fine(CLEAR_FILTERED_FOOD_MESSAGE_FORMAT);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        saveCurrentStateToHistory();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        List\u003cFood\u003e lst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        // prevent traversal error"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        for (Food filteredFood : mcGymmy.getFoodList()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "            if (!filterPredicate.test(filteredFood)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "                lst.add(filteredFood);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        mcGymmy.setFoodItems(lst);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        filteredFoodItems.clear();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Food List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Food} backed by the internal list of"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * {@code versionedMcGymmy}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return filteredFoodItems;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        logger.fine(\"Update predicate for filtered food list\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        saveCurrentStateToHistory();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        updateFilterPredicate(predicate);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private void updateFilterPredicate(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        filterPredicate \u003d predicate;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        filteredFoodItems.setPredicate(filterPredicate);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    Predicate\u003cFood\u003e getFilterPredicate() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return filterPredicate;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return mcGymmy.equals(other.mcGymmy)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                \u0026\u0026 filteredFoodItems.equals(other.filteredFoodItems);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 6,
      "dcchan98": 11,
      "jh123x": 68,
      "joeychensmart": 28,
      "-": 100,
      "aidoxe-123": 68
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/ReadOnlyMcGymmy.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Unmodifiable view of McGymmy."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public interface ReadOnlyMcGymmy {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    ObservableList\u003cFood\u003e getFoodList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 17
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Path getMcGymmyFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    Path getMacroListFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "jh123x": 1,
      "joeychensmart": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private Path mcGymmyFilePath \u003d Paths.get(\"data\", \"mcgymmy.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Path macroListFilePath \u003d Paths.get(\"data\", \"macrolist.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        setMcGymmyFilePath(newUserPrefs.getMcGymmyFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        setMacroListFilePath(newUserPrefs.getMacroListFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Path getMcGymmyFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return mcGymmyFilePath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void setMcGymmyFilePath(Path mcGymmyFilePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(mcGymmyFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.mcGymmyFilePath \u003d mcGymmyFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Path getMacroListFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return macroListFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void setMacroListFilePath(Path macroListFilePath) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        requireNonNull(macroListFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.macroListFilePath \u003d macroListFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                \u0026\u0026 mcGymmyFilePath.equals(o.mcGymmyFilePath)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                \u0026\u0026 macroListFilePath.equals(o.macroListFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return Objects.hash(guiSettings, mcGymmyFilePath, macroListFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + mcGymmyFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        sb.append(\"\\nLocal macro file location : \" + macroListFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 11,
      "joeychensmart": 11,
      "-": 78,
      "aidoxe-123": 1
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/date/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "package jimmy.mcgymmy.model.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.commons.util.AppUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Represents the Date of the food item is consumed in McGymmy."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link Date#isValid(String)}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private static final String[] SUPPORTED_FORMATS \u003d {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        \"yyyy-MM-dd\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        \"yyyy-M-dd\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        \"yyyy-M-d\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        \"dd-MM-yyyy\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        \"dd-M-yyyy\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        \"d-M-yyyy\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        \"yyyy/MM/dd\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        \"dd/MM/yyyy\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        \"dd/M/yyyy\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        \"d/M/yyyy\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        \"d MMM yyyy\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    };"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date string should be in one of the following formats:\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + String.join(\"\\n\", SUPPORTED_FORMATS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private static final String OUTPUT_FORMAT \u003d \"d MMM yyyy\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * @param date A valid date string."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Date(String date) throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Optional\u003cString\u003e format \u003d getFormat(date);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        AppUtil.checkArgument(format.isPresent(), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assert format.isPresent() : \"Error in AppUtil Check\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.date \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(format.get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        AppUtil.checkArgument("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                this.date.format(DateTimeFormatter.ofPattern(format.get())).equals(date),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private Date() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Construct a {@code date} that contains the current date."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public static Date currentDate() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return new Date();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Checks of the date format is valid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @param date Date as a String."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @return If date can be parsed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static boolean isValid(String date) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return getFormat(date).isPresent();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Optional\u003cString\u003e getFormat(String date) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String correctFormat \u003d \"\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        for (String format : SUPPORTED_FORMATS) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                // check if the date is in this format"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                LocalDate.parse(date, DateTimeFormatter.ofPattern(format));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                return Optional.of(format);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                /* exception is thrown means that cannot parse date in that format"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                if cannot parse date in any format, throw IllegalArgumentException"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                using checkArgument below."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                implicit `continue;` here"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            || (other instanceof Date)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            \u0026\u0026 this.date.equals(((Date) other).date);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(OUTPUT_FORMAT));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 43,
      "joeychensmart": 3,
      "aidoxe-123": 66
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/food/Carbohydrate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcchan98"
        },
        "content": " * Represents Carbodydrates in food item in McGymmy."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcchan98"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "public class Carbohydrate extends Macronutrient {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final int CARBOHYDRATE_MULTIPLIER \u003d 4;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final int DEFAULT_CARBOHYDRATE \u003d 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Carbohydrate\" + Macronutrient.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     * @param amount A valid amount."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Carbohydrate(int amount) throws IllegalValueException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        super(amount, CARBOHYDRATE_MULTIPLIER);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Create a new Carbohydrate using the default value."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Mostly boilerplate code."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return new Carbohydrate with default value."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static Carbohydrate newDefault() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return new Carbohydrate(DEFAULT_CARBOHYDRATE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            assert false : \"Error in creation of default\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new IllegalArgumentException(\"Error in creation using default values.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    String getMessageConstraint() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "dcchan98": 12,
      "jh123x": 11,
      "joeychensmart": 13,
      "aidoxe-123": 1
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/food/Fat.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcchan98"
        },
        "content": " * Represents Fats in food item in McGymmy."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcchan98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "public class Fat extends Macronutrient {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final int FAT_MULTIPLIER \u003d 9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final int DEFAULT_FAT \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Fat\" + Macronutrient.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Creates a new Fat."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     * @param amount A valid amount."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Fat(int amount) throws IllegalValueException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        super(amount, FAT_MULTIPLIER);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Creates a new Fat using the default value."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Mostly boilerplate code."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return new Fat with default value."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static Fat newDefault() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return new Fat(DEFAULT_FAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            assert false : \"Error in creation of default\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new IllegalArgumentException(\"Error in creation using default values.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    String getMessageConstraint() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "dcchan98": 13,
      "jh123x": 11,
      "joeychensmart": 15,
      "aidoxe-123": 1
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/food/Food.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.date.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Represents a Food item in McGymmy."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": " * Immutable for defensive coding."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Food.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    // Identity field names"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Protein protein;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Carbohydrate carbs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Fat fat;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Food(Name name, Protein protein, Fat fat, Carbohydrate carbs, Set\u003cTag\u003e tags, Date date) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        CollectionUtil.requireAllNonNull(name, protein, carbs, fat, date);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.protein \u003d protein;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.carbs \u003d carbs;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.fat \u003d fat;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // logging"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        logger.finer(\"Creating food item: \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        logger.finer(\"With name: \" + name.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        logger.finer(\"With protein: \" + protein.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        logger.finer(\"With fat: \" + fat.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        logger.finer(\"With carbs: \" + carbs.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        logger.finer(\"With date: \" + date.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        logger.finer(\"With tag(s): \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            logger.finer(tag.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        logger.finer(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[Create food done]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    // Constructor for convenience"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * A Constructor made for convenience"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Food(String name, int proteinAmount, int fatAmount, int carbsAmount) throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this(new Name(name), new Protein(proteinAmount), new Fat(fatAmount), new Carbohydrate(carbsAmount));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Food(Name name, Protein protein, Fat fat, Carbohydrate carbs) throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this(name, protein, fat, carbs, new HashSet\u003cTag\u003e());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Food(Name name, Protein protein, Fat fat, Carbohydrate carbs, Date date) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        this(name, protein, fat, carbs, new HashSet\u003cTag\u003e(), date);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Food(Name name, Protein protein, Fat fat, Carbohydrate carbs, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        this(name, protein, fat, carbs, tags, Date.currentDate());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     * @return total caloric content of food item"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    public int getCalories() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        return this.getProtein().getTotalCalories()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "                + this.getCarbs().getTotalCalories()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "                + this.getFat().getTotalCalories();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Protein getProtein() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return this.protein;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Carbohydrate getCarbs() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return this.carbs;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Fat getFat() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return this.fat;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * Adds a new tag to food"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * @return A new Food with the tag"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Food addTag(Tag tag) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(tags);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        newTags.add(tag);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return new Food(name, protein, fat, carbs, newTags, date);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * Removes a tag from food"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * @return A new Food without the tag"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Food removeTag(Tag tag) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(tags);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        newTags.remove(tag);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return new Food(name, protein, fat, carbs, newTags, date);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * Check if this food is already tagged with this tag"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * @return True if this food is already tagged with this tag"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return tags.contains(tag);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CollectionUtil.requireAllNonNull(protein, carbs, fat);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (!(other instanceof Food)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food otherFood \u003d (Food) other;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return otherFood !\u003d null"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                \u0026\u0026 this.getName().equals(otherFood.getName())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                \u0026\u0026 this.getProtein().equals(otherFood.getProtein())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                \u0026\u0026 this.getCarbs().equals(otherFood.getCarbs())"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                \u0026\u0026 this.getFat().equals(otherFood.getFat())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                \u0026\u0026 this.getDate().equals(otherFood.getDate());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    // Displays"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    // name + PCF details + total calories"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return \"Food: \" + this.getName() + \"\\n\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                + \"Protein: \" + protein.getAmount() + \"\\n\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                + \"Carbs: \" + carbs.getAmount() + \"\\n\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                + \"Fat: \" + fat.getAmount() + \"\\n\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcchan98": 12,
      "jh123x": 101,
      "joeychensmart": 8,
      "aidoxe-123": 64
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/food/Fridge.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * A list of food items that allows repeated elements and does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class Fridge implements Iterable\u003cFood\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns true if the list contains an equivalent food item as the given argument."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public boolean contains(Food toCheck) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Adds a food item to the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void add(Food toAdd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Replaces the food item at the {@code index} position in the list with {@code editedFood}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void setFood(Index index, Food editedFood) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CollectionUtil.requireAllNonNull(editedFood, index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        internalList.set(index.getZeroBased(), editedFood);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Removes the food item at the position index from the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * The food item must exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void remove(Index removeIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(removeIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        internalList.remove(removeIndex.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Removes the food item from the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * The food item must exist in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void remove(Food food) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        internalList.remove(food);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void setFoods(Fridge replacement) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Replaces the contents of this list with {@code foods}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void setFoods(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CollectionUtil.requireAllNonNull(foods);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        internalList.setAll(foods);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public ObservableList\u003cFood\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Iterator\u003cFood\u003e iterator() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                || (other instanceof Fridge // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                \u0026\u0026 internalList.equals(((Fridge) other).internalList));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 101
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/food/Macronutrient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.util.AppUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Represents a food item with hidden internal logic."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public abstract class Macronutrient {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final int LOWER_BOUND \u003d 0; //Inclusive"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final int UPPER_BOUND \u003d 999; //Non inclusive"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"(\\\\d){1,3}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    protected static final String MESSAGE_CONSTRAINTS \u003d String.format("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \" can only contain non-negative integers between %d and %d\", LOWER_BOUND, UPPER_BOUND);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final int amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final int totalCalories;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final int caloricMultiplier;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Represents macronutrients of 3 types"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @param amount            The amount of the macronutrient"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @param caloricMultiplier This value varies for each macronutrient type"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Macronutrient(int amount, int caloricMultiplier) throws IllegalValueException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CollectionUtil.requireAllNonNull(amount, caloricMultiplier);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // use this instead of assert because the amount \u003c 0 error is more because of user input than developer\u0027s fault"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        AppUtil.checkArgument(isValidAmount(amount), getMessageConstraint());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // initialise variables"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.caloricMultiplier \u003d caloricMultiplier;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.totalCalories \u003d caloricMultiplier * amount;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Check if the string is a Valid Macronutrient amount."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @param value String value of Macronutrient."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @return if the String is valid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static boolean isValid(String value) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return value.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private boolean isValidAmount(int amount) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return amount \u003e\u003d LOWER_BOUND \u0026\u0026 amount \u003c\u003d UPPER_BOUND;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    abstract String getMessageConstraint();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return this.getMacronutrientType() + \": \" + this.getAmount() + \"\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (!(other instanceof Macronutrient)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Macronutrient otherMacronutrient \u003d (Macronutrient) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return this.getMacronutrientType().equals(otherMacronutrient.getMacronutrientType())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                \u0026\u0026 this.getAmount() \u003d\u003d otherMacronutrient.getAmount();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    // take the type from the class name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public String getMacronutrientType() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public int getAmount() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public int getCaloricMultiplier() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return caloricMultiplier;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public int getTotalCalories() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return totalCalories;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "jh123x": 91
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/food/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.util.AppUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Represents a Food\u0027s name in McGymmy."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Name(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        AppUtil.checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "jh123x": 5,
      "-": 53
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/food/Protein.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcchan98"
        },
        "content": " * Represents Protein in food item in McGymmy."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcchan98"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "public class Protein extends Macronutrient {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final int PROTEIN_MULTIPLIER \u003d 4;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final int DEFAULT_PROTEIN \u003d 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Protein\" + Macronutrient.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     * @param amount A valid amount."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Protein(int amount) throws IllegalValueException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        super(amount, PROTEIN_MULTIPLIER);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Create a new Protein using the default value."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Mostly boilerplate code."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return new Protein with default value."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static Protein newDefault() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return new Protein(DEFAULT_PROTEIN);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            assert false : \"Error in creation of default\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new IllegalArgumentException(\"Error in creation using default values.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    String getMessageConstraint() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcchan98": 11,
      "jh123x": 15,
      "joeychensmart": 12
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/macro/Macro.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.model.macro;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.Option;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.Options;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Macro class that deals with user-created macros."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Immutable for defensive coding."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class Macro {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String[] rawCommands;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String[] macroArguments;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Options options;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Constructor for macros"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param name name of the macro."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param macroArguments List of arguments to the macro."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param commands The commands to be run."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws IllegalValueException if the format of the arguments are wrong."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Macro(String name, String[] macroArguments, String[] commands) throws IllegalValueException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this(name, Macro.parseOptions(macroArguments), macroArguments, commands);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    Macro(String name, Options options, String[] macroArguments, String[] commands) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.options \u003d options;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.rawCommands \u003d commands;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.macroArguments \u003d macroArguments;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Options getOptions() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.options;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String[] getRawCommands() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return rawCommands;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String[] getMacroArguments() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return macroArguments;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static Options parseOptions(String[] macroArgs) throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Options options \u003d new Options();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            for (String name : macroArgs) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                String description \u003d \"macro argument \" + name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                Option option \u003d new Option(name, true, description);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                option.setRequired(true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                options.addOption(option);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new IllegalValueException(\"Invalid format for macro. Please refer to the user guide.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return options;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 67
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/macro/MacroList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.model.macro;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.parser.PrimitiveCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.exceptions.DuplicateMacroException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Immutable container for macros."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Ensures a macro\u0027s name is not taken before allowing it to be added."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Defensive by being immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class MacroList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Map\u003cString, Macro\u003e macros;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Set\u003cString\u003e commandNames;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Creates a new MacroList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public MacroList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.macros \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        /* This may be considered \u0027breaking abstraction\u0027 for the MVC since we are referencing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         a static method in a Logic class, but this is a necessary \u0027evil\u0027. The alternative is"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         to have another file where we store the names of all registered commands, which is"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         undesirable since we want to keep DRY/a single source of truth. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.commandNames \u003d new HashSet\u003c\u003e(PrimitiveCommandParser.getRegisteredCommands());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.commandNames.add(\"macro\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Creates a new MacroList with pre-populated values."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param macros list of macros to populate this with."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws DuplicateMacroException If there are any duplicate macros."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public MacroList(List\u003cMacro\u003e macros) throws DuplicateMacroException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.macros \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.commandNames \u003d new HashSet\u003c\u003e(PrimitiveCommandParser.getRegisteredCommands());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.commandNames.add(\"macro\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (Macro macro : macros) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if (this.isMacroNameTaken(macro.getName())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                throw new DuplicateMacroException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.macros.put(macro.getName(), macro);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public boolean hasMacro(String name) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.macros.containsKey(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private boolean isMacroNameTaken(String name) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.hasMacro(name) || commandNames.contains(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Returns a new MacroList with the new macro."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param newMacro the macro to add."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws DuplicateMacroException if the macro\u0027s name has already been taken."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public MacroList withNewMacro(Macro newMacro) throws DuplicateMacroException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        List\u003cMacro\u003e newList \u003d this.getAsList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        newList.add(newMacro);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return new MacroList(newList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Returns a new MacroList without the specified macro."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * If the macro does not exist in the MacroList, returns a new copy of the same MacroList."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param macroName the macro to remove."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public MacroList withoutMacro(String macroName) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        List\u003cMacro\u003e newList \u003d this.getAsList()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .filter(macro -\u003e !macro.getName().equals(macroName))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return new MacroList(newList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (DuplicateMacroException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            // this logically should never happen."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            assert false : \"removing macro results in duplicate macro\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new RuntimeException(e.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Macro getMacro(String name) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.macros.get(name);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public List\u003cMacro\u003e getAsList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return new ArrayList\u003c\u003e(this.macros.values());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    // NOTE: not overriding Object.equals() because MacroList is immutable."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 3,
      "joeychensmart": 100
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/macro/exceptions/DuplicateMacroException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.model.macro.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Signals that the macrolist already has a macro of the given name."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class DuplicateMacroException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final String defaultMessage \u003d \"This macro\u0027s name has already been taken.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public DuplicateMacroException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super(defaultMessage);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 14
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.util.AppUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Represents a Tag in mcgymmy."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tag names should be alphanumeric and less than 20 characters\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}{1,20}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Tag(String tagName) throws IllegalValueException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        AppUtil.checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 4,
      "jh123x": 5,
      "-": 47,
      "aidoxe-123": 1
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.date.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Fat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Protein;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Contains utility methods for populating {@code McGymmy} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static Food[] getSampleFoods() throws IllegalValueException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return new Food[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            new Food(new Name(\"Chicken Rice\"), new Protein(200), new Fat(300),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                    new Carbohydrate(100), getTagSet(\"Lunch\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                    new Date(\"20/4/2020\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            new Food(new Name(\"Rice Bowl\"), new Protein(300), new Fat(200),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                    new Carbohydrate(100), getTagSet(\"Lunch\", \"Dinner\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                    new Date(\"2/9/2020\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            new Food(new Name(\"Fried Chicken\"), new Protein(200), new Fat(100),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                    new Carbohydrate(10), getTagSet(\"Tasty\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                    new Date(\"23/7/2019\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            new Food(new Name(\"Nasi Lemak\"), new Protein(20), new Fat(17),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                    new Carbohydrate(31), getTagSet(\"Lunch\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                    Date.currentDate()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static ReadOnlyMcGymmy getSampleMcGymmy() throws IllegalValueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy sampleMG \u003d new McGymmy();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (Food sampleFood : getSampleFoods()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            sampleMG.addFood(sampleFood);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return sampleMG;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        for (String string : strings) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            Tag tag \u003d new Tag(string);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            tagSet.add(tag);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 25,
      "joeychensmart": 5,
      "-": 19,
      "aidoxe-123": 9
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/storage/JsonAdaptedFood.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.util.AppUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.date.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Fat;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Protein;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Jackson-friendly version of {@link Food}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "class JsonAdaptedFood {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Food\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final String protein;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final String fat;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final String carbs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Constructs a {@code JsonAdaptedFood} with the given food details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public JsonAdaptedFood(@JsonProperty(\"name\") String name, @JsonProperty(\"protein\") String protein,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                           @JsonProperty(\"fat\") String fat, @JsonProperty(\"carbs\") String carbs,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                           @JsonProperty(\"date\") String date, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.protein \u003d protein;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.fat \u003d fat;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.carbs \u003d carbs;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Converts a given {@code Food} into this class for Jackson use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public JsonAdaptedFood(Food source) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        protein \u003d Integer.toString(source.getProtein().getAmount());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        fat \u003d Integer.toString(source.getFat().getAmount());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        carbs \u003d Integer.toString(source.getCarbs().getAmount());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private void checkNull(Object item, String className) throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        AppUtil.checkArgument(item !\u003d null,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                String.format(JsonAdaptedFood.MISSING_FIELD_MESSAGE_FORMAT, className));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private \u003cT\u003evoid checkValid(T item, String className, Predicate\u003cT\u003e isValid, String classError)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        checkNull(item, className);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        AppUtil.checkArgument(isValid.test(item), classError);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Converts this Jackson-friendly adapted food object into the model\u0027s {@code Food} object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted food."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Food toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Check all variables"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        checkValid(fat, Fat.class.getSimpleName(), Fat::isValid, Fat.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        checkValid(date, Date.class.getSimpleName(), Date::isValid, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        checkValid(name, Name.class.getSimpleName(), Name::isValidName, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        checkValid(protein, Protein.class.getSimpleName(), Protein::isValid, Protein.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        checkValid(carbs, Carbohydrate.class.getSimpleName(), Carbohydrate::isValid, Carbohydrate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Load Tags using a for loop due to IllegalValueException."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        final List\u003cTag\u003e foodTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            foodTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Create Object from data"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(foodTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        final Fat modelFat \u003d new Fat(Integer.parseInt(fat));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        final Protein modelProtein \u003d new Protein(Integer.parseInt(protein));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        final Carbohydrate modelCarbohydrate \u003d new Carbohydrate(Integer.parseInt(carbs));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Return the Food item."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return new Food(modelName, modelProtein, modelFat, modelCarbohydrate, modelTags, modelDate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "jh123x": 103,
      "aidoxe-123": 6
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/storage/JsonAdaptedMacro.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.Macro;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Jackson-friendly version of {@link Macro}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class JsonAdaptedMacro {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String[] rawCommands;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String[] macroArguments;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Constructs a {@code JsonAdaptedMacro} with the given macro details."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public JsonAdaptedMacro(@JsonProperty(\"name\") String name, @JsonProperty(\"arguments\") String[] macroArguments,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                            @JsonProperty(\"commands\") String[] rawCommands) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.rawCommands \u003d rawCommands;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.macroArguments \u003d macroArguments;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Converts a given {@code Macro} into this class for Jackson use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public JsonAdaptedMacro(Macro source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.name \u003d source.getName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.rawCommands \u003d source.getRawCommands();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.macroArguments \u003d source.getMacroArguments();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Converts this Jackson-friendly adapted macro object into a {@code Macro} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws IllegalValueException if the macro is invalid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Macro toMacro() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return new Macro(this.name, this.macroArguments, this.rawCommands);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new IllegalValueException(e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 51
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/storage/JsonMacroListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.MacroList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * A class to access {@link MacroList} stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class JsonMacroListStorage implements MacroListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMacroListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public JsonMacroListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Path getMacroListFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Optional\u003cMacroList\u003e readMacroList() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Optional\u003cJsonSerializableMacroList\u003e jsonMacroList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                filePath, JsonSerializableMacroList.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (jsonMacroList.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return Optional.of(jsonMacroList.get().toModelType());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void saveMacroList(MacroList macroList) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        requireNonNull(macroList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMacroList(macroList), filePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 5,
      "joeychensmart": 56
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/storage/JsonMcGymmyStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * A class to access McGymmy data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class JsonMcGymmyStorage implements McGymmyStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMcGymmyStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public JsonMcGymmyStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Path getMcGymmyFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Optional\u003cReadOnlyMcGymmy\u003e readMcGymmy() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return readMcGymmy(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Similar to {@link #readMcGymmy()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Optional\u003cReadOnlyMcGymmy\u003e readMcGymmy(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Optional\u003cJsonSerializableMcGymmy\u003e jsonMcGymmy \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                filePath, JsonSerializableMcGymmy.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (jsonMcGymmy.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return Optional.of(jsonMcGymmy.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void saveMcGymmy(ReadOnlyMcGymmy mcGymmy) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        saveMcGymmy(mcGymmy, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Similar to {@link #saveMcGymmy(ReadOnlyMcGymmy)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void saveMcGymmy(ReadOnlyMcGymmy mcGymmy, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(mcGymmy);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMcGymmy(mcGymmy), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 27,
      "-": 53
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/storage/JsonSerializableMacroList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.Macro;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.MacroList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.exceptions.DuplicateMacroException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * An Immutable MacroList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "@JsonRootName(value \u003d \"macrolist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "class JsonSerializableMacroList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final List\u003cJsonAdaptedMacro\u003e macros \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Constructs a {@code JsonSerializableMacroList} with the given food."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public JsonSerializableMacroList(@JsonProperty(\"macros\") List\u003cJsonAdaptedMacro\u003e macros) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.macros.addAll(macros);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Converts a given {@code MacroList} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableMcGymmy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public JsonSerializableMacroList(MacroList source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        macros.addAll(source.getAsList().stream().map(JsonAdaptedMacro::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Converts this MacroList into the model\u0027s {@code MacroList} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public MacroList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        List\u003cMacro\u003e macrosToAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (JsonAdaptedMacro jsonAdaptedMacro : macros) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            macrosToAdd.add(jsonAdaptedMacro.toMacro());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return new MacroList(macrosToAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (DuplicateMacroException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new IllegalValueException(e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 58
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/storage/JsonSerializableMcGymmy.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * An Immutable McGymmy that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "@JsonRootName(value \u003d \"mcgymmy\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "class JsonSerializableMcGymmy {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"Food list contains duplicate food(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private final List\u003cJsonAdaptedFood\u003e food \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * Constructs a {@code JsonSerializableMcGymmy} with the given food."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public JsonSerializableMcGymmy(@JsonProperty(\"food\") List\u003cJsonAdaptedFood\u003e food) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        this.food.addAll(food);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Converts a given {@code ReadOnlyMcGymmy} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableMcGymmy}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public JsonSerializableMcGymmy(ReadOnlyMcGymmy source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        food.addAll(source.getFoodList().stream().map(JsonAdaptedFood::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * Converts this McGymmy into the model\u0027s {@code McGymmy} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public McGymmy toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy mcGymmy \u003d new McGymmy();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        for (JsonAdaptedFood jsonAdaptedFood : food) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            Food food \u003d jsonAdaptedFood.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            mcGymmy.addFood(food);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return mcGymmy;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 8,
      "jh123x": 16,
      "-": 33
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 6,
      "jh123x": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/storage/MacroListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.MacroList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Represents a storage for {@link MacroList}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public interface MacroListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Returns the file path of the MacroList file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    Path getMacroListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Returns MacroList from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    Optional\u003cMacroList\u003e readMacroList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Saves the given {@link MacroList} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param macroList cannot be null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void saveMacroList(MacroList macroList) throws IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 37
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/storage/McGymmyStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Represents a storage for {@link McGymmy}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public interface McGymmyStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Path getMcGymmyFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns McGymmy data as a {@link ReadOnlyMcGymmy}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Optional\u003cReadOnlyMcGymmy\u003e readMcGymmy() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @see #getMcGymmyFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Optional\u003cReadOnlyMcGymmy\u003e readMcGymmy(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Saves the given {@link ReadOnlyMcGymmy} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @param mcGymmy cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void saveMcGymmy(ReadOnlyMcGymmy mcGymmy) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @see #saveMcGymmy(ReadOnlyMcGymmy)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void saveMcGymmy(ReadOnlyMcGymmy mcGymmy, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 21,
      "-": 27
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * API of the Storage component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public interface Storage extends McGymmyStorage, UserPrefsStorage, MacroListStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Path getMcGymmyFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Optional\u003cReadOnlyMcGymmy\u003e readMcGymmy() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void saveMcGymmy(ReadOnlyMcGymmy mcGymmy) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 9,
      "joeychensmart": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.MacroList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Manages storage of McGymmy data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final McGymmyStorage mcGymmyStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final MacroListStorage macroListStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code McGymmyStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public StorageManager(McGymmyStorage mcGymmyStorage, MacroListStorage macroListStorage,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.mcGymmyStorage \u003d mcGymmyStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.macroListStorage \u003d macroListStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MacroList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Path getMacroListFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return macroListStorage.getMacroListFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Optional\u003cMacroList\u003e readMacroList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return macroListStorage.readMacroList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void saveMacroList(MacroList macroList) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        macroListStorage.saveMacroList(macroList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d McGymmy methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Path getMcGymmyFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return mcGymmyStorage.getMcGymmyFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Optional\u003cReadOnlyMcGymmy\u003e readMcGymmy() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return readMcGymmy(mcGymmyStorage.getMcGymmyFilePath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Optional\u003cReadOnlyMcGymmy\u003e readMcGymmy(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return mcGymmyStorage.readMcGymmy(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void saveMcGymmy(ReadOnlyMcGymmy mcGymmy) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        saveMcGymmy(mcGymmy, mcGymmyStorage.getMcGymmyFilePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void saveMcGymmy(ReadOnlyMcGymmy mcGymmy, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        mcGymmyStorage.saveMcGymmy(mcGymmy, filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 23,
      "joeychensmart": 21,
      "-": 56
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 8,
      "-": 30
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Insert text into the commandline box."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @param text Text to be inserted."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void insertText(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Add the inserted text"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        commandTextField.setText(commandTextField.getText() + text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Set pointer to point to the end"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        commandTextField.selectEnd();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 6,
      "jh123x": 12,
      "-": 75
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/ui/FoodCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * An UI component that displays information of a {@code Food}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class FoodCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String FXML \u003d \"FoodListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public final Food food;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Label protein;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Label carb;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Label fat;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Label totalCalories;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Creates a {@code FoodCode} with the given {@code Food} and index to display."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public FoodCard(Food food, int displayedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        name.setText(food.getName().fullName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        protein.setText(food.getProtein().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        fat.setText(food.getFat().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        carb.setText(food.getCarbs().toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        totalCalories.setText(String.format(\"Calories: %d\", food.getCalories()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        date.setText(food.getDate().toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        food.getTags().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (!(other instanceof FoodCard)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        FoodCard card \u003d (FoodCard) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                \u0026\u0026 food.equals(card.food);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "jh123x": 22,
      "-": 58,
      "aidoxe-123": 2
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/ui/FoodListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class FoodListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String FXML \u003d \"FoodListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FoodListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private ListView\u003cFood\u003e foodListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private long currentCalories \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private long currentFats \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private long currentProteins \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private long currentCarbs \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Creates a {@code FoodListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public FoodListPanel(ObservableList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Add listener to update the current calories whenever there is a change."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        foodList.addListener((ListChangeListener\u003cFood\u003e) c -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            if (c.next()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                updateCurrentCalories();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        foodListView.setItems(foodList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        foodListView.setCellFactory(listView -\u003e new FoodListViewCell());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Update calories at the start"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        updateCurrentCalories();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private void updateCurrentCalories() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Calculate the current calories when the list is changed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        currentCalories \u003d 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        currentFats \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        currentCarbs \u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        currentProteins \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        for (Food food : foodListView.getItems()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            currentCalories +\u003d food.getCalories();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            currentFats +\u003d food.getFat().getAmount();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            currentCarbs +\u003d food.getCarbs().getAmount();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            currentProteins +\u003d food.getProtein().getAmount();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Gets sum of calories in current list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @return sum of calories of current list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public long getCurrentCalories() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return currentCalories;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Gets sum of fats in current list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @return sum of fats of current list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public long getCurrentFats() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return currentFats;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Gets sum of proteins in current list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @return sum of proteins of current list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public long getCurrentProteins() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return currentProteins;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Gets sum of carbs in current list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @return sum of carbs of current list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public long getCurrentCarbs() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return currentCarbs;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Food} using a {@code FoodCard}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    static class FoodListViewCell extends ListCell\u003cFood\u003e {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        protected void updateItem(Food food, boolean empty) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            super.updateItem(food, empty);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            if (empty || food \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                setGraphic(new FoodCard(food, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "jh123x": 78,
      "-": 32
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import com.jfoenix.controls.JFXDatePicker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import javafx.stage.DirectoryChooser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import javafx.stage.FileChooser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.Logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * The Main Window."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Provides the basic application layout containing a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Stage primaryStage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private FoodListPanel foodListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private File directory;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private JFXDatePicker datePicker;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private StackPane foodListPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private StackPane summaryPanelPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private SummaryDisplay summaryPanel;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Initialise values"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        file \u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        directory \u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        foodListPanel \u003d new FoodListPanel(logic.getFilteredFoodList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        foodListPanelPlaceholder.getChildren().add(foodListPanel.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getMcGymmyFilePath());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        summaryPanel \u003d new SummaryDisplay();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        summaryPanelPlaceholder.getChildren().add(summaryPanel.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Update current value to total calories and macronutrient values."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        updateGraph();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Disable the field"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        datePicker.getEditor().setDisable(true);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Add listener to execute after date is changed"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        datePicker.valueProperty()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .addListener((observable, oldDate, newDate) -\u003e {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                    setDate();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                });"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Shows help message in the result box."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            executeCommand(\"help\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            assert false : \"Help button on menu error\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Handles the importing of data file."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void handleImport() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        FileChooser fileChooser \u003d new FileChooser();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        fileChooser.setTitle(\"Choose file to import\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            file \u003d fileChooser.showOpenDialog(primaryStage);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            logger.info(String.format(\"User selected \u0027%s\u0027\", file.toString()));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            executeCommand(String.format(\"import %s\", file.toString()));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        } catch (RuntimeException | CommandException | ParseException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            file \u003d null;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            logger.info(\"User did not select a valid file\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            resultDisplay.setFeedbackToUser(\"Please select a valid import file\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Get the import file directory chosen by the user."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Optional\u003cFile\u003e getImportFileDirectory() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (file \u003d\u003d null) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return Optional.of(file);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Handles the exporting of data file."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void handleExport() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        DirectoryChooser directoryChooser \u003d new DirectoryChooser();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        directoryChooser.setTitle(\"Choose location to export\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            directory \u003d directoryChooser.showDialog(primaryStage);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            logger.info(String.format(\"User selected \u0027%s\u0027\", directory.toString()));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            executeCommand(String.format(\"export %s\", directory.toString()));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        } catch (RuntimeException | CommandException | ParseException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            directory \u003d null;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            logger.info(\"User did not select a valid directory\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            resultDisplay.setFeedbackToUser(\"Please select a valid directory\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Get the export directory chosen by the user."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Optional\u003cFile\u003e getExportDirectory() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (directory \u003d\u003d null) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return Optional.of(directory);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Add the selected Date to the commandLine."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void setDate() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (getDate().isEmpty()) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        logger.info(String.format(\"Selected %s\", getDate().get().toString()));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            executeCommand(String.format(\"find -d %s\", getDate().get().toString()));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            datePicker.setValue(null);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            assert false : \"Help button on menu error\";"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Get the date which the user selected."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @return Optional containing the date selected. Null if no date is selected."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Optional\u003cLocalDate\u003e getDate() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        LocalDate date \u003d datePicker.getValue();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return Optional.of(date);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public FoodListPanel getFoodListPanel() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return foodListPanel;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            updateGraph();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            updateGraph();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private void updateGraph() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Update the graphs"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        summaryPanel.setTotalMacronutrients("
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                getFoodListPanel().getCurrentCalories(),"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                getFoodListPanel().getCurrentProteins(),"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                getFoodListPanel().getCurrentCarbs(),"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                getFoodListPanel().getCurrentFats()"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        );"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 9,
      "dcchan98": 2,
      "jh123x": 151,
      "-": 166
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/ui/SummaryDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "import static jimmy.mcgymmy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import javafx.geometry.Side;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * The UI component responsible for showing the summarised Statistics of the food entered."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class SummaryDisplay extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String FXML \u003d \"SummaryDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String TOTAL_CALORIES_TEXT \u003d \"Total Calories %d\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String TOTAL_PROTEIN_TEXT \u003d \"Protein: %d\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String TOTAL_CARBOHYDRATE_TEXT \u003d \"Carbs: %d\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String TOTAL_FAT_TEXT \u003d \"Fats: %d\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    private PieChart pieChart;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Creates a summary display."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Contains summary of the items shown."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public SummaryDisplay() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        pieChart.setAnimated(false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        pieChart.setLabelsVisible(false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        pieChart.setLegendSide(Side.RIGHT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void setTotalMacronutrients(long totalCalories, long totalProtein, long totalCarbs, long totalFats) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireAllNonNull(totalCalories, totalProtein, totalCarbs, totalFats);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assert totalCalories \u003e 0 : \"Total Calories is negative\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        pieChart.setTitle(String.format(TOTAL_CALORIES_TEXT, totalCalories));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Reset the data"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        pieChart.getData().clear();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Update the data to the correct value"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        addData(TOTAL_CARBOHYDRATE_TEXT, totalCarbs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        addData(TOTAL_PROTEIN_TEXT, totalProtein);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        addData(TOTAL_FAT_TEXT, totalFats);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private void addData(String formatString, long count) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //If the count for the data is \u003c\u003d 0, do not show the data value"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (count \u003c\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Add the data to the chart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        pieChart.getData().add(new PieChart.Data(String.format(formatString, count), count));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcchan98": 7,
      "jh123x": 51
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * API of UI component."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 4,
      "jh123x": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/mcgymmy_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 25,
      "jh123x": 2,
      "-": 62
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 18,
      "-": 75
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    -fx-border-color: transparent transparent derive(-fx-base, 80%) transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap: 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-background-color: #989898;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-background-color: TRANSPARENT;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-background-color: #bcbcbc;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jh123x"
        },
        "content": "#filterField, #foodListPanel {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "#date {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    -fx-background-color: #913e7b;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    -fx-padding: 4 3 4 3;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    -fx-border-insets: 3 0;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    -fx-background-insets: 3 0;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/* Graph CSS Design */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jh123x"
        },
        "content": "chart-pie-label-line {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-stroke: #ffffff;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-fill: #ffffff;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jh123x"
        },
        "content": ".chart-pie-label {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-stroke: #ffffff;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-font-size: 1em;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jh123x"
        },
        "content": ".chart-legend {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-stroke: WHITE;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-text-fill: WHITE;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-tile-alignment: CENTER;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-tick-label-fill: white;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-background-radius: 5px;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jh123x"
        },
        "content": ".chart-title {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/* DatePicker CSS Design */"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jh123x"
        },
        "content": ".date-picker-popup {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-padding: 1;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-background-color: #676767;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jh123x"
        },
        "content": ".date-picker-popup \u003e .month-year-pane {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-padding: 4;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-background-color: #8d8d8d;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-text-fill: WHITE;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jh123x"
        },
        "content": ".date-picker-popup \u003e .month-year-pane \u003e .spinner {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-spacing: 4;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-fill-height: false;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jh123x"
        },
        "content": ".date-picker-popup \u003e .month-year-pane \u003e .spinner \u003e .spinner-label {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-font-size: 1.083333em;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-text-fill: #606060;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jh123x"
        },
        "content": ".date-picker-popup \u003e .month-year-pane \u003e .spinner \u003e .left-button {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-padding: 4 6;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-background-color: gray;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jh123x"
        },
        "content": ".date-picker-popup \u003e .month-year-pane \u003e .spinner \u003e .right-button {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-padding: 4 6;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-background-color: gray;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jh123x"
        },
        "content": ".date-picker-popup \u003e .month-year-pane \u003e .spinner \u003e .button \u003e .left-arrow {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-padding: 0.333em 0.167em 0.333em 0.167em;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-shape: \"M5.997,5.072L5.995,6.501l-2.998-4l2.998-4l0.002,1.43l-1.976,2.57L5.997,5.072z\";"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-scale-shape: true;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jh123x"
        },
        "content": ".date-picker-popup \u003e .month-year-pane \u003e .spinner \u003e .button \u003e .right-arrow {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-padding: 0.333em 0.167em 0.333em 0.167em;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-shape: \"M2.998-0.07L3-1.499l2.998,4L3,6.501l-0.002-1.43l1.976-2.57L2.998-0.07z\";"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-scale-shape: true;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jh123x"
        },
        "content": ".date-picker-popup \u003e * \u003e .cell {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-padding: 0 7;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-alignment: BASELINE_CENTER;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jh123x"
        },
        "content": ".date-picker-popup \u003e * \u003e .week-number-header-cell,"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jh123x"
        },
        "content": ".date-picker-popup \u003e * \u003e .day-name-cell {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-font-size: 0.833333em;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-text-fill: #0070C0;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jh123x"
        },
        "content": ".date-picker-popup \u003e * \u003e .week-number-cell {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-font-size: 0.75em;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jh123x"
        },
        "content": ".date-picker-popup \u003e * \u003e .day-cell {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-border-color: lightgray;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jh123x"
        },
        "content": ".date-picker-popup \u003e * \u003e .today {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-background-insets: 1;"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-border-color: #606060;"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-border-insets: 1;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jh123x"
        },
        "content": ".date-picker-popup \u003e * \u003e .today:focused {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-background-color: #CCE8FF;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jh123x"
        },
        "content": ".date-picker-popup \u003e * \u003e .selected {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-background-color: #CCE8FF;"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jh123x"
        },
        "content": ".date-picker-popup \u003e * \u003e .previous-month,"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jh123x"
        },
        "content": ".date-picker-popup \u003e * \u003e .next-month {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-text-fill: #aaaaaa;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "jh123x"
        },
        "content": ".date-picker-popup \u003e * \u003e .previous-month \u003e .secondary-text,"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jh123x"
        },
        "content": ".date-picker-popup \u003e * \u003e .next-month \u003e .secondary-text {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -fx-fill: #aaaaaa;"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "jh123x": 132,
      "-": 336,
      "aidoxe-123": 11
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": ".jfx-date-picker .jfx-text-field{"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    -jfx-unfocus-color: black;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jh123x": 4,
      "-": 20
    }
  },
  {
    "path": "src/main/resources/view/FoodListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \u003cLabel fx:id\u003d\"protein\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$protein\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \u003cLabel fx:id\u003d\"carb\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$carbohydrate\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \u003cLabel fx:id\u003d\"fat\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$fat\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \u003cLabel fx:id\u003d\"totalCalories\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$totalCalories\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "jh123x": 4,
      "-": 31,
      "aidoxe-123": 1
    }
  },
  {
    "path": "src/main/resources/view/FoodListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml\" xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    \u003cListView fx:id\u003d\"foodListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "jh123x": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXDatePicker?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cfx:root minHeight\u003d\"600.0\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"McGymmy\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        \u003cImage url\u003d\"@/images/mcgymmy_32.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                  \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleImport\" text\u003d\"Import\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                  \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExport\" text\u003d\"Export\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "               \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Date\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                  \u003citems\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                     \u003cMenuItem mnemonicParsing\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                        \u003cgraphic\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                           \u003cJFXDatePicker id\u003d\"datePicker\" fx:id\u003d\"datePicker\" accessibleText\u003d\"Select a Date\" defaultColor\u003d\"#868686\" editable\u003d\"false\" prefHeight\u003d\"37.0\" prefWidth\u003d\"139.0\" promptText\u003d\"Select Date\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                        \u003c/graphic\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                     \u003c/MenuItem\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                  \u003c/items\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "               \u003c/Menu\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"200\" minHeight\u003d\"100\" prefHeight\u003d\"200\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \u003cHBox fx:id\u003d\"foodList\" prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                       \u003cStackPane fx:id\u003d\"foodListPanelPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" nodeOrientation\u003d\"LEFT_TO_RIGHT\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                   \u003cStackPane fx:id\u003d\"summaryPanelPlaceholder\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" nodeOrientation\u003d\"RIGHT_TO_LEFT\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                       \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                           \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                       \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                   \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                                  \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jh123x": 30,
      "-": 44
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml\" fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "\u003cGridPane xmlns:fx\u003d\"http://javafx.com/fxml\" styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cLabel fx:id\u003d\"saveLocationStatus\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/resources/view/SummaryDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003c?import javafx.scene.chart.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"250.0\" minWidth\u003d\"250.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \u003cPieChart id\u003d\"pieChartMain\" fx:id\u003d\"pieChart\" stylesheets\u003d\"@DarkTheme.css\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jh123x": 10
    }
  },
  {
    "path": "src/test/data/JsonMacroListStorageTest/invalidMacroList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  \"macros\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    \"name\" : \"poop\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    \"rawCommands\" : [ \"list\" ],"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    \"macroArguments\" : [ \"-a\", \"-b\" ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 8
    }
  },
  {
    "path": "src/test/data/JsonMacroListStorageTest/validMacroList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  \"macros\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    \"name\" : \"first\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    \"rawCommands\" : [ \"list\", \"help\" ],"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    \"macroArguments\" : [ \"a\", \"b\" ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    \"name\" : \"second\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    \"rawCommands\" : [ \"clear\" ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    \"macroArguments\" : [ \"c\", \"d\" ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 12
    }
  },
  {
    "path": "src/test/data/JsonMcGymmyStorageTest/invalidAndValidFoodMcGymmy.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  \"food\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"name\": \"Valid Food\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \"protein\": \"424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"fat\": \"333\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"carbs\": \"666\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"name\": \"Food With Invalid Protein Field\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"protein\": \"948asdf2424\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"fat\": \"333\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"carbs\": \"666\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 15,
      "jh123x": 1
    }
  },
  {
    "path": "src/test/data/JsonMcGymmyStorageTest/invalidFoodMcGymmy.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  \"food\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"name\": \"Food with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \"protein\": \"424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"fat\": \"123\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"carbs\": \"321\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 9,
      "jh123x": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableMcGymmyTest/duplicateFoodMcGymmy.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  \"food\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \"name\": \"chicken rice\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \"protein\": \"253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"fat\": \"123\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"carbs\": \"456\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "      \"date\": \"20 Apr 2020\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        \"Lunch\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \"name\": \"chicken rice\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \"protein\": \"253\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"fat\": \"123\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "      \"carbs\": \"456\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "      \"date\": \"20/04/2020\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 13,
      "jh123x": 5,
      "aidoxe-123": 3
    }
  },
  {
    "path": "src/test/data/JsonSerializableMcGymmyTest/invalidFoodMcGymmy.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  \"food\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \"name\": \"Nasi Alamak\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \"protein\": \"424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"fat\": \"invalid@fat!3e\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"carbs\": \"321\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 8,
      "jh123x": 2
    }
  },
  {
    "path": "src/test/data/JsonSerializableMcGymmyTest/typicalFoodMcGymmy.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  \"_comment\": \"McGymmy save file which contains the same Food values as in TypicalFoods#getTypicalMcGymmy()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  \"food\": ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \"name\": \"Chicken Rice\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \"protein\": \"253\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"fat\": \"123\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"carbs\": \"456\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "      \"date\": \"20 Apr 2020\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        \"lunch\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \"name\": \"Nasi Alamak\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \"protein\": \"432\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"fat\": \"321\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"carbs\": \"123\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "      \"date\": \"2 Sep 2020\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        \"dinner\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        \"lunch\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    },"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \"name\": \"Crispy Fried Fish\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \"protein\": \"563\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"fat\": \"456\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"carbs\": \"654\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "      \"date\": \"13 Oct 2020\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"tagged\": []"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    },"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \"name\": \"Danish Cookies\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \"protein\": \"533\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"fat\": \"654\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"carbs\": \"456\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "      \"date\": \"1 Jan 2020\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        \"lunch\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    },"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \"name\": \"Eggs\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \"protein\": \"224\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"fat\": \"246\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"carbs\": \"810\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "      \"date\": \"7 Mar 2019\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"tagged\": []"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    },"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \"name\": \"Fruit Cake\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \"protein\": \"427\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"fat\": \"987\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"carbs\": \"789\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "      \"date\": \"3 Feb 1998\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"tagged\": []"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    },"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \"name\": \"Gingerbread\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \"protein\": \"442\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"fat\": \"789\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"carbs\": \"987\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "      \"date\": \"5 May 1973\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "      \"tagged\": []"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 42,
      "jh123x": 19,
      "aidoxe-123": 7
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\": 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\": 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\": \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\": {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\": 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\": 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\": 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  \"mcGymmyFilePath\": \"mcgymmy.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\": 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\": 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\": {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\": 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\": 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  \"mcGymmyFilePath\": \"mcgymmy.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        private final Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "jh123x": 1,
      "-": 56
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotSame;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final Path DEFAULT_PREF_PATH \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final Path TEST_PREF_PATH \u003d Paths.get(\"dummy.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void getPathTest() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Check if getPath is correct"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(defaultConfig.getUserPrefsFilePath(), DEFAULT_PREF_PATH);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Check set path"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        defaultConfig.setUserPrefsFilePath(TEST_PREF_PATH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(TEST_PREF_PATH, defaultConfig.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Check for inequality"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotSame(DEFAULT_PREF_PATH, defaultConfig.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Test same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(defaultConfig, defaultConfig);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //2 Object with Same type"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Config defaultConfig2 \u003d new Config();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(defaultConfig2, defaultConfig);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Same type of object with different types"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Config config3 \u003d new Config();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        config3.setUserPrefsFilePath(TEST_PREF_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(config3, defaultConfig);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //2 Modified Configs"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Config config4 \u003d new Config();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        config4.setUserPrefsFilePath(TEST_PREF_PATH);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(config3, config4);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "jh123x": 40,
      "-": 22
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/commons/core/GuiSettingsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "class GuiSettingsTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final GuiSettings DEFAULT_SETTINGS \u003d new GuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final GuiSettings DEFAULT_SETTINGS_2 \u003d new GuiSettings();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final GuiSettings DIFFERENT_SETTINGS_1 \u003d new GuiSettings(100, 100, 10, 10);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final GuiSettings DIFFERENT_SETTINGS_2 \u003d new GuiSettings(100, 100, 10, 10);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final double OTHER_HEIGHT \u003d 100;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final double OTHER_WIDTH \u003d 100;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final Point DEFAULT_POINT \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final Point OTHER_POINT \u003d new Point(10, 10);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void getWindowsCoordinatesTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Check if default value is correct"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(DEFAULT_SETTINGS.getWindowCoordinates(), DEFAULT_POINT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Check if they are different"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(DEFAULT_SETTINGS.getWindowCoordinates(), OTHER_POINT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Check if non-default values are equal"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(DIFFERENT_SETTINGS_2.getWindowCoordinates(), OTHER_POINT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void getWindowsHeightTest() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Check if default value is correct"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(DEFAULT_SETTINGS.getWindowHeight(), DEFAULT_HEIGHT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Check if they are different"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(DEFAULT_SETTINGS.getWindowHeight(), OTHER_HEIGHT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Check if non-default values are equal"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(DIFFERENT_SETTINGS_2.getWindowHeight(), OTHER_HEIGHT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void getWindowsWidthTest() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Check if default value is correct"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(DEFAULT_SETTINGS.getWindowWidth(), DEFAULT_WIDTH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Check if they are different"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(DEFAULT_SETTINGS.getWindowWidth(), OTHER_WIDTH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Check if non-default values are equal"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(DIFFERENT_SETTINGS_2.getWindowWidth(), OTHER_WIDTH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotNull(DEFAULT_SETTINGS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Check if 2 GUI settings are equal"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(DEFAULT_SETTINGS, DEFAULT_SETTINGS_2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Check if they are different"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(DEFAULT_SETTINGS, DIFFERENT_SETTINGS_1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Check if 2 initialised GUI Settings are the same"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(DIFFERENT_SETTINGS_2, DIFFERENT_SETTINGS_1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 75
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() throws IllegalValueException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalValueException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private void verifyVersionParsedCorrectly("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            String versionString, int major, int minor, int patch, boolean isEarlyAccess) throws IllegalValueException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "jh123x": 7,
      "-": 128
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0)); //Boundary Case"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(-100)); // Negative partition"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1)); //Boundary case"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-100)); //Negative partition"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "jh123x": 4,
      "-": 56
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/mcgymmy_32.png\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void checkArgument_true_nothingHappens() throws IllegalValueException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "jh123x": 8,
      "-": 28
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e CollectionUtil.requireAllNonNull(objects));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e CollectionUtil.requireAllNonNull(collection));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        CollectionUtil.requireAllNonNull(objects);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        CollectionUtil.requireAllNonNull(collection);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 6,
      "-": 101
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                \"Word parameter cannot be empty\", () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                \"Word parameter should be a single word\", () -\u003e StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                        \"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() throws IllegalValueException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 7,
      "jh123x": 7,
      "-": 133
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.commons.core.Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.storage.JsonMacroListStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.storage.JsonMcGymmyStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        JsonMcGymmyStorage mcGymmyStorage \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new JsonMcGymmyStorage(temporaryFolder.resolve(\"mcGymmy.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        JsonMacroListStorage macroListStorage \u003d new JsonMacroListStorage(temporaryFolder.resolve(\"macroList.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        StorageManager storage \u003d new StorageManager(mcGymmyStorage, macroListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // Setup LogicManager with JsonMcGymmyIoExceptionThrowingStub"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        JsonMcGymmyStorage mcGymmyStorage \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new JsonMcGymmyIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionMcGymmy.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        JsonMacroListStorage macroListStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                new JsonMacroListStorage(temporaryFolder.resolve(\"ioExceptionMacroList.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        StorageManager storage \u003d new StorageManager(mcGymmyStorage, macroListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        // String addCommand \u003d AddCommand.COMMAND_WORD + \" -n amy -p 99999999 -e amy@amy.com\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + \" -n amy -p 999 -f 123 -c 543\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food expectedFood \u003d new FoodBuilder().withName(new Name(\"amy\")).withProtein(\"999\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .withFat(\"123\").withCarb(\"543\").build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        expectedModel.addFood(expectedFood);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredFoodList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static class JsonMcGymmyIoExceptionThrowingStub extends JsonMcGymmyStorage {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        private JsonMcGymmyIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        public void saveMcGymmy(ReadOnlyMcGymmy mcGymmy, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "jh123x": 41,
      "joeychensmart": 6,
      "-": 120
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalFoods.getTypicalMcGymmy;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.MacroList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private void initEach() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        model \u003d new ModelManager(getTypicalMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void execute_validFoodWithoutDate_addSuccessfulAndSetCurrentDayAsDate() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ModelStubAcceptingFoodAdded modelStub \u003d new ModelStubAcceptingFoodAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food validFood \u003d new FoodBuilder().withCarb(\"123\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        AddCommand command \u003d new AddCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        command.setParameters("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"n\", validFood.getName()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"p\", validFood.getProtein()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"f\", validFood.getFat()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"c\", validFood.getCarbs()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"t\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"d\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandResult commandResult \u003d command.execute(modelStub);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validFood), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertEquals(Arrays.asList(validFood), modelStub.foodAdded);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void execute_validFoodWithDate_addSuccessfulAndSetInputDateAsDate() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food validFoodWithDate \u003d new FoodBuilder().withCarb(\"123\").withDate(\"20/4/2020\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        AddCommand command \u003d new AddCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        command.setParameters("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            new CommandParserTestUtil.ParameterStub\u003c\u003e(\"n\", validFoodWithDate.getName()),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"p\", validFoodWithDate.getProtein()),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"f\", validFoodWithDate.getFat()),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"c\", validFoodWithDate.getCarbs()),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"t\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"d\", validFoodWithDate.getDate())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        );"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        String expectedMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, validFoodWithDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new McGymmy(model.getMcGymmy()), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.addFood(validFoodWithDate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_validFoodWithTag_addSuccessful() throws IllegalValueException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food validFoodWithTag \u003d new FoodBuilder().withCarb(\"123\").withTags(\"hello\").build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        AddCommand command \u003d new AddCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        command.setParameters("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            new CommandParserTestUtil.ParameterStub\u003c\u003e(\"n\", validFoodWithTag.getName()),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"p\", validFoodWithTag.getProtein()),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"f\", validFoodWithTag.getFat()),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"c\", validFoodWithTag.getCarbs()),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"t\", new Tag(\"hello\")),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"d\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        );"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        String expectedMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, validFoodWithTag);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new McGymmy(model.getMcGymmy()), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.addFood(validFoodWithTag);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_duplicateFood_success() throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food validFood \u003d new FoodBuilder().withCarb(\"123\").build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        AddCommand command \u003d new AddCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        command.setParameters("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"n\", validFood.getName()),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"p\", validFood.getProtein()),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"f\", validFood.getFat()),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"c\", validFood.getCarbs()),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"t\"),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"d\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        );"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        String expectedMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, validFood);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new McGymmy(model.getMcGymmy()), new UserPrefs());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.addFood(validFood);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.addFood(validFood);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        command.execute(model);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        public void clearFilteredFood() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public MacroList getMacroList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public void setMacroList(MacroList replacement) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        public Path getMcGymmyFilePath() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        public void setMcGymmyFilePath(Path mcGymmyFilePath) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        public void addFood(Food food) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        public ReadOnlyMcGymmy getMcGymmy() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        public void setMcGymmy(ReadOnlyMcGymmy mcGymmy) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        public void deleteFood(Index target) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        public void setFood(Index index, Food editedFood) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        public boolean canUndo() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        public void undo() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * A Model stub that always accept the food being added."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private class ModelStubAcceptingFoodAdded extends ModelStub {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        final ArrayList\u003cFood\u003e foodAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return foodAdded.stream().anyMatch(food::equals);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        public void addFood(Food food) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            foodAdded.add(food);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        public ReadOnlyMcGymmy getMcGymmy() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return new McGymmy();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 5,
      "dcchan98": 6,
      "jh123x": 45,
      "joeychensmart": 111,
      "-": 4,
      "aidoxe-123": 80
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_emptyMcGymmy_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_oneFoodMcGymmy_success() throws IllegalValueException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        model.addFood(new FoodBuilder().withName(new Name(\"Pizza\")).build());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ClearCommand clearCommand \u003d new ClearCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(clearCommand, model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_partialClearMcGymmy_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        model.addFood(TypicalFoods.getApple());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        model.addFood(TypicalFoods.getCrispyFriedFish());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        model.updateFilteredFoodList((food) -\u003e food"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .getName()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .fullName"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .contains(TypicalFoods.getApple().getName().fullName));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        expectedModel.addFood(TypicalFoods.getCrispyFriedFish());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        expectedModel.updateFilteredFoodList((food) -\u003e food.getName()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .fullName.contains(TypicalFoods.getApple().getName().fullName));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ClearCommand clearCommand \u003d new ClearCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(clearCommand, model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcchan98": 3,
      "jh123x": 50
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final Float DIFFERENT_TYPE \u003d 0.5f;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final boolean DEFAULT_EXIT \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final boolean DIFFERENT_EXIT \u003d true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String TEST_FEEDBACK \u003d \"feedback\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String DIFFERENT_TEST_FEEDBACK \u003d \"different\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final CommandResult COMMAND_RESULT \u003d new CommandResult(TEST_FEEDBACK);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final CommandResult COMMAND_RESULT_2 \u003d new CommandResult(TEST_FEEDBACK);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final CommandResult COMMAND_RESULT_3 \u003d new CommandResult(TEST_FEEDBACK, DEFAULT_EXIT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final CommandResult DIFFERENT_EXIT_CODE \u003d new CommandResult(TEST_FEEDBACK, DIFFERENT_EXIT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final CommandResult DIFFERENT_COMMAND_RESULT \u003d new CommandResult(DIFFERENT_TEST_FEEDBACK);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void getFeedbackToUserTest() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // same object -\u003e Same feedback message"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(COMMAND_RESULT.getFeedbackToUser(), COMMAND_RESULT.getFeedbackToUser());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // different object but Same feedback message (Regardless of exit code and constructor)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(COMMAND_RESULT.getFeedbackToUser(), TEST_FEEDBACK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(DIFFERENT_COMMAND_RESULT.getFeedbackToUser(), DIFFERENT_TEST_FEEDBACK);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(COMMAND_RESULT.getFeedbackToUser(), COMMAND_RESULT_2.getFeedbackToUser());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(COMMAND_RESULT.getFeedbackToUser(), COMMAND_RESULT_3.getFeedbackToUser());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(COMMAND_RESULT.getFeedbackToUser(), DIFFERENT_EXIT_CODE.getFeedbackToUser());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(DIFFERENT_COMMAND_RESULT.getFeedbackToUser(), DIFFERENT_COMMAND_RESULT.getFeedbackToUser());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // different object and different feedback message"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(COMMAND_RESULT.getFeedbackToUser(), DIFFERENT_TEST_FEEDBACK);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(COMMAND_RESULT.getFeedbackToUser(), DIFFERENT_COMMAND_RESULT.getFeedbackToUser());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void isMessageTest() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // same object -\u003e same exit code"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(COMMAND_RESULT.isExit(), COMMAND_RESULT.isExit());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // different object but Same exit code (Regardless of exit code and constructor)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(COMMAND_RESULT.isExit(), DEFAULT_EXIT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(DIFFERENT_EXIT_CODE.isExit(), DIFFERENT_EXIT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(COMMAND_RESULT.isExit(), COMMAND_RESULT_2.isExit());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(COMMAND_RESULT.isExit(), COMMAND_RESULT_3.isExit());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(COMMAND_RESULT.isExit(), DIFFERENT_COMMAND_RESULT.isExit());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // different object different exit code"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(COMMAND_RESULT.isExit(), DIFFERENT_EXIT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(DIFFERENT_EXIT_CODE.isExit(), DEFAULT_EXIT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(COMMAND_RESULT.isExit(), DIFFERENT_EXIT_CODE.isExit());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(COMMAND_RESULT_2, COMMAND_RESULT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(COMMAND_RESULT_3, COMMAND_RESULT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(COMMAND_RESULT, COMMAND_RESULT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(COMMAND_RESULT, null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(COMMAND_RESULT, DIFFERENT_TYPE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(DIFFERENT_COMMAND_RESULT, COMMAND_RESULT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(DIFFERENT_EXIT_CODE, COMMAND_RESULT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // same object -\u003e same hashcode"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(COMMAND_RESULT.hashCode(), COMMAND_RESULT.hashCode());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(COMMAND_RESULT.hashCode(), COMMAND_RESULT_2.hashCode());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(COMMAND_RESULT.hashCode(), DIFFERENT_COMMAND_RESULT.hashCode());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(COMMAND_RESULT.hashCode(), DIFFERENT_EXIT_CODE.hashCode());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "jh123x": 62,
      "-": 33
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.logic.predicate.FoodContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * - the food list, filtered food list and selected food in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy expectedMcGymmy \u003d new McGymmy(actualModel.getMcGymmy());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        List\u003cFood\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredFoodList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(expectedMcGymmy, actualModel.getMcGymmy());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredFoodList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the food at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * {@code model}\u0027s food list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public static void showFoodAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food food \u003d model.getFilteredFoodList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        final String[] splitName \u003d food.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        model.updateFilteredFoodList(new FoodContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(1, model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 4,
      "jh123x": 18,
      "-": 55,
      "aidoxe-123": 2
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Model model \u003d new ModelManager(TypicalFoods.getTypicalMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Index index \u003d TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food foodToDelete \u003d model.getFilteredFoodList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        deleteCommand.setParameters(new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", index));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FOOD_SUCCESS, foodToDelete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.deleteFood(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFoodList().size() + 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        deleteCommand.setParameters(new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", outOfBoundIndex));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Index index \u003d TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        CommandTestUtil.showFoodAtIndex(model, index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food foodToDelete \u003d model.getFilteredFoodList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        deleteCommand.setParameters(new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", index));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FOOD_SUCCESS, foodToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.deleteFood(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        showNoFood(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        CommandTestUtil.showFoodAtIndex(model, TypicalIndexes.INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_FOOD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMcGymmy().getFoodList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        deleteCommand.setParameters(new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", outOfBoundIndex));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private void showNoFood(Model model) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        model.updateFilteredFoodList(p -\u003e false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(model.getFilteredFoodList().isEmpty());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 15,
      "jh123x": 12,
      "joeychensmart": 45,
      "-": 7,
      "aidoxe-123": 9
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.logic.commands.CommandTestUtil.showFoodAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalFoods.getTypicalMcGymmy;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalIndexes.INDEX_SECOND_FOOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_NAME_BOB \u003d \"McSpicy\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_PROTEIN_BOB \u003d \"999\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private static final String VALID_DATE \u003d \"12-04-2020\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() throws IllegalValueException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food editedFood \u003d new FoodBuilder().withTags(\"lunch\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        editCommand.setParameters("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", INDEX_FIRST_FOOD),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"n\", editedFood.getName()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"p\", editedFood.getProtein()),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"f\", editedFood.getFat()),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"c\", editedFood.getCarbs()),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"d\", editedFood.getDate())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FOOD_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new McGymmy(model.getMcGymmy()), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.setFood(Index.fromZeroBased(0), editedFood);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Index indexLastFood \u003d Index.fromOneBased(model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Food lastFood \u003d model.getFilteredFoodList().get(indexLastFood.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        FoodBuilder foodInList \u003d new FoodBuilder(lastFood);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food editedFood \u003d foodInList.withName(new Name(VALID_NAME_BOB)).withProtein(VALID_PROTEIN_BOB).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        editCommand.setParameters("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", indexLastFood),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"n\", editedFood.getName()),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"p\", editedFood.getProtein()),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"f\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"c\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"d\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        );"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FOOD_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new McGymmy(model.getMcGymmy()), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.setFood(indexLastFood, editedFood);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_dateSpecifiedUnfilteredList_success() throws IllegalValueException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Index indexLastFood \u003d Index.fromOneBased(model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food lastFood \u003d model.getFilteredFoodList().get(indexLastFood.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        FoodBuilder foodInList \u003d new FoodBuilder(lastFood);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food editedFood \u003d foodInList.withDate(VALID_DATE).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        editCommand.setParameters("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", indexLastFood),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"n\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"p\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"f\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"c\"),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"d\", editedFood.getDate())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        );"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FOOD_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new McGymmy(model.getMcGymmy()), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.setFood(indexLastFood, editedFood);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        editCommand.setParameters("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", INDEX_FIRST_FOOD),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"n\"),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"p\"),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"f\"),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"c\"),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"d\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        );"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String expectedMessage \u003d EditCommand.MESSAGE_NOT_EDITED;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertCommandFailure(editCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_filteredList_success() throws IllegalValueException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        showFoodAtIndex(model, INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Food foodInFilteredList \u003d model.getFilteredFoodList().get(INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food editedFood \u003d new FoodBuilder(foodInFilteredList).withName(new Name(VALID_NAME_BOB)).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        editCommand.setParameters("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", INDEX_FIRST_FOOD),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"n\", editedFood.getName()),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"p\"),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"f\"),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"c\"),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"d\")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        );"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FOOD_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new McGymmy(model.getMcGymmy()), new UserPrefs());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.setFood(Index.fromZeroBased(0), editedFood);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void execute_duplicateFoodUnfilteredList_success() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food firstFood \u003d model.getFilteredFoodList().get(INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        editCommand.setParameters("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", INDEX_SECOND_FOOD),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"n\", firstFood.getName()),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"p\", firstFood.getProtein()),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"f\", firstFood.getFat()),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"c\", firstFood.getCarbs()),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"d\", firstFood.getDate())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        );"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FOOD_SUCCESS, firstFood);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new McGymmy(model.getMcGymmy()), new UserPrefs());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.setFood(Index.fromZeroBased(0), firstFood);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.setFood(Index.fromZeroBased(1), firstFood);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void execute_editedFoodSameAsInitialFood_returnsFoodNoChangeMessage() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food foodInList \u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                model.getMcGymmy().getFoodList().get(INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        editCommand.setParameters("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", INDEX_FIRST_FOOD),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"n\"),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"p\", foodInList.getProtein()),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"f\"),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"c\"),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"d\")"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        );"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_FOOD_NO_CHANGE, foodInList);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new McGymmy(model.getMcGymmy()), new UserPrefs());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.setFood(INDEX_FIRST_FOOD, foodInList);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void execute_duplicateFoodFilteredList_success() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        showFoodAtIndex(model, INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // edit food in filtered list into a duplicate in fridge"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food foodInList \u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                model.getMcGymmy().getFoodList().get(INDEX_SECOND_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        editCommand.setParameters("
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", INDEX_FIRST_FOOD),"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"n\", foodInList.getName()),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"p\", foodInList.getProtein()),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"f\", foodInList.getFat()),"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"c\", foodInList.getCarbs()),"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"d\", foodInList.getDate())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        );"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FOOD_SUCCESS, foodInList);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new McGymmy(model.getMcGymmy()), new UserPrefs());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.setFood(Index.fromZeroBased(0), foodInList);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.setFood(Index.fromZeroBased(1), foodInList);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void execute_invalidFoodIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFoodList().size() + 1);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        editCommand.setParameters("
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", outOfBoundIndex),"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"n\"),"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"p\"),"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"f\"),"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"c\"),"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"d\")"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        );"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void execute_invalidFoodIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        showFoodAtIndex(model, INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FOOD;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMcGymmy().getFoodList().size());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        editCommand.setParameters("
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", outOfBoundIndex),"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"n\"),"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"p\"),"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"f\"),"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"c\"),"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"d\")"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        );"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 17,
      "jh123x": 52,
      "joeychensmart": 72,
      "-": 7,
      "aidoxe-123": 105
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 14,
      "jh123x": 3
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/ExportCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.CommandParserTestUtil.OptionalParameterStub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.CommandParserTestUtil.ParameterStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "class ExportCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String INVALID_DIR_STRING \u003d Paths.get(\"c:\", \"Invalid String\").toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_DIR_STRING \u003d Paths.get(\"src\", \"test\", \"data\", \"ExportData\").toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final Path INVALID_DIR_PATH \u003d Path.of(INVALID_DIR_STRING);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final Path VALID_DIR_PATH \u003d Path.of(VALID_DIR_STRING);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final Path VALID_DIR_PATH_DEFAULT \u003d Path.of(VALID_DIR_STRING, \"mcgymmy.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final Path VALID_DIR_PATH_OPTIONAL \u003d Path.of(VALID_DIR_STRING, \"mc.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final Model DEFAULT_MODEL \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final ParameterStub\u003cPath\u003e VALID_PARAMETER_STUB \u003d new ParameterStub\u003cPath\u003e(\"\", VALID_DIR_PATH);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final OptionalParameterStub\u003cString\u003e EMPTY_OPTIONAL_PARAMETER_STUB \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            new OptionalParameterStub\u003cString\u003e(\"o\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final OptionalParameterStub\u003cString\u003e STRING_OPTIONAL_PARAMETER_STUB \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            new OptionalParameterStub\u003cString\u003e(\"o\", \"mc.json\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final ParameterStub\u003cPath\u003e INVALID_PARAMETER_STUB \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            new ParameterStub\u003cPath\u003e(\"\", INVALID_DIR_PATH);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void directoryNotFoundError() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        exportCommand.setPathParameter(INVALID_PARAMETER_STUB, STRING_OPTIONAL_PARAMETER_STUB);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertCommandFailure(exportCommand,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                DEFAULT_MODEL, String.format(ExportCommand.MESSAGE_FAILURE, INVALID_DIR_STRING));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void invalidOutputName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        exportCommand.setPathParameter(INVALID_PARAMETER_STUB, EMPTY_OPTIONAL_PARAMETER_STUB);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertCommandFailure(exportCommand, DEFAULT_MODEL,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                String.format(ExportCommand.MESSAGE_FAILURE, INVALID_DIR_STRING));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void exportWithOptionalSuccess() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        File exportFile \u003d new File(VALID_DIR_PATH_OPTIONAL.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (exportFile.exists()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            exportFile.delete();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        exportCommand.setPathParameter(VALID_PARAMETER_STUB, STRING_OPTIONAL_PARAMETER_STUB);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertCommandSuccess(exportCommand, DEFAULT_MODEL,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                String.format(ExportCommand.MESSAGE_SUCCESS, VALID_DIR_PATH_OPTIONAL),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                DEFAULT_MODEL);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Remove the file after command executes"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        exportFile \u003d new File(VALID_DIR_PATH_OPTIONAL.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        exportFile.delete();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void exportWithoutOptionalSuccess() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        File exportFile \u003d new File(VALID_DIR_PATH_DEFAULT.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (exportFile.exists()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            exportFile.delete();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        exportCommand.setPathParameter(VALID_PARAMETER_STUB, EMPTY_OPTIONAL_PARAMETER_STUB);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertCommandSuccess(exportCommand, DEFAULT_MODEL,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                String.format(ExportCommand.MESSAGE_SUCCESS, VALID_DIR_PATH_DEFAULT),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                DEFAULT_MODEL);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Remove the file after command executes"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        exportFile \u003d new File(VALID_DIR_PATH_DEFAULT.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        exportFile.delete();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 84
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalFoods.getChickenRice;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalFoods.getCrispyFriedFish;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalFoods.getDanishCookies;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalFoods.getNasiLemak;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.predicate.DatePredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.logic.predicate.FoodContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.predicate.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.predicate.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Model model \u003d new ModelManager(TypicalFoods.getTypicalMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(TypicalFoods.getTypicalMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_zeroKeywords_noFoodFound() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_FOOD_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        FoodContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        FindCommand command \u003d new FindCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        command.setParameters("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"\", predicate),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"n\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"t\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"d\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        expectedModel.updateFilteredFoodList(predicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        ObservableList\u003cFood\u003e curr \u003d expectedModel.getFilteredFoodList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredFoodList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_multipleKeywords_multipleFoodsFound() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_FOOD_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        FoodContainsKeywordsPredicate predicate \u003d preparePredicate(\"CHICKEN fish\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        FindCommand command \u003d new FindCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        command.setParameters("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"\", predicate),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"n\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"t\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"d\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        expectedModel.updateFilteredFoodList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(Arrays.asList(getChickenRice(), getCrispyFriedFish()),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                model.getFilteredFoodList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void execute_validDate_singleFoodFound() throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_FOOD_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        DatePredicate datePredicate \u003d new DatePredicate(\"20-04-2020\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        FindCommand command \u003d new FindCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        command.setParameters("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"n\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"t\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"d\", datePredicate));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        expectedModel.updateFilteredFoodList(datePredicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(Arrays.asList(getChickenRice()), model.getFilteredFoodList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void execute_validTag_multipleFoodsFound() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_FOOD_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        TagContainsKeywordsPredicate tagPredicate \u003d prepareTagPredicate(\"lunch\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        FindCommand command \u003d new FindCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        command.setParameters("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"\"),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"n\"),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"t\", tagPredicate),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"d\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.updateFilteredFoodList(tagPredicate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(Arrays.asList(getChickenRice(), getNasiLemak(), getDanishCookies()), model.getFilteredFoodList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void execute_validNameDateButInvalidTag_noFoodFound() throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_FOOD_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d prepareNamePredicate(\"chicken\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        TagContainsKeywordsPredicate tagPredicate \u003d prepareTagPredicate(\"dinner\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        DatePredicate datePredicate \u003d new DatePredicate(\"20-04-2020\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        FindCommand command \u003d new FindCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        command.setParameters("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"n\", namePredicate),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"t\", tagPredicate),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"d\", datePredicate));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Predicate\u003cFood\u003e combinedPredicate \u003d namePredicate.and(tagPredicate).and(datePredicate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        expectedModel.updateFilteredFoodList(combinedPredicate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredFoodList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * Parses {@code userInput} into a {@code FoodContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private FoodContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return new FoodContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * Parses {@code userInput} into a {@code TagContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private TagContainsKeywordsPredicate prepareTagPredicate(String userInput) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return new TagContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private NameContainsKeywordsPredicate prepareNamePredicate(String userInput) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 72,
      "jh123x": 20,
      "joeychensmart": 17,
      "-": 7,
      "aidoxe-123": 20
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/ImportCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.CommandParserTestUtil.ParameterStub;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Invalid Commands are not tested as they are checked in the parser."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "class ImportCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_FILE \u003d Paths"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"JsonSerializableMcGymmyTest\", \"typicalFoodMcGymmy.json\").toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String INVALID_FILE \u003d Paths"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"JsonMcGymmyStorageTest\", \"notJsonFormatMcGymmy.json\").toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String NOT_FOUND_FILE \u003d Paths"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"JsonSerializableMcGymmyTest\", \"not found.json\").toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final ParameterStub\u003cPath\u003e VALID_FILE_STUB \u003d new ParameterStub\u003cPath\u003e(\"\", Path.of(VALID_FILE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final ParameterStub\u003cPath\u003e NOT_FOUND_FILE_STUB \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            new ParameterStub\u003cPath\u003e(\"\", Path.of(NOT_FOUND_FILE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final ParameterStub\u003cPath\u003e INVALID_FILE_STUB \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            new ParameterStub\u003cPath\u003e(\"\", Path.of(INVALID_FILE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void validImport_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ModelManager model1 \u003d new ModelManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ImportCommand importCommand \u003d new ImportCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        importCommand.setParameters(VALID_FILE_STUB);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Create Expected model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ModelManager model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy mcGymmy \u003d new McGymmy();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        mcGymmy.setFoodItems(TypicalFoods.getTypicalFoodItems());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        model.setMcGymmy(mcGymmy);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertCommandSuccess(importCommand, model1,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                String.format(ImportCommand.MESSAGE_IMPORT_FOOD_SUCCESS, \"typicalFoodMcGymmy.json\"), model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void invalidFileNotFoundImport_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ModelManager model1 \u003d new ModelManager();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ImportCommand importCommand \u003d new ImportCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        importCommand.setParameters(NOT_FOUND_FILE_STUB);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertCommandFailure(importCommand, model1,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                String.format(ImportCommand.MESSAGE_IMPORT_FOOD_FAILURE, NOT_FOUND_FILE_STUB.consume()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void invalidFileImport_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ModelManager model1 \u003d new ModelManager();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ImportCommand importCommand \u003d new ImportCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        importCommand.setParameters(INVALID_FILE_STUB);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertCommandFailure(importCommand, model1,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                String.format(ImportCommand.MESSAGE_IMPORT_FOOD_FAILURE, INVALID_FILE_STUB.consume()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 67
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.logic.commands.ListCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        model \u003d new ModelManager(TypicalFoods.getTypicalMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new ListCommand(), model, MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.showFoodAtIndex(model, INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new ListCommand(), model, MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 29,
      "jh123x": 9
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/ListMacroCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalMacros.TEST_MACRO;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class ListMacroCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.model \u003d new ModelManager(TypicalFoods.getTypicalMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.model.setMacroList(this.model.getMacroList().withNewMacro(TEST_MACRO));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void listEmptyList_success() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // Boundary value: testing empty list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.model.setMacroList(this.model.getMacroList().withoutMacro(TEST_MACRO.getName()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String feedback \u003d new ListMacroCommand().execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // testing if its showing whole list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(feedback.contains(\"all the available macros\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void listWithoutParameter_success() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String feedback \u003d new ListMacroCommand().execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // testing if its showing whole list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(feedback.contains(\"all the available macros\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(feedback.contains(\"test\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void listWithParameter_validName_success() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ListMacroCommand listMacroCommand \u003d new ListMacroCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        listMacroCommand.setParameters(new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"\", \"test\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String feedback \u003d listMacroCommand.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // testing if its showing specific macro"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(feedback.contains(\"Parameters:\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(feedback.contains(\"Information on macro test:\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void listWithParameter_invalidName_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ListMacroCommand listMacroCommand \u003d new ListMacroCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        listMacroCommand.setParameters(new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"\", \"wuyweg\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e listMacroCommand.execute(model));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 62
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/RemoveMacroCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalMacros.TEST_MACRO;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class RemoveMacroCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.model \u003d new ModelManager(TypicalFoods.getTypicalMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.model.setMacroList(this.model.getMacroList().withNewMacro(TEST_MACRO));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void invalidName_throwsCommandException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        RemoveMacroCommand removeMacroCommand \u003d new RemoveMacroCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        removeMacroCommand.setParameters(new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", \"wqfwef\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e removeMacroCommand.execute(model));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void validName_removesMacro() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        RemoveMacroCommand removeMacroCommand \u003d new RemoveMacroCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        removeMacroCommand.setParameters(new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", \"test\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        removeMacroCommand.execute(this.model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertFalse(this.model.getMacroList().hasMacro(\"test\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 40
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/TagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "class TagCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Model model \u003d new ModelManager(TypicalFoods.getTypicalMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final String tag1 \u003d \"hello\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final String tag2 \u003d \"goodbye\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final String tag3 \u003d \"seeYouAgain\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() throws IllegalValueException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Index index \u003d TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food foodToTag \u003d model.getFilteredFoodList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        tagCommand.setParameters("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", TypicalIndexes.INDEX_FIRST_FOOD),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"t\", new Tag(tag1))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        String expectedMessage \u003d String.format(TagCommand.MESSAGE_SUCCESS, tag1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.setFood(index, new FoodBuilder(foodToTag).withTags(tag1).build());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFoodList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        tagCommand.setParameters("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", outOfBoundIndex),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"t\", new Tag(tag1))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandFailure(tagCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_validIndexFilteredList_success() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.showFoodAtIndex(model, TypicalIndexes.INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food foodToTag \u003d model.getFilteredFoodList().get(TypicalIndexes.INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        tagCommand.setParameters("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", TypicalIndexes.INDEX_FIRST_FOOD),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"t\", new Tag(tag3))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        String expectedMessage \u003d String.format(TagCommand.MESSAGE_SUCCESS, tag3);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.setFood(Index.fromZeroBased(0),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new FoodBuilder(foodToTag).withTags(tag3).build());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_duplicateTag_throwsCommandException() throws IllegalValueException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Index index \u003d TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food foodToTag \u003d model.getFilteredFoodList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        tagCommand.setParameters("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", TypicalIndexes.INDEX_FIRST_FOOD),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            new CommandParserTestUtil.ParameterStub\u003c\u003e(\"t\", new Tag(tag2))"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        );"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        String expectedMessage \u003d String.format(TagCommand.MESSAGE_SUCCESS, tag2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.setFood(index, new FoodBuilder(foodToTag).withTags(tag2).build());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // add tag for the first time"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        CommandTestUtil.assertCommandFailure(tagCommand, model,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            String.format(TagCommand.MESSAGE_DUPLICATE_TAG, tag2, foodToTag.getName().fullName));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 64,
      "aidoxe-123": 30
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/UnTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "class UnTagCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Model model \u003d new ModelManager(TypicalFoods.getTypicalMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() throws IllegalValueException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Index index \u003d TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food foodToRmTag \u003d model.getFilteredFoodList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        UnTagCommand unTagCommand \u003d new UnTagCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        unTagCommand.setParameters("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", TypicalIndexes.INDEX_FIRST_FOOD),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"t\", new Tag(\"lunch\"))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        );"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String expectedMessage \u003d String.format(UnTagCommand.MESSAGE_SUCCESS, \"lunch\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food expFood \u003d new FoodBuilder(foodToRmTag).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        expFood.removeTag(new Tag(\"lunch\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.setFood(index, expFood);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(unTagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFoodList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        UnTagCommand unTagCommand \u003d new UnTagCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        unTagCommand.setParameters("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", outOfBoundIndex),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"t\", new Tag(\"lunch\"))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandFailure(unTagCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_validIndexUnfilteredList_throwsCommandException() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        UnTagCommand unTagCommand \u003d new UnTagCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        unTagCommand.setParameters("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", TypicalIndexes.INDEX_FIRST_FOOD),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"t\", new Tag(\"DoesNotExist\"))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food food \u003d model.getFilteredFoodList().get(TypicalIndexes.INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandFailure(unTagCommand, model, String.format(UnTagCommand.MESSAGE_NOT_FOUND_TAG,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                \"DoesNotExist\", food.getName().fullName));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_validIndexFilteredList_success() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.showFoodAtIndex(model, TypicalIndexes.INDEX_SECOND_FOOD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food foodToTag \u003d model.getFilteredFoodList().get(TypicalIndexes.INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        UnTagCommand unTagCommand \u003d new UnTagCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        unTagCommand.setParameters("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", TypicalIndexes.INDEX_FIRST_FOOD),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"t\", new Tag(\"lunch\"))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        );"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String expectedMessage \u003d String.format(UnTagCommand.MESSAGE_SUCCESS, \"lunch\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food expFood \u003d new FoodBuilder(foodToTag).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        expFood.removeTag(new Tag(\"lunch\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        expectedModel.setFood(TypicalIndexes.INDEX_SECOND_FOOD, expFood);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(unTagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 84,
      "aidoxe-123": 3
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/UndoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": " * Contains unit tests for UndoCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private class CanUndoModelStub extends ModelManager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        private boolean hasBeenUndoed \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        public boolean canUndo() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        public void undo() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            hasBeenUndoed \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        public boolean isUndoed() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            return hasBeenUndoed;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private class CannotUndoModelStub extends ModelManager {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        public boolean canUndo() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void execute_canUndo_returnsUndoSuccessfulMessage() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        UndoCommand command \u003d new UndoCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        CanUndoModelStub model \u003d new CanUndoModelStub();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        CommandResult commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(new CommandResult(UndoCommand.MESSAGE_UNDO_SUCCESS), commandResult);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertTrue(model.isUndoed());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void execute_cannotUndo_returnsCannotUndoAnyMoreMessage() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        UndoCommand command \u003d new UndoCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        CommandResult commandResult \u003d command.execute(new CannotUndoModelStub());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(new CommandResult(UndoCommand.MESSAGE_NOT_UNDOABLE), commandResult);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidoxe-123": 53
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/macro/MacroRunnerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.logic.macro;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalFoods.getTypicalMcGymmy;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalMacros.TEST_MACRO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalMacros.UNNAMED_PARAMETER_TEST_MACRO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.CommandLine;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.CommandLineParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.DefaultParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.Options;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.Macro;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class MacroRunnerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testMacro_addsToModel() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        testMacroAdd(TEST_MACRO, \"-p 20 -c 200\", new String[]{\"first\", \"second\"});"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testMacroWithUnnamedParameter_addsToModel() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        testMacroAdd(UNNAMED_PARAMETER_TEST_MACRO, \"nababa -q 200\", new String[]{\"nababa\"});"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        testMacroAdd(UNNAMED_PARAMETER_TEST_MACRO, \"cockroach -q 629\", new String[]{\"cockroach\"});"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private void testMacroAdd(Macro toTest, String arguments, String[] itemsToCheckInModel) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandLineParser commandLineParser \u003d new DefaultParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Options options \u003d toTest.getOptions();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandLine args \u003d commandLineParser.parse(options, arguments.split(\" \"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        MacroRunner.asCommandInstance(toTest, args).execute(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        boolean[] foundList \u003d new boolean[itemsToCheckInModel.length];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        boolean[] allTrueList \u003d new boolean[itemsToCheckInModel.length];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (int i \u003d 0; i \u003c itemsToCheckInModel.length; i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            foundList[i] \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            allTrueList[i] \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (Food food : model.getFilteredFoodList()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            // TODO: possibly add more convenience functions to our model."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            for (int i \u003d 0; i \u003c itemsToCheckInModel.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                if (food.getName().fullName.equals(itemsToCheckInModel[i])) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    foundList[i] \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertArrayEquals(allTrueList, foundList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 1,
      "joeychensmart": 54
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/macro/NewMacroCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.logic.macro;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.MacroList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "// Integration tests"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class NewMacroCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String[] ARGUMENTS \u003d new String[] {\"list\"};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String[] ARGUMENTS_2 \u003d new String[] {\"list2\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String MACRO_STRING_DEFAULT \u003d \"macro\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String MACRO_STRING_HELP \u003d \"macro help\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String MACRO_STRING_TEST \u003d \"macro test\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final NewMacroCommand MACRO_COMMAND_DEFAULT \u003d new NewMacroCommand(MACRO_STRING_DEFAULT, ARGUMENTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final NewMacroCommand MACRO_COMMAND_HELP \u003d new NewMacroCommand(MACRO_STRING_HELP, ARGUMENTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final NewMacroCommand MACRO_COMMAND_TEST \u003d new NewMacroCommand(MACRO_STRING_TEST, ARGUMENTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final NewMacroCommand MACRO_COMMAND_DIFFERENT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            new NewMacroCommand(MACRO_STRING_DEFAULT, ARGUMENTS_2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        model.setMacroList(new MacroList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void noMacroDeclaration_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e MACRO_COMMAND_DEFAULT.execute(model));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void duplicateDeclaration_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e MACRO_COMMAND_HELP.execute(model));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void validDeclaration_addsToList() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        MACRO_COMMAND_TEST.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(model.getMacroList().hasMacro(\"test\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void checkStatementEquality() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Same Commands should be equal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(MACRO_COMMAND_HELP.getStatements(), ARGUMENTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(MACRO_COMMAND_HELP.getStatements(), MACRO_COMMAND_TEST.getStatements());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Different Commands should be different"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(MACRO_COMMAND_HELP.getStatements(), MACRO_COMMAND_DIFFERENT.getStatements());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 26,
      "joeychensmart": 34
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.AbstractParameter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.OptionalParameter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.Parameter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static Parameter\u003cString\u003e makeDummyParameter(String name, String flag) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return new Parameter\u003c\u003e(name, flag, \"test\", \"test\", (s) -\u003e s);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static OptionalParameter\u003cString\u003e makeDummyOptionalParameter(String name, String flag) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return new OptionalParameter\u003c\u003e(name, flag, \"test\", \"test\", (s) -\u003e s);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * Retrieves the rawValue of a command\u0027s parameter"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * @param command the command to inspect"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * @param flag    the desired flag"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * @return the raw value of the parameter, Optional.empty() otherwise."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public static Optional\u003cString\u003e commandParameterValue(Command command, String flag) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        List\u003cAbstractParameter\u003e parameterList \u003d command.getParameterSet().getParameterList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        for (AbstractParameter parameter : parameterList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            if (parameter.getFlag().equals(flag)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                return parameter.getRawValue();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static class ParameterStub\u003cT\u003e extends Parameter\u003cT\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        private final T value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         * Creates a parameter with a fixed flag and value."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "         *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         * @param flag  flag for parameter"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         * @param value fixed value"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public ParameterStub(String flag, T value) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            super(\"stub\", flag, \"stub\", \"NA\", s -\u003e value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.value \u003d value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public T consume() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return this.value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static class OptionalParameterStub\u003cT\u003e extends OptionalParameter\u003cT\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        private final Optional\u003cT\u003e value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         * Creates an optional parameter with a fixed flag and value."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "         *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         * @param flag  flag for parameter"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         * @param value fixed value"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public OptionalParameterStub(String flag, T value) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            super(\"stub\", flag, \"stub\", \"NA\", s -\u003e value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.value \u003d Optional.of(value);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         * Creates an optional parameter with a fixed flag but no value."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "         *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         * @param flag flag for parameter"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public OptionalParameterStub(String flag) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            super(\"stub\", flag, \"stub\", \"NA\", s -\u003e null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.value \u003d Optional.empty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public Optional\u003cT\u003e getValue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return this.value;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 27,
      "joeychensmart": 55,
      "-": 8
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/parser/McGymmyParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalMacros.TEST_MACRO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandExecutable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.macro.NewMacroCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.Macro;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "// Integration tests for the parser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class McGymmyParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void primitiveCommands_getParsed() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        McGymmyParser mcGymmyParser \u003d new McGymmyParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // Equivalence partition: command without arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandExecutable listCommand \u003d mcGymmyParser.parse(\"list\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // Equivalence partition: command with arguments"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandExecutable addCommand \u003d mcGymmyParser.parse(\"add -n poop -p 200\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(listCommand instanceof ListCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(addCommand instanceof AddCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void macroDefinitions_getParsedCorrectly() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        McGymmyParser mcGymmyParser \u003d new McGymmyParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // testing that it filters out the empty commands, i.e. the \u0027;;\u0027, \u0027;  ;\u0027, etc"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandExecutable output \u003d mcGymmyParser.parse(\"macro test  ;list;; exit  ;;\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(output instanceof NewMacroCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        NewMacroCommand newMacroCommand \u003d (NewMacroCommand) output;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(\"macro test\", newMacroCommand.getArgumentDeclaration());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertArrayEquals(new String[] {\"list\", \"exit\"}, newMacroCommand.getStatements());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void registeredMacroCommand_getsParsed() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        McGymmyParser mcGymmyParser \u003d new McGymmyParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Macro dummyMacro \u003d new Macro(\"test\", new String[] {}, new String[] {});"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        mcGymmyParser.setMacroList(mcGymmyParser.getMacroList().withNewMacro(dummyMacro));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // this should not throw any errors"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        mcGymmyParser.parse(\"test\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void invalidMacro_showsUsageToUser() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        McGymmyParser mcGymmyParser \u003d new McGymmyParser();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        mcGymmyParser.setMacroList(mcGymmyParser.getMacroList().withNewMacro(TEST_MACRO));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            mcGymmyParser.parse(\"test\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            fail(\"ParseException not thrown\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            assertTrue(e.getMessage().contains(\"Missing required\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void unknownCommand_parseError() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        McGymmyParser mcGymmyParser \u003d new McGymmyParser();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e mcGymmyParser.parse(\"aisudbhaiuo\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 69
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.date.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Fat;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Protein;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private static final String INVALID_PROTEIN_1 \u003d \"+651%)\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private static final String INVALID_PROTEIN_2 \u003d \"2000\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private static final String INVALID_FAT_1 \u003d \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private static final String INVALID_FAT_2 \u003d \"2000 \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private static final String INVALID_CARB_1 \u003d \"example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private static final String INVALID_CARB_2 \u003d \" 1000 \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#food\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_PROTEIN \u003d \"123\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_FAT \u003d \"123\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_CARB \u003d \"213\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"food\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"lunch\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_FILE \u003d Paths"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"JsonSerializableMcGymmyTest\", \"typicalFoodMcGymmy.json\").toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String INVALID_FILE_1 \u003d Paths"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"JsonSerializableMcGymmyTest\", \"typical.json\").toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_DIR \u003d Paths"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"JsonSerializableMcGymmyTest\").toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String INVALID_DIR \u003d Paths"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"J\").toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String NO_JSON_NAME \u003d \"mc\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String JSON_NAME \u003d \"mc.json\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String INVALID_DATE \u003d \"invalid date\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String DOES_NOT_EXIST_DATE \u003d \"invalid date\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_DATE \u003d \"12/12/2020\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_DATE_2 \u003d \"12-12-2020\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // not an integer"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // signed integer"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"+10\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // negative integer"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"-10\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // zero"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"0\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertThrows(ParseException.class, Index.MESSAGE_INDEX_TOO_LARGE, () -\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                ParserUtil.parseIndex(Long.toString((long) Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertEquals(TypicalIndexes.INDEX_FIRST_FOOD, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertEquals(TypicalIndexes.INDEX_FIRST_FOOD, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // long string"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(TypicalIndexes.INDEX_FIRST_FOOD, ParserUtil.parseIndex(\"00000000000000000000000000000000000001\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseProtein_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseProtein(null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseProtein_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseProtein(INVALID_PROTEIN_1));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseProtein(INVALID_PROTEIN_2));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseProtein_validValueWithoutWhitespace_returnsProtein() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Protein expectedProtein \u003d new Protein(Integer.parseInt(VALID_PROTEIN));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(expectedProtein, ParserUtil.parseProtein(VALID_PROTEIN));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseProtein_validValueWithWhitespace_returnsTrimmedProtein() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String proteinWithWhitespace \u003d WHITESPACE + VALID_PROTEIN + WHITESPACE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Protein expectedProtein \u003d new Protein(Integer.parseInt(VALID_PROTEIN));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(expectedProtein, ParserUtil.parseProtein(proteinWithWhitespace));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseCarb_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCarb(null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseCarb_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCarb(INVALID_CARB_1));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCarb(INVALID_CARB_2));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseCarb_validValueWithoutWhitespace_returnsCarbohydrate() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Carbohydrate expectedCarbohydrate \u003d new Carbohydrate(Integer.parseInt(VALID_CARB));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertEquals(expectedCarbohydrate, ParserUtil.parseCarb(VALID_CARB));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseCarb_validValueWithWhitespace_returnsTrimmedCarbohydrate() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String carbohydrateWithWhitespace \u003d WHITESPACE + VALID_CARB + WHITESPACE;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Carbohydrate expectedCarbohydrate \u003d new Carbohydrate(Integer.parseInt(VALID_CARB));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertEquals(expectedCarbohydrate, ParserUtil.parseCarb(carbohydrateWithWhitespace));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseFat_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFat(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseFat_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseFat(INVALID_FAT_1));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseFat(INVALID_FAT_2));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseFat_validValueWithoutWhitespace_returnsFat() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Fat expectedFat \u003d new Fat(Integer.parseInt(VALID_FAT));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(expectedFat, ParserUtil.parseFat(VALID_FAT));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseFat_validValueWithWhitespace_returnsTrimmedFat() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String fatWithWhitespace \u003d WHITESPACE + VALID_FAT + WHITESPACE;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Fat expectedFat \u003d new Fat(Integer.parseInt(VALID_FAT));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(expectedFat, ParserUtil.parseFat(fatWithWhitespace));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseFile_withInvalidFilePath() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseFile(INVALID_FILE_1));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseFile_withFolderPath() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseFile(VALID_DIR));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseFile_withValidFilePath() throws ParseException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Path path \u003d Paths.get(VALID_FILE);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(path, ParserUtil.parseFile(VALID_FILE));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseDir_withInvalidFolderPath() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDir(VALID_FILE));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseDir_withNotFoundFolderPath() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDir(INVALID_DIR));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseDir_withValidFolderPath() throws Exception {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Path path \u003d Paths.get(VALID_DIR);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(path, ParserUtil.parseDir(VALID_DIR));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseOutputName_withEmptyString() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Empty name"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseOutputName(\"\"));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //With spaces"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseOutputName(\" \"));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseOutputName(\"  \"));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseOutputName_withNoJsonName() throws Exception {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //No spaces around it"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String name \u003d ParserUtil.parseOutputName(NO_JSON_NAME);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(name, NO_JSON_NAME + \".json\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Leading and trailing spaces"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String name2 \u003d ParserUtil.parseOutputName(\" \" + NO_JSON_NAME + \" \");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(name2, NO_JSON_NAME + \".json\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseOutputName_withJsonName() throws Exception {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Test valid name"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String name \u003d ParserUtil.parseOutputName(JSON_NAME);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(name, JSON_NAME);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Test with leading and trailing spaces"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String name2 \u003d ParserUtil.parseOutputName(\" \" + JSON_NAME + \" \");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(name2, JSON_NAME);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseDate_withInvalidDate() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseDate_withNoSuchDate() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(DOES_NOT_EXIST_DATE));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseDate_withValidDate() throws Exception {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(VALID_DATE);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Date date2 \u003d ParserUtil.parseDate(VALID_DATE_2);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(date, date2);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 14,
      "jh123x": 144,
      "-": 133,
      "aidoxe-123": 25
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/parser/PrimitiveCommandHelpUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "// integration tests for HelpCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class PrimitiveCommandHelpUtilTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private PrimitiveCommandHelpUtil helpUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        PrimitiveCommandParser parser \u003d new PrimitiveCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        helpUtil \u003d new PrimitiveCommandHelpUtil(parser.getCommandTable(), parser.getCommandDescriptionTable());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void noArguments_correctOutput() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandResult commandResult \u003d helpUtil.newHelpCommand().execute(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        /* Checking for contained keywords: If we check for the whole string,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "           minor format changes might break the test. Checking for keywords"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "           should suffice. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // Check if \u0027for more info...\u0027 string is included"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(commandResult.getFeedbackToUser().contains(\"help [COMMAND]\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // Equivalence partition: commands in commandTable"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(commandResult.getFeedbackToUser().contains(\"add: \"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(commandResult.getFeedbackToUser().contains(\"list: \"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // Equivalence partition: special case macro command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(commandResult.getFeedbackToUser().contains(\"macro: \"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void argumentFromCommandTable_correctOutput() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // Equivalence partition: checking 1 command from the table should suffice."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandResult commandResult \u003d helpUtil.newHelpCommand(\"add\").execute(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // Check \u0027usage:\u0027 is included"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(commandResult.getFeedbackToUser().contains(\"usage\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // Check if parameter string for 1 parameter is included (same partition as other parameters)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(commandResult.getFeedbackToUser().contains(\"-n\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // Check \u0027EXAMPLE\u0027 is included"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(commandResult.getFeedbackToUser().contains(\"EXAMPLE\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void argumentIsMacro_correctOutput() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // Equivalence partition: checking special case of macro command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandResult commandResult \u003d helpUtil.newHelpCommand(\"macro\").execute(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // Check \u0027usage:\u0027 is included"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(commandResult.getFeedbackToUser().contains(\"usage\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // Check if format string is included."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(commandResult.getFeedbackToUser().contains(\"MACRONAME\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // Check \u0027EXAMPLE\u0027 is included"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(commandResult.getFeedbackToUser().contains(\"EXAMPLE\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 62
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/parser/PrimitiveCommandParserCommandsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class PrimitiveCommandParserCommandsTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final PrimitiveCommandParser parser \u003d new PrimitiveCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(parser.parse(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(parser.parse(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(parser.parse(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String searchString \u003d \"haiufas iuaohbfiasduo\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Command command \u003d (Command) parser.parse(FindCommand.COMMAND_WORD + \" \" + searchString);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(command instanceof FindCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(CommandParserTestUtil.commandParameterValue(command, \"\"), Optional.of(searchString));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String indexString \u003d \"68\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Command command \u003d (Command) parser.parse(DeleteCommand.COMMAND_WORD + \" \" + indexString);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(command instanceof DeleteCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(CommandParserTestUtil.commandParameterValue(command, \"\"), Optional.of(indexString));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_deleteEmptyParameter_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(DeleteCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String nameString \u003d \"Chicken Rice\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String proteinString \u003d \"991\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String fatString \u003d \"99\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String carbString \u003d \"555\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String commandString \u003d String.format(\"%s -n %s -p %s -f %s -c %s\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                AddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                nameString,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                proteinString,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                fatString,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                carbString);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Command command \u003d (Command) parser.parse(commandString);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(command instanceof AddCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(CommandParserTestUtil.commandParameterValue(command, \"n\"), Optional.of(nameString));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertEquals(CommandParserTestUtil.commandParameterValue(command, \"p\"), Optional.of(proteinString));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertEquals(CommandParserTestUtil.commandParameterValue(command, \"f\"), Optional.of(fatString));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertEquals(CommandParserTestUtil.commandParameterValue(command, \"c\"), Optional.of(carbString));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_addMissingParameters_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String commandString \u003d String.format(\"%s -p 123\", AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(commandString));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String indexString \u003d \"68\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String proteinString \u003d \"123\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String fatString \u003d \"456\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String carbString \u003d \"789\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String commandString \u003d String.format(\"%s %s -p %s -f %s -c %s\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                EditCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                indexString,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                proteinString,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                fatString,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                carbString);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Command command \u003d (Command) parser.parse(commandString);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(command instanceof EditCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(CommandParserTestUtil.commandParameterValue(command, \"\"), Optional.of(indexString));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(CommandParserTestUtil.commandParameterValue(command, \"n\"), Optional.empty());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertEquals(CommandParserTestUtil.commandParameterValue(command, \"p\"), Optional.of(proteinString));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertEquals(CommandParserTestUtil.commandParameterValue(command, \"f\"), Optional.of(fatString));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertEquals(CommandParserTestUtil.commandParameterValue(command, \"c\"), Optional.of(carbString));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_editMissingIndex_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String commandString \u003d String.format(\"%s -n poop\", EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(commandString));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_helpNoArguments() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        PrimitiveCommandHelpUtil helpUtil \u003d new PrimitiveCommandHelpUtil("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                parser.getCommandTable(),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                parser.getCommandDescriptionTable());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(parser.parse(\"help\").execute(model), helpUtil.newHelpCommand().execute(model));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_helpCommands() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // Should suffice to check \"help [COMMAND NAME]\" appears."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        PrimitiveCommandHelpUtil helpUtil \u003d new PrimitiveCommandHelpUtil("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                parser.getCommandTable(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                parser.getCommandDescriptionTable());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (String commandName : parser.getRegisteredCommands()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if (commandName.equals(\"help\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            assertEquals(parser.parse(\"help \" + commandName).execute(model),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    helpUtil.newHelpCommand(commandName).execute(model));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 29,
      "jh123x": 3,
      "joeychensmart": 107
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/parser/PrimitiveCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.OptionalParameter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.Parameter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "// Unit tests using a stub command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class PrimitiveCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String DUMMY_VALUE_1 \u003d \"abc\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String DUMMY_VALUE_2 \u003d \"cde\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String DUMMY_VALUE_3 \u003d \"fgh\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final PrimitiveCommandParser parser \u003d new PrimitiveCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        parser.addCommand(\"dummy\", \"dummy\", StubCommand::new);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        parser.removeCommand(\"dummy\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parse_dummyCommand_correctType() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String commandString \u003d String.format(\"dummy -t1 %s -t2 %s -o1 %s\", DUMMY_VALUE_1, DUMMY_VALUE_2, DUMMY_VALUE_3);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Command command \u003d (Command) parser.parse(commandString);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(command instanceof StubCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parse_dummyCommandAllParameters_success() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String commandString \u003d String.format(\"dummy -t1 %s -t2 %s -o1 %s\", DUMMY_VALUE_1, DUMMY_VALUE_2, DUMMY_VALUE_3);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        StubCommand stubCommand \u003d (StubCommand) parser.parse(commandString);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(stubCommand.getParameter1(), DUMMY_VALUE_1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(stubCommand.getParameter2(), DUMMY_VALUE_2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(stubCommand.getOptionalParameter(), Optional.of(DUMMY_VALUE_3));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parse_dummyCommandOmitOptional_success() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String commandString \u003d String.format(\"dummy -t1 %s -t2 %s\", DUMMY_VALUE_1, DUMMY_VALUE_2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        StubCommand stubCommand \u003d (StubCommand) parser.parse(commandString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(stubCommand.getParameter1(), DUMMY_VALUE_1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(stubCommand.getParameter2(), DUMMY_VALUE_2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(stubCommand.getOptionalParameter(), Optional.empty());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parse_dummyCommandSwapOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String commandString \u003d String.format(\"dummy -t2 %s -o1 %s -t1 %s\", DUMMY_VALUE_2, DUMMY_VALUE_3, DUMMY_VALUE_1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        StubCommand stubCommand \u003d (StubCommand) parser.parse(commandString);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(stubCommand.getParameter1(), DUMMY_VALUE_1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(stubCommand.getParameter2(), DUMMY_VALUE_2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(stubCommand.getOptionalParameter(), Optional.of(DUMMY_VALUE_3));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parse_dummyCommandOmitRequired_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String commandString \u003d String.format(\"dummy -t2 %s\", DUMMY_VALUE_2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(commandString));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parse_dummyCommandSpacesInParameters_accepted() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String spacedValue1 \u003d \"abc def\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String spacedValue2 \u003d \"a b c d e f g 1 2 3\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String commandString \u003d String.format(\"dummy -t1 %s -t2 %s\", spacedValue1, spacedValue2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        StubCommand stubCommand \u003d (StubCommand) parser.parse(commandString);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(stubCommand.getParameter1(), spacedValue1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(stubCommand.getParameter2(), spacedValue2);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(stubCommand.getOptionalParameter(), Optional.empty());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(ParseException.class, Messages.MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parse(\"unknownCommand\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    static class StubCommand extends Command {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        private final Parameter\u003cString\u003e testParameter1 \u003d CommandParserTestUtil.makeDummyParameter(\"test1\", \"t1\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        private final Parameter\u003cString\u003e testParameter2 \u003d CommandParserTestUtil.makeDummyParameter(\"test2\", \"t2\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        private final OptionalParameter\u003cString\u003e testOptionalParameter \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                CommandParserTestUtil.makeDummyOptionalParameter(\"opt\", \"o1\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.registerParameter(testParameter1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.registerParameter(testParameter2);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.registerParameter(testOptionalParameter);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return new CommandResult(\"nothing\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public String getParameter1() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return testParameter1.consume();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public String getParameter2() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return testParameter2.consume();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public Optional\u003cString\u003e getOptionalParameter() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return testOptionalParameter.getValue();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 12,
      "jh123x": 3,
      "joeychensmart": 109
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/parser/parameter/OptionalParameterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser.parameter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class OptionalParameterTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final OptionalParameter\u003cString\u003e OPTIONAL_PARAMETER \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            CommandParserTestUtil.makeDummyOptionalParameter(\"test\", \"t\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void optionalParameter_storesCorrectValue() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        OptionalParameter\u003cInteger\u003e testParameter \u003d new OptionalParameter\u003c\u003e("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                \"intparam\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                \"i\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                \"test\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                \"test\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                String::length);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        testParameter.setValue(\"abcdef\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(testParameter.getValue().map(i -\u003e i + 1), Optional.of(7));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void optionalParameter_keepsParentRawValue() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        OptionalParameter\u003cString\u003e parameter \u003d CommandParserTestUtil.makeDummyOptionalParameter(\"test\", \"t\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(parameter.getRawValue(), OPTIONAL_PARAMETER.getRawValue());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        parameter.setValue(\"poop\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(parameter.getRawValue(), Optional.of(\"poop\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(parameter.getRawValue(), OPTIONAL_PARAMETER.getRawValue());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void optionalParameter_notRequired() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(OPTIONAL_PARAMETER.isRequired());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "jh123x": 13,
      "joeychensmart": 28
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/parser/parameter/ParameterSetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser.parameter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.DefaultParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParameterConflictException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class ParameterSetTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final DefaultParser parser \u003d new DefaultParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Parameter\u003cString\u003e dummyParameter1 \u003d CommandParserTestUtil.makeDummyParameter(\"test\", \"t\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Parameter\u003cString\u003e dummyParameter2 \u003d CommandParserTestUtil.makeDummyParameter(\"test2\", \"t2\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void add_newParameter_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ParameterSet parameterSet \u003d new ParameterSet();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertDoesNotThrow(() -\u003e parameterSet.addParameter(dummyParameter1));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void add_multipleNewParameters_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ParameterSet parameterSet \u003d new ParameterSet();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertDoesNotThrow(() -\u003e parameterSet.addParameter(dummyParameter1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertDoesNotThrow(() -\u003e parameterSet.addParameter(dummyParameter2));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void add_duplicateParameters_fail() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ParameterSet parameterSet \u003d new ParameterSet();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertDoesNotThrow(() -\u003e parameterSet.addParameter(dummyParameter1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(ParameterConflictException.class, () -\u003e parameterSet.addParameter(dummyParameter1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "jh123x": 3,
      "joeychensmart": 34
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/parser/parameter/ParameterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser.parameter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class ParameterTest { // TODO: options test, here + optional param"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void parameter_storesCorrectValue() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Test values"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Parameter\u003cInteger\u003e testParameter \u003d new Parameter\u003c\u003e(\"intparam\", \"j\", \"test\", \"test\", String::length);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        testParameter.setValue(\"abcdef\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(testParameter.consume(), 6);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Test another value"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Parameter\u003cInteger\u003e testParameter2 \u003d new Parameter\u003c\u003e(\"intparam2\", \"j\", \"test2\", \"test2\", String::length);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        testParameter2.setValue(\"Hello world   \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(testParameter2.consume(), 14);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void parameter_keepsParentRawValue() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Parameter\u003cString\u003e parameter \u003d CommandParserTestUtil.makeDummyParameter(\"test\", \"t\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        parameter.setValue(\"poop\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(parameter.getRawValue(), Optional.of(\"poop\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "jh123x": 8,
      "joeychensmart": 22
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/predicate/DatePredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "public class DatePredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_DATE_1 \u003d \"24-10-2020\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_DATE_DIFFERENT_YEAR \u003d \"24-10-2019\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_DATE_2 \u003d \"25-10-2020\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String DIFFERENT_FORMAT \u003d \"2020-10-24\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String FOOD_NAME \u003d \"Apple\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void equals() throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        DatePredicate firstPredicate \u003d new DatePredicate(VALID_DATE_1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        DatePredicate secondPredicate \u003d new DatePredicate(VALID_DATE_2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(firstPredicate, firstPredicate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        DatePredicate firstPredicateCopy \u003d new DatePredicate(VALID_DATE_1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(firstPredicateCopy, firstPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(firstPredicate, 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(firstPredicate, null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(secondPredicate, firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void test_datesEqualMultipleFormats_returnsTrue() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        // Same format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        DatePredicate predicate \u003d new DatePredicate(VALID_DATE_1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(new Name(FOOD_NAME)).withDate(VALID_DATE_1).build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        // Different format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        predicate \u003d new DatePredicate(DIFFERENT_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(new Name(FOOD_NAME)).withDate(VALID_DATE_1).build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void test_datesNotEqual_returnsFalse() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        DatePredicate predicate \u003d new DatePredicate(VALID_DATE_1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(predicate.test(new FoodBuilder()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .withName(new Name(FOOD_NAME))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .withDate(VALID_DATE_DIFFERENT_YEAR)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 39,
      "jh123x": 28
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/predicate/FoodContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "package jimmy.mcgymmy.logic.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "class FoodContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final List\u003cString\u003e CHICKEN_LUNCH_LIST \u003d Arrays.asList(\"Chicken\", \"Lunch\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final List\u003cString\u003e CHICKEN_DINNER_LIST \u003d Arrays.asList(\"Chicken\", \"Dinner\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final List\u003cString\u003e SECOND_PREDICATE_KEYWORD_LIST \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final List\u003cString\u003e FIRST_PREDICATE_KEYWORD_LIST \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final FoodContainsKeywordsPredicate CHICKEN_DINNER_PREDICATE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            new FoodContainsKeywordsPredicate(CHICKEN_DINNER_LIST);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        FoodContainsKeywordsPredicate firstPredicate \u003d new FoodContainsKeywordsPredicate(FIRST_PREDICATE_KEYWORD_LIST);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        FoodContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new FoodContainsKeywordsPredicate(SECOND_PREDICATE_KEYWORD_LIST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(firstPredicate, firstPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        FoodContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new FoodContainsKeywordsPredicate(FIRST_PREDICATE_KEYWORD_LIST);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(firstPredicateCopy, firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(firstPredicate, 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(firstPredicate, null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(secondPredicate, firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void test_nameFoundTagNotFound_returnsTrue() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(CHICKEN_DINNER_PREDICATE"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .test(new FoodBuilder()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                        .withName(new Name(\"Chicken McWing\"))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                        .withTags(\"Lunch\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                        .build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void test_nameFoundTagFound_returnsTrue() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(CHICKEN_DINNER_PREDICATE"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .test(new FoodBuilder()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                        .withName(new Name(\"Chicken McWing\"))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                        .withTags(\"Dinner\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                        .build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void test_nameNotFoundTagFound_returnsTrue() throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(CHICKEN_DINNER_PREDICATE"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .test(new FoodBuilder()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                        .withName(new Name(\"Big Mac\"))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                        .withTags(\"Dinner\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                        .build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void test_nameNotFoundTagNotFound_returnsFalse() throws IllegalValueException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        FoodContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new FoodContainsKeywordsPredicate(CHICKEN_LUNCH_LIST);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertFalse(predicate.test(new FoodBuilder().withName(new Name(\"Big Mac\")).withTags(\"Dinner\").build()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 43,
      "aidoxe-123": 9,
      "-": 33
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/predicate/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "package jimmy.mcgymmy.logic.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(firstPredicate, firstPredicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(firstPredicateCopy, firstPredicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(firstPredicate, 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(firstPredicate, null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(secondPredicate, firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Apple\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(new Name(\"Apple Banana\")).build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Apple\", \"Banana\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(new Name(\"Apple Banana\")).build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Banana\", \"Carrot\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(new Name(\"Apple Carrot\")).build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aPPle\", \"bAnaNa\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(new Name(\"Apple Banana\")).build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertFalse(predicate.test(new FoodBuilder().withName(new Name(\"Apple\")).build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Carrot\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertFalse(predicate.test(new FoodBuilder().withName(new Name(\"Apple Banana\")).build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        // Keywords match protein, fat and carbs, but does not match name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"123\", \"543\", \"67\", \"8\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(predicate.test(new FoodBuilder().withName(new Name(\"Apple\")).withProtein(\"123\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .withFat(\"543\").withCarb(\"678\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 11,
      "jh123x": 16,
      "aidoxe-123": 2,
      "-": 50
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/predicate/TagContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "package jimmy.mcgymmy.logic.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "class TagContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final List\u003cString\u003e LUNCH_KEYWORD \u003d Collections.singletonList(\"Lunch\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final List\u003cString\u003e EMPTY_KEYWORD \u003d Collections.singletonList(\"\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final List\u003cString\u003e ABC_KEYWORD \u003d Collections.singletonList(\"A b c\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final List\u003cString\u003e FIRST_SECOND_KEYWORD \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final List\u003cString\u003e LUNCH_DINNER_KEYWORD \u003d Arrays.asList(\"Lunch\", \"Dinner\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final List\u003cString\u003e MULTIPLE_KEYWORDS \u003d Arrays.asList(\"AB C\", \"Lunch\", \"\", \"Breakfast\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final TagContainsKeywordsPredicate ABC_PREDICATE \u003d new TagContainsKeywordsPredicate(ABC_KEYWORD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final TagContainsKeywordsPredicate LUNCH_PREDICATE \u003d new TagContainsKeywordsPredicate(LUNCH_KEYWORD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final TagContainsKeywordsPredicate LUNCH_PREDICATE_COPY \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            new TagContainsKeywordsPredicate(LUNCH_KEYWORD);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final TagContainsKeywordsPredicate EMPTY_PREDICATE \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            new TagContainsKeywordsPredicate(EMPTY_KEYWORD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final TagContainsKeywordsPredicate LUNCH_DINNER_PREDICATE \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            new TagContainsKeywordsPredicate(LUNCH_DINNER_KEYWORD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final TagContainsKeywordsPredicate FIRST_SECOND_PREDICATE \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            new TagContainsKeywordsPredicate(FIRST_SECOND_KEYWORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final TagContainsKeywordsPredicate MULTIPLE_KEYWORDS_PREDICATE \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            new TagContainsKeywordsPredicate(MULTIPLE_KEYWORDS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(LUNCH_PREDICATE, LUNCH_PREDICATE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(LUNCH_PREDICATE_COPY, LUNCH_PREDICATE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(LUNCH_PREDICATE, 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(LUNCH_PREDICATE, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(FIRST_SECOND_PREDICATE, LUNCH_PREDICATE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void test_foodContainsTagSameAsKeywords_returnsTrue() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(LUNCH_PREDICATE.test(new FoodBuilder().withTags(\"Lunch\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(LUNCH_PREDICATE.test(new FoodBuilder().withTags(\"Dinner\", \"Lunch\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(LUNCH_DINNER_PREDICATE.test(new FoodBuilder().withTags(\"Lunch\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(LUNCH_DINNER_PREDICATE.test(new FoodBuilder().withTags(\"Dinner\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(LUNCH_DINNER_PREDICATE.test(new FoodBuilder().withTags(\"Dinner\", \"Lunch\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(LUNCH_DINNER_PREDICATE.test(new FoodBuilder().withTags(\"Dinner\", \"Breakfast\", \"Lunch\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void test_foodDoesNotContainsTagSameAsKeywords_returnsFalse() throws IllegalValueException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // food contains one tag"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(LUNCH_PREDICATE.test(new FoodBuilder().withTags(\"Dinner\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // food contains multiple tags"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(LUNCH_PREDICATE.test(new FoodBuilder().withTags(\"Breakfast\", \"Dinner\").build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void test_cannotCreateTagWithKeyword_returnFalse() throws IllegalValueException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(EMPTY_PREDICATE.test(new FoodBuilder().withTags(\"Dinner\").build()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(ABC_PREDICATE.test(new FoodBuilder().withTags(\"Dinner\").build()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void test_cannotCreateTagWithSomeKeywords() throws IllegalValueException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // food contains some of the valid tag -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(MULTIPLE_KEYWORDS_PREDICATE.test(new FoodBuilder().withTags(\"Dinner\", \"Lunch\").build()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // food contains none of the valid tag -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(MULTIPLE_KEYWORDS_PREDICATE.test(new FoodBuilder().withTags(\"Dinner\").build()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 48,
      "aidoxe-123": 49
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/HistoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "package jimmy.mcgymmy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.macro.MacroList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.testutil.McGymmyBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "class HistoryTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private static class ModelManagerStub extends ModelManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        ModelManagerStub(McGymmy mcGymmy, MacroList macroList, Predicate\u003cFood\u003e filterPredicate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            super(mcGymmy, new UserPrefs(), macroList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            this.updateFilteredFoodList(filterPredicate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private class HistoryStub extends History {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        HistoryStub() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Stack\u003cPair\u003cMcGymmy, Pair\u003cPredicate\u003cFood\u003e, MacroList\u003e\u003e\u003e getStack() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            return super.stack;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private static final McGymmy MC_GYMMY \u003d new McGymmyBuilder().withFood(TypicalFoods.getChickenRice()).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private static final Predicate\u003cFood\u003e FOOD_PREDICATE \u003d food -\u003e false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private static final MacroList MACRO_LIST \u003d new MacroList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private static final ModelManager MODEL_MANAGER \u003d new ModelManagerStub(MC_GYMMY, MACRO_LIST, FOOD_PREDICATE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void save_successfullySaveData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        HistoryStub historyStub \u003d new HistoryStub();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        historyStub.save(MODEL_MANAGER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Stack\u003cPair\u003cMcGymmy, Pair\u003cPredicate\u003cFood\u003e, MacroList\u003e\u003e\u003e stack \u003d historyStub.getStack();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(MC_GYMMY, stack.peek().getKey());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(MACRO_LIST, stack.peek().getValue().getValue());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(FOOD_PREDICATE, stack.peek().getValue().getKey());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void empty_emptyHistory_returnsTrue() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertTrue(new HistoryStub().empty());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void empty_notEmptyHistory_returnsFalse() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        HistoryStub historyStub \u003d new HistoryStub();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        historyStub.save(MODEL_MANAGER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertFalse(historyStub.empty());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void pop_nonEmptyHistory_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        HistoryStub historyStub \u003d new HistoryStub();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        historyStub.save(MODEL_MANAGER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        historyStub.pop();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertTrue(historyStub.empty());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void pop_emptyHistory_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new HistoryStub().pop());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void peekMcGymmy_returnsCorrectMcGymmy_doesNotPop() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        HistoryStub historyStub \u003d new HistoryStub();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        historyStub.save(MODEL_MANAGER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(MC_GYMMY, historyStub.peekMcGymmy());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertFalse(historyStub.empty());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void peekMacroList_returnsCorrectMacroList_doesNotPop() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        HistoryStub historyStub \u003d new HistoryStub();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        historyStub.save(MODEL_MANAGER);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(MACRO_LIST, historyStub.peekMacroList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertFalse(historyStub.empty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void peekPredicate_returnsCorrectPredicate_doesNotPop() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        HistoryStub historyStub \u003d new HistoryStub();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        historyStub.save(MODEL_MANAGER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(FOOD_PREDICATE, historyStub.peekPredicate());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertFalse(historyStub.empty());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidoxe-123": 100
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/McGymmyTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.food.Fridge;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.testutil.McGymmyBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class McGymmyTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final McGymmy mcGymmy \u003d new McGymmy();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(Collections.emptyList(), mcGymmy.getFoodList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e mcGymmy.resetData(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void resetData_withValidReadOnlyMcGymmy_replacesData() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy newData \u003d TypicalFoods.getTypicalMcGymmy();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        mcGymmy.resetData(newData);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(newData, mcGymmy);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void resetData_withDuplicateFoods_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        // Two foods with the same identity fields"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        McGymmy newData \u003d TypicalFoods.getTypicalDuplicateMcGymmy();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        mcGymmy.resetData(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(mcGymmy, newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void hasFood_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e mcGymmy.hasFood(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void hasFood_foodNotInMcGymmy_returnsFalse() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(mcGymmy.hasFood(TypicalFoods.getChickenRice()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void hasFood_foodInMcGymmy_returnsTrue() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        mcGymmy.addFood(TypicalFoods.getChickenRice());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(mcGymmy.hasFood(TypicalFoods.getChickenRice()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void hasFood_foodWithSameIdentityFieldsInMcGymmy_returnsTrue() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        mcGymmy.addFood(TypicalFoods.getChickenRice());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food editedAlice \u003d new FoodBuilder(TypicalFoods.getChickenRice()).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(mcGymmy.hasFood(editedAlice));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void getFoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e mcGymmy.getFoodList().remove(0));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void hashCode_returnsCorrectHashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food chickenRice \u003d TypicalFoods.getChickenRice();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food apple \u003d TypicalFoods.getApple();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Fridge fridge \u003d new Fridge();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        fridge.add(chickenRice);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        fridge.add(apple);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy mcGymmy \u003d new McGymmyBuilder().withFood(chickenRice).withFood(apple).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(fridge.hashCode(), mcGymmy.hashCode());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 4,
      "jh123x": 71,
      "aidoxe-123": 12
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalFoods.getChickenRice;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalFoods.getDanishCookies;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalFoods.getNasiLemak;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalMacros.TEST_MACRO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.logic.predicate.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.MacroList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.McGymmyBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(new McGymmy(), new McGymmy(modelManager.getMcGymmy()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        userPrefs.setMcGymmyFilePath(Paths.get(\"jimmy\", \"mcgymmy\", \"file\", \"path\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        userPrefs.setMcGymmyFilePath(Paths.get(\"new\" , \"jimmy\", \"mcgymmy\", \"file\", \"path\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void setMcGymmyFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setMcGymmyFilePath(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void setMcGymmyFilePath_validPath_setsMcGymmyFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Path path \u003d Paths.get(\"jimmy\", \"mcgymmy\", \"file\", \"path\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        modelManager.setMcGymmyFilePath(path);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(path, modelManager.getMcGymmyFilePath());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void hasFood_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasFood(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void hasFood_personNotInMcGymmy_returnsFalse() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(modelManager.hasFood(getChickenRice()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void hasFood_foodInMcGymmy_returnsTrue() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        modelManager.addFood(getChickenRice());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(modelManager.hasFood(getChickenRice()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void getFilteredFoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredFoodList().remove(0));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void canUndo_newModelManager_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertFalse(modelManager.canUndo());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void canUndo_modelGotChangedPreviously_returnsTrue() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        modelManager.addFood(getChickenRice());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertTrue(modelManager.canUndo());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void canUndo_modelGotChangedButUndoAlready_returnsFalse() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        modelManager.addFood(getChickenRice());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertFalse(modelManager.canUndo());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    public void clear_empty_mcGymmyHasCorrectContent() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        McGymmy expected \u003d new McGymmyBuilder().build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        modelManager.clearFilteredFood();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        assertEquals(expected, modelManager.getMcGymmy());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    public void clear_nonEmpty_mcGymmyHasCorrectContent() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        McGymmy expected \u003d new McGymmyBuilder().build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        modelManager.addFood(getChickenRice());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        modelManager.addFood(getNasiLemak());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        modelManager.clearFilteredFood();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        assertEquals(expected, modelManager.getMcGymmy());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    public void find_empty_mcGymmyHasCorrectContent() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        modelManager.updateFilteredFoodList((food) -\u003e food.getName()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "                .fullName.contains(getChickenRice().getName().fullName));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        assertEquals(expectedModel.getFilteredFoodList(), modelManager.getFilteredFoodList());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    public void find_nonEmpty_mcGymmyHasCorrectContent() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        expectedModel.addFood(getChickenRice());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        modelManager.addFood(getChickenRice());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        modelManager.addFood(getNasiLemak());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        modelManager.updateFilteredFoodList((food) -\u003e food.getName()"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "                        .fullName.contains(getChickenRice().getName().fullName));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        assertEquals(expectedModel.getFilteredFoodList(), modelManager.getFilteredFoodList());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    public void findThenClear_nonEmpty_mcGymmyHasCorrectContent() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        expectedModel.addFood(getChickenRice());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        modelManager.addFood(getChickenRice());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        modelManager.addFood(getNasiLemak());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        modelManager.updateFilteredFoodList((food) -\u003e food.getName()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "                .fullName.contains(getNasiLemak().getName().fullName));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        modelManager.clearFilteredFood();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        modelManager.updateFilteredFoodList((food) -\u003e true);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        assertEquals(expectedModel.getFilteredFoodList(), modelManager.getFilteredFoodList());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void undo_undoAfterAddFood_mcGymmyHasCorrectContent() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        modelManager.addFood(getChickenRice());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy expected \u003d new McGymmyBuilder().withFood(TypicalFoods.getChickenRice()).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        modelManager.addFood(getNasiLemak());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(expected, modelManager.getMcGymmy());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void undo_undoAfterDeleteFood_mcGymmyHasCorrectContent() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        modelManager.addFood(getChickenRice());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy expected \u003d new McGymmyBuilder().withFood(TypicalFoods.getChickenRice()).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        modelManager.deleteFood(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(expected, modelManager.getMcGymmy());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void undo_undoAfterSetMcGymmy_mcGymmyHasCorrectContent() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        modelManager.addFood(getChickenRice());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy expected \u003d new McGymmyBuilder().withFood(TypicalFoods.getChickenRice()).build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy mcGymmy \u003d new McGymmyBuilder().withFood(TypicalFoods.getChickenRice()).withFood("
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                TypicalFoods.getNasiLemak()).build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        modelManager.setMcGymmy(mcGymmy);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(expected, modelManager.getMcGymmy());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void undo_undoAfterSetFood_mcGymmyHasCorrectContent() throws IllegalValueException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy expected \u003d new McGymmyBuilder().withFood(getChickenRice()).build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        modelManager.addFood(getChickenRice());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food editedFood \u003d new FoodBuilder(getChickenRice()).withCarb(\"50\").build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        modelManager.setFood(Index.fromOneBased(1), editedFood);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(expected, modelManager.getMcGymmy());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void undo_undoAfterUpdateFilteredFoodList_modelManagerHasCorrectContent() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy expectedMcGymmy \u003d new McGymmyBuilder().withFood(getChickenRice()).withFood(getDanishCookies()).build();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        ModelManager expectedModelManager \u003d new ModelManager(expectedMcGymmy, new UserPrefs());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        modelManager.addFood(getChickenRice());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        modelManager.addFood(getDanishCookies());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        CommandTestUtil.showFoodAtIndex(modelManager, Index.fromOneBased(2)); // updateFilterdFoodList"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(modelManager, expectedModelManager);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void undo_undoAfterClearFilteredFood_modelManagerHasCorrectContent() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy expectedMcGymmy \u003d new McGymmyBuilder().withFood(getChickenRice()).withFood(getDanishCookies()).build();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        ModelManager expectedModelManager \u003d new ModelManager(expectedMcGymmy, new UserPrefs());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        modelManager.addFood(getChickenRice());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        modelManager.addFood(getDanishCookies());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredFoodList(food -\u003e food.equals(getChickenRice()));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        modelManager.clearFilteredFood();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(modelManager.getMcGymmy(), expectedMcGymmy);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void undo_undoAfterSetMacroList_modelManagerHasCorrectContent() throws Exception {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ModelManager expectedModelManager \u003d new ModelManager(modelManager.getMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        MacroList newMacroList \u003d modelManager.getMacroList().withNewMacro(TEST_MACRO);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        modelManager.setMacroList(newMacroList);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(modelManager, expectedModelManager);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void undo_undoMultipleTimes_mcGymmyHasCorrectContent() throws IllegalValueException {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food newChickenRice \u003d new FoodBuilder(getChickenRice()).withDate(\"2020-04-12\").build();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food newNasiLemak \u003d new FoodBuilder().withTags(\"Lunch\").build();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        McGymmy expected1 \u003d new McGymmyBuilder().build();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy expected2 \u003d new McGymmyBuilder().withFood(getChickenRice()).build();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy expected3 \u003d new McGymmyBuilder().withFood(getChickenRice()).withFood(getNasiLemak()).build();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy expected4 \u003d new McGymmyBuilder().withFood(newChickenRice).withFood(getNasiLemak()).build();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        McGymmy expected5 \u003d new McGymmyBuilder().withFood(newChickenRice).withFood(newNasiLemak).build();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        modelManager.addFood(getChickenRice());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        modelManager.addFood(getNasiLemak());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        modelManager.setFood(Index.fromOneBased(1), newChickenRice);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        modelManager.setFood(Index.fromOneBased(2), newNasiLemak);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        modelManager.deleteFood(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(expected5, modelManager.getMcGymmy());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(expected4, modelManager.getMcGymmy());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(expected3, modelManager.getMcGymmy());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(expected2, modelManager.getMcGymmy());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(expected1, modelManager.getMcGymmy());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void undo_undoMultipleTimes_modelHasCorrectContent() throws Exception {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food newChickenRice \u003d new FoodBuilder(getChickenRice()).withDate(\"2020-04-12\").build();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Food newNasiLemak \u003d new FoodBuilder().withTags(\"Lunch\").build();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        McGymmy expectedMcGymmy1 \u003d new McGymmyBuilder().build();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy expectedMcGymmy2 \u003d new McGymmyBuilder().withFood(getChickenRice()).build();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy expectedMcGymmy3 \u003d new McGymmyBuilder().withFood(getChickenRice()).withFood(getNasiLemak()).build();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        MacroList macroList1 \u003d modelManager.getMacroList();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        MacroList macroList2 \u003d modelManager.getMacroList().withNewMacro(TEST_MACRO);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        MacroList macroList3 \u003d modelManager.getMacroList().withoutMacro(\"test\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        modelManager.addFood(getChickenRice());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        modelManager.setMacroList(macroList2);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        modelManager.addFood(getNasiLemak());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        modelManager.setMacroList(macroList3);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        modelManager.setFood(Index.fromOneBased(1), newChickenRice);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(expectedMcGymmy3, modelManager.getMcGymmy());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(modelManager.getMacroList(), macroList3);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(expectedMcGymmy3, modelManager.getMcGymmy());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(modelManager.getMacroList(), macroList2);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(expectedMcGymmy2, modelManager.getMcGymmy());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(modelManager.getMacroList(), macroList2);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(expectedMcGymmy2, modelManager.getMcGymmy());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(modelManager.getMacroList(), macroList1);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(expectedMcGymmy1, modelManager.getMcGymmy());"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(modelManager.getMacroList(), macroList1);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void undo_updateFilteredFoodListWithSamePredicateMultipleTime_undoMultipleTimes() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy expectedMcGymmy \u003d new McGymmyBuilder().withFood(getChickenRice()).withFood(getDanishCookies()).build();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        ModelManager expectedModelManager \u003d new ModelManager(expectedMcGymmy, new UserPrefs());"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        modelManager \u003d new ModelManager(expectedMcGymmy, new UserPrefs());"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Predicate\u003cFood\u003e predicate \u003d food -\u003e false;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        modelManager.updateFilteredFoodList(predicate);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        modelManager.updateFilteredFoodList(predicate);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertTrue(modelManager.canUndo());"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(modelManager, expectedModelManager);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy mcGymmy \u003d new McGymmyBuilder().withFood(TypicalFoods.getChickenRice()).withFood("
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                TypicalFoods.getNasiLemak()).build();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy differentMcGymmy \u003d new McGymmy();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        modelManager \u003d new ModelManager(mcGymmy, userPrefs);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(mcGymmy, userPrefs);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // different mcGymmy -\u003e returns false"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentMcGymmy, userPrefs)));"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String[] keywords \u003d getChickenRice().getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        modelManager.updateFilteredFoodList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(mcGymmy, userPrefs)));"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        modelManager.updateFilteredFoodList(Model.PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        differentUserPrefs.setMcGymmyFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(mcGymmy, differentUserPrefs)));"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcchan98": 50,
      "jh123x": 80,
      "joeychensmart": 46,
      "-": 88,
      "aidoxe-123": 111
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void setMcGymmyFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setMcGymmyFilePath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setMcGymmyFilePath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void equals_returnsCorrectResult() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // identical -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(userPref, userPref);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // not same type -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertFalse(userPref.equals(\"123\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // same value -\u003e return true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(new UserPrefs(userPref), new UserPrefs(userPref));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "jh123x": 6,
      "-": 14,
      "aidoxe-123": 13
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/date/DateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "package jimmy.mcgymmy.model.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": " *  \"dd-M-yyyy\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": " *  \"yyyy/MM/dd\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": " *  \"dd/MM/yyyy\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": " *  \"dd/M/yyyy\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": " *  \"d/M/yyyy\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "class DateTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String INVALID_DAY_STRING \u003d \"2019-04-31\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String INVALID_YEAR_STRING \u003d \"-100-12-28\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String INVALID_MONTH_STRING \u003d \"2019-13-28\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String INVALID_DATE_STRING_1 \u003d \"31/13/2020\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String INVALID_FORMAT_STRING_2 \u003d \"20/04/20\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String INVALID_FORMAT_STRING_1 \u003d \"20//04/2020\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_DATE_STRING_2_D_MMM_YYYY \u003d \"2 Sep 2020\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_DATE_STRING_1_YYYY_MM_DD \u003d \"2020-04-20\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_DATE_STRING_1_DD_MMM_YYYY \u003d \"20 Apr 2020\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_DATE_STRING_1_SLASH_D_M_YYYY \u003d \"2/9/2020\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private static final String VALID_DATE_STRING_1_SLASH_DD_M_YYYY \u003d \"20/4/2020\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_DATE_STRING_1_SLASH_YYYY_MM_DD \u003d \"2020/04/20\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_DATE_STRING_1_SLASH_DD_MM_YYYY \u003d \"20/04/2020\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_DATE_STRING_1_DASH_D_M_YYYY \u003d \"2-9-2020\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_DATE_STRING_1_DASH_YYYY_M_D \u003d \"2020-9-2\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_DATE_STRING_1_DASH_DD_MM_YYYY \u003d \"20-04-2020\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private static final String VALID_DATE_STRING_1_DASH_YYYY_M_DD \u003d \"2020-4-20\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_DATE_STRING_1_DASH_DD_M_YYYY \u003d \"20-4-2020\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_DATE_STRING_LEAP_YEAR_FEB \u003d \"29 Feb 2020\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String INVALID_DATE_STRING_NON_LEAP_YEAR_FEB \u003d \"29 Feb 2019\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void currentDate_returnsCorrectCurrentDate() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(Date.currentDate(), new Date(LocalDate.now().toString()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void leapYearValidTest() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Valid leap year Date"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(new Date(VALID_DATE_STRING_LEAP_YEAR_FEB).toString(), VALID_DATE_STRING_LEAP_YEAR_FEB);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Invalid leap year date"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new Date(INVALID_DATE_STRING_NON_LEAP_YEAR_FEB));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void constructorAndToString_supportedFormat_createsDateObject() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // format: \"d/M/yyyy\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(new Date(VALID_DATE_STRING_1_SLASH_D_M_YYYY).toString(), VALID_DATE_STRING_2_D_MMM_YYYY);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // format: \"d-M-yyyy\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(new Date(VALID_DATE_STRING_1_DASH_D_M_YYYY).toString(), VALID_DATE_STRING_2_D_MMM_YYYY);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // format: \"yyyy-M-d\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(new Date(VALID_DATE_STRING_1_DASH_YYYY_M_D).toString(), VALID_DATE_STRING_2_D_MMM_YYYY);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // format: \"yyyy-M-dd\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertEquals(new Date(VALID_DATE_STRING_1_DASH_YYYY_M_DD).toString(), VALID_DATE_STRING_1_DD_MMM_YYYY);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // format: \"dd-M-yyyy\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(new Date(VALID_DATE_STRING_1_DASH_DD_M_YYYY).toString(), VALID_DATE_STRING_1_DD_MMM_YYYY);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // format: \"dd/M/yyyy\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertEquals(new Date(VALID_DATE_STRING_1_SLASH_DD_M_YYYY).toString(), VALID_DATE_STRING_1_DD_MMM_YYYY);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // format: \"dd-MM-yyyy\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(new Date(VALID_DATE_STRING_1_DASH_DD_MM_YYYY).toString(), VALID_DATE_STRING_1_DD_MMM_YYYY);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // format: \"yyyy/MM/dd\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(new Date(VALID_DATE_STRING_1_SLASH_YYYY_MM_DD).toString(), VALID_DATE_STRING_1_DD_MMM_YYYY);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // format: \"dd/MM/yyyy\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(new Date(VALID_DATE_STRING_1_SLASH_DD_MM_YYYY).toString(), VALID_DATE_STRING_1_DD_MMM_YYYY);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        // format: \"dd MMM yyyy\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(new Date(VALID_DATE_STRING_1_DD_MMM_YYYY).toString(), VALID_DATE_STRING_1_DD_MMM_YYYY);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // format: \"yyyy-MM-dd\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(new Date(VALID_DATE_STRING_1_YYYY_MM_DD).toString(), VALID_DATE_STRING_1_DD_MMM_YYYY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void constructor_unsupportedFormat_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new Date(INVALID_DAY_STRING));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new Date(INVALID_YEAR_STRING));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new Date(INVALID_DATE_STRING_1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new Date(INVALID_FORMAT_STRING_2));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new Date(INVALID_FORMAT_STRING_1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new Date(INVALID_MONTH_STRING));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void equals_returnsCorrectComparison() throws IllegalValueException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Date testDate1 \u003d new Date(VALID_DATE_STRING_2_D_MMM_YYYY);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Date testDate2 \u003d new Date(VALID_DATE_STRING_1_DD_MMM_YYYY);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // identical -\u003e returns true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(testDate2, testDate2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // same date -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(new Date(VALID_DATE_STRING_1_YYYY_MM_DD), testDate2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(testDate1, testDate2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // not instance of Date -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotEquals(VALID_DATE_STRING_1_DD_MMM_YYYY, testDate2);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    void hasCode_returnsCorrectHashCode() throws IllegalValueException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Date actual \u003d new Date(VALID_DATE_STRING_1_YYYY_MM_DD);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        LocalDate expected \u003d LocalDate.parse(VALID_DATE_STRING_1_YYYY_MM_DD);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(actual.hashCode(), expected.hashCode());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 5,
      "jh123x": 83,
      "aidoxe-123": 37
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/food/CarbohydrateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class CarbohydrateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void newDefault_works() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // If it doesnt, the thrown runtime exception will break this test."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Carbohydrate.newDefault();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void carbohydrate_isValid_correct() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // null carbohydrate"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Carbohydrate.isValid(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // invalid carbohydrates"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(Carbohydrate.isValid(\"\")); // empty string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(Carbohydrate.isValid(\" \")); // spaces only"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(Carbohydrate.isValid(\"132454897\")); // Out of range"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(Carbohydrate.isValid(\"1000\")); // Out of range"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // valid carbohydrates"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(Carbohydrate.isValid(\"123\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(Carbohydrate.isValid(\"12\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(Carbohydrate.isValid(\"1\")); // one character"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 29,
      "joeychensmart": 5
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/food/FatTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class FatTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void newDefault_works() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // If it doesnt, the thrown runtime exception will break this test."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Fat.newDefault();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void fat_isValid_correct() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // null fat"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Fat.isValid(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // blank fat"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertFalse(Fat.isValid(\"\")); // empty string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertFalse(Fat.isValid(\" \")); // spaces only"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertFalse(Fat.isValid(\"12314-\")); // invalid fat name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertFalse(Fat.isValid(\"123_345\")); // underscore in fat name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertFalse(Fat.isValid(\" 1234\")); // leading space"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertFalse(Fat.isValid(\"1234 \")); // trailing space"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Assertions.assertFalse(Fat.isValid(\"-1234\")); // negative value"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertFalse(Fat.isValid(\"1234\")); // Out of range"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // valid fat"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Assertions.assertTrue(Fat.isValid(\"911\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertTrue(Fat.isValid(\"19\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertTrue(Fat.isValid(\"1\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "jh123x": 31,
      "joeychensmart": 6
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/food/FoodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.testutil.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "public class FoodTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public static final String INVALID_FOOD_NAME \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Name validFoodName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Name validFoodName2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Protein protein;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Protein protein1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Carbohydrate carbohydrate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Carbohydrate carbohydrate1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Fat fat;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Fat fat1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Food comparedFood;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Food sameAsComparedFood;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Food foodWDifferentName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Food foodWDifferentProtein;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Food foodWDifferentCarbs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Food foodWDifferentFat;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            initialiseFoods();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            assert false : \"Error in food name\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    static void initialiseFoods() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        validFoodName \u003d new Name(\"test food\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        validFoodName2 \u003d new Name(\"test food 2\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        protein \u003d new Protein(2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        protein1 \u003d new Protein(3);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        carbohydrate \u003d new Carbohydrate(3);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        carbohydrate1 \u003d new Carbohydrate(4);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        fat \u003d new Fat(4);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        fat1 \u003d new Fat(5);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        comparedFood \u003d new Food(validFoodName, protein, fat, carbohydrate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        sameAsComparedFood \u003d new Food(validFoodName, protein, fat, carbohydrate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        foodWDifferentName \u003d new Food(validFoodName2, protein, fat, carbohydrate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        foodWDifferentProtein \u003d new Food(validFoodName, protein1, fat, carbohydrate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        foodWDifferentFat \u003d new Food(validFoodName, protein, fat1, carbohydrate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        foodWDifferentCarbs \u003d new Food(validFoodName, protein, fat, carbohydrate1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void constructor_nullProtein_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new Food(validFoodName, null, fat, carbohydrate));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void constructor_nullCarbohydrate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new Food(validFoodName, protein, fat, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void constructor_nullFat_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new Food(validFoodName, protein, null, carbohydrate));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void constructor_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new Food(new Name(INVALID_FOOD_NAME), protein, fat, carbohydrate));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void toStringTest() throws IllegalValueException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        String expected1 \u003d \"Food: test food\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                + \"Protein: 2\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                + \"Carbs: 3\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                + \"Fat: 4\\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(comparedFood.toString(), expected1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        String expected2 \u003d \"Food: test food2\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                + \"Protein: 100\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                + \"Carbs: 20\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                + \"Fat: 10\\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        assertEquals(new Food(\"test food2\", 100, 10, 20).toString(), expected2);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void getCaloriesTest() throws IllegalValueException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        assertEquals(new Food(\"water\", 0, 0, 0).getCalories(), 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        assertEquals(new Food(\"chimkenbreast\", 30, 0, 0).getCalories(), 120);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        assertEquals(new Food(\"chimkenRice\", 0, 0, 30).getCalories(), 120);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        assertEquals(new Food(\"sesameOil\", 0, 10, 0).getCalories(), 90);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        assertEquals(new Food(\"chimkenRiceSet\", 30, 10, 30).getCalories(), 330);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // identical -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(comparedFood, comparedFood);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // different object all field are the same -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(comparedFood, sameAsComparedFood);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(comparedFood.equals(foodWDifferentName));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // different protein -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(comparedFood.equals(foodWDifferentProtein));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // different carbohydrate -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(comparedFood.equals(foodWDifferentCarbs));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // different fat -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(comparedFood.equals(foodWDifferentFat));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(comparedFood.equals(protein));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void hasTag_tagInFood_returnsTrue() throws IllegalValueException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food testFood \u003d new FoodBuilder(TypicalFoods.getChickenRice()).withTags(\"Lunch\").build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertTrue(testFood.hasTag(new Tag(\"Lunch\")));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void hasTag_tagNotInFood_returnsFalse() throws IllegalValueException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food testFood \u003d new FoodBuilder(TypicalFoods.getChickenRice()).withTags(\"Lunch\").build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertFalse(testFood.hasTag(new Tag(\"Dinner\")));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void addTag_returnsNewFoodWithTag_oldFoodUnChanged() throws IllegalValueException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Tag initialTag \u003d new Tag(\"Lunch\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Tag toBeAdded \u003d new Tag(\"Dinner\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food testFood \u003d new FoodBuilder(TypicalFoods.getChickenRice()).withTags(\"Lunch\").build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food newFood \u003d testFood.addTag(toBeAdded);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertTrue(newFood.hasTag(toBeAdded));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertTrue(newFood.hasTag(initialTag));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertTrue(testFood.hasTag(initialTag));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertFalse(testFood.hasTag(toBeAdded));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void removeTag_returnsNewFoodWithoutTag_oldFoodUnChanged() throws IllegalValueException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Tag initialTag \u003d new Tag(\"Lunch\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food testFood \u003d new FoodBuilder(TypicalFoods.getChickenRice()).withTags(\"Lunch\").build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food newFood \u003d testFood.removeTag(initialTag);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertFalse(newFood.hasTag(initialTag));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertTrue(testFood.hasTag(initialTag));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() throws IllegalValueException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food food \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e food.getTags().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 7,
      "dcchan98": 18,
      "jh123x": 70,
      "joeychensmart": 2,
      "aidoxe-123": 75
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/food/FridgeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "class FridgeTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Food chimken;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Food ramen;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Fridge fridge;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            chimken \u003d new Food(\"Chimken\", 1, 2, 3);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ramen \u003d new Food(\"Ramen\", 2, 3, 4);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            assert false : \"Error in food\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void beforeEachTestMethod() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        fridge \u003d new Fridge();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void contains_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e fridge.contains(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void contains_foodNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(fridge.contains(chimken));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void contains_foodInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        fridge.add(chimken);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(fridge.contains(chimken));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void add_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e fridge.add(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void setFood_indexLessThanZero_throwsIndexOutOfBoundException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e fridge.setFood(Index.fromZeroBased(-1), chimken));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void setFood_indexLargerThanOrEqualToSize_throwsIndexOutOfBoundException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e fridge.setFood(Index.fromZeroBased(1), chimken));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void setFood_nullEditedFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e fridge.setFood(Index.fromZeroBased(1), null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void setFood_validFood_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        fridge.add(chimken);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        fridge.setFood(Index.fromZeroBased(0), ramen);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Fridge expectedFridge \u003d new Fridge();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        expectedFridge.add(ramen);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(expectedFridge, this.fridge);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void remove_removeIndexLesserThanZero_throwsIndexOutOfBoundException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e fridge.remove(Index.fromZeroBased(-1)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void remove_removeIndexLargerThanOrEqualToSize_throwsIndexOutOfBoundException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e fridge.remove(Index.fromZeroBased(-1)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void remove_validIndex_removesFood() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        fridge.add(chimken);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        fridge.remove(Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Fridge expectedFridge \u003d new Fridge();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(expectedFridge, fridge);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void setFoods_nullFridge_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e fridge.setFoods((Fridge) null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void setFoods_fridge_replacesOwnListWithProvidedFridge() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        fridge.add(chimken);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Fridge expectedFridge \u003d new Fridge();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        expectedFridge.add(ramen);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        fridge.setFoods(expectedFridge);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(expectedFridge, fridge);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void setFoods_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e fridge.setFoods((List\u003cFood\u003e) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void setFoods_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        fridge.add(chimken);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        List\u003cFood\u003e foodList \u003d Collections.singletonList(ramen);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        fridge.setFoods(foodList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Fridge expectedFridge \u003d new Fridge();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        expectedFridge.add(ramen);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(expectedFridge, fridge);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                UnsupportedOperationException.class, () -\u003e fridge.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 12,
      "jh123x": 27,
      "aidoxe-123": 94
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/food/MacronutrientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "class MacronutrientTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Fat defaultFat1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Fat defaultFat2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Fat defaultFat3;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Protein defaultProtein1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Carbohydrate defaultCarbohydrate1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Macronutrient macronutrient1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Macronutrient macronutrient2;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            initialiseVariables();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            assert false : \"Error in food\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    private static final int CORRECT_CARBOHYDRATE_MULTIPLIER \u003d 4;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    private static final int CORRECT_PROTEIN_MULTIPLIER \u003d 4;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    private static final int CORRECT_FATS_MULTIPLIER \u003d 9;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final int INVALID_MULTIPLIER \u003d 5;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final int DEFAULT_AMOUNT \u003d 10;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static void initialiseVariables() throws IllegalValueException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        defaultFat1 \u003d new Fat(1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        defaultFat2 \u003d new Fat(1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        defaultFat3 \u003d new Fat(2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        defaultProtein1 \u003d new Protein(1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        defaultCarbohydrate1 \u003d new Carbohydrate(1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        macronutrient1 \u003d new MacronutrientStub(4, 9);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        macronutrient2 \u003d new MacronutrientStub(9, 4);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void amount_lesserThanZero_throwIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new MacronutrientStub(-1, 4));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // identical -\u003e return true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(defaultFat1.equals(defaultFat1)); // identical"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // same type same amount -\u003e return true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(defaultFat1.equals(defaultFat2)); // same type same amount"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // same type different amount -\u003e return false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(defaultFat1.equals(defaultFat3));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // different type -\u003e return false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(defaultFat1.equals(defaultProtein1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // not instanceof Macronutrient -\u003e return false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(defaultFat1.equals(\"dummy string object\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // same type, same totalCalories, different amount -\u003e return false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(macronutrient1.equals(macronutrient2));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void getTotalCalories() throws IllegalValueException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        assertEquals(new MacronutrientStub(DEFAULT_AMOUNT, CORRECT_CARBOHYDRATE_MULTIPLIER).getTotalCalories(), 40);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void getCaloricMultiplierReturnsCorrectMultiplier() throws IllegalValueException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        assertEquals(new MacronutrientStub(DEFAULT_AMOUNT, CORRECT_PROTEIN_MULTIPLIER).getCaloricMultiplier(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "                CORRECT_PROTEIN_MULTIPLIER);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(defaultFat1.getCaloricMultiplier(), CORRECT_FATS_MULTIPLIER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(defaultCarbohydrate1.getCaloricMultiplier(), CORRECT_CARBOHYDRATE_MULTIPLIER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(defaultProtein1.getCaloricMultiplier(), CORRECT_PROTEIN_MULTIPLIER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private static class MacronutrientStub extends Macronutrient {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        MacronutrientStub(int amount, int caloricMultiplier) throws IllegalValueException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            super(amount, caloricMultiplier);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String getMessageConstraint() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    private static class InvalidMacronutrientStub extends Macronutrient {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        InvalidMacronutrientStub() throws IllegalValueException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            super(1, INVALID_MULTIPLIER);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String getMessageConstraint() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 6,
      "dcchan98": 14,
      "jh123x": 57,
      "aidoxe-123": 32
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/food/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void constructor_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void hashCode_returnsCorrectHashCode() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        String nameStr \u003d \"peter\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Name name \u003d new Name(nameStr);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(name.hashCode(), nameStr.hashCode());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "jh123x": 5,
      "-": 36,
      "aidoxe-123": 8
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/food/ProteinTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class ProteinTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void newDefault_works() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // If it doesnt, the thrown runtime exception will break this test."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Protein.newDefault();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void protein_isValid_correct() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        // null protein number"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Protein.isValid(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        // invalid protein numbers"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertFalse(Protein.isValid(\"\")); // empty string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertFalse(Protein.isValid(\" \")); // spaces only"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Assertions.assertFalse(Protein.isValid(\"protein\")); // non-numeric"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertFalse(Protein.isValid(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertFalse(Protein.isValid(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertFalse(Protein.isValid(\"9111\")); // Out of range"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        // valid protein numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertTrue(Protein.isValid(\"911\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertTrue(Protein.isValid(\"93\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertTrue(Protein.isValid(\"1\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 4,
      "jh123x": 24,
      "joeychensmart": 6
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/macro/MacroListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.model.macro;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.exceptions.DuplicateMacroException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class MacroListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void addDuplicate_throwsError() throws Exception {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Macro dummyMacro \u003d new Macro(\"test2\", new String[]{}, new String[]{});"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        MacroList macroList \u003d (new MacroList()).withNewMacro(dummyMacro);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Macro duplicateMacro1 \u003d new Macro(\"help\", new String[]{}, new String[]{});"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Macro duplicateMacro2 \u003d new Macro(\"test2\", new String[]{}, new String[]{});"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(DuplicateMacroException.class, ()-\u003emacroList.withNewMacro(duplicateMacro1));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(DuplicateMacroException.class, ()-\u003emacroList.withNewMacro(duplicateMacro2));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 19
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/macro/MacroTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.model.macro;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalMacros.TEST_MACRO;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class MacroTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testMacro_createdWithCorrectOptions() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(TEST_MACRO.getOptions().hasOption(\"c\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(TEST_MACRO.getOptions().hasOption(\"p\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testMacro_noExtraOptions() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(TEST_MACRO.getOptions().getOptions().size(), 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 21
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Invalid testcases"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null)); // null tag name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(Tag.isValidTagName(\"123456789012345678901\")); // 21 chars"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(Tag"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .isValidTagName(\"123456789012345678901234567890123456789012345678901234567890\")); // 60 chars"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(Tag.isValidTagName(\"asdsafdfs12345$$$@#$!^#$\")); //Alphanumeric with symbol"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(Tag.isValidTagName(\"@#$!^#$\")); //Symbols"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //ValidTagNames"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(Tag.isValidTagName(\"asdsafdfs\")); //Alphabets"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(Tag.isValidTagName(\"asdsafdfs12345\")); //Alphanumeric"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(Tag.isValidTagName(\"12345678901234567890\")); //20 chars"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 5,
      "jh123x": 20,
      "-": 17
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/storage/JsonAdaptedFoodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.date.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Fat;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Protein;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class JsonAdaptedFoodTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@ice\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String INVALID_PROTEIN \u003d \"512%)34\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private static final String INVALID_FAT \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String INVALID_CARBS \u003d \"123.132\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private static final String INVALID_DATE \u003d \"20/04/20\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String INVALID_TAG \u003d \"##lucnsh\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_NAME \u003d TypicalFoods.getNasiLemak().getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_PROTEIN \u003d Integer.toString(TypicalFoods.getNasiLemak().getProtein().getAmount());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_FAT \u003d Integer.toString(TypicalFoods.getNasiLemak().getFat().getAmount());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_CARBS \u003d Integer.toString(TypicalFoods.getNasiLemak().getCarbs().getAmount());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_DATE \u003d TypicalFoods.getNasiLemak().getDate().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d TypicalFoods.getNasiLemak().getTags().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void toModelType_validFoodDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(TypicalFoods.getNasiLemak());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertEquals(TypicalFoods.getNasiLemak(), food.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new JsonAdaptedFood(INVALID_NAME, VALID_PROTEIN, VALID_FAT, VALID_CARBS, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new JsonAdaptedFood(null, VALID_PROTEIN, VALID_FAT, VALID_CARBS, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                String.format(JsonAdaptedFood.MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void toModelType_invalidProtein_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new JsonAdaptedFood(VALID_NAME, INVALID_PROTEIN, VALID_FAT, VALID_CARBS, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String expectedMessage \u003d Protein.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void toModelType_invalidFat_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new JsonAdaptedFood(VALID_NAME, VALID_PROTEIN, INVALID_FAT, VALID_CARBS, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String expectedMessage \u003d Fat.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void toModelType_invalidCarbs_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new JsonAdaptedFood(VALID_NAME, VALID_PROTEIN, VALID_FAT, INVALID_CARBS, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String expectedMessage \u003d Carbohydrate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new JsonAdaptedFood(VALID_NAME, VALID_PROTEIN, VALID_FAT, VALID_CARBS, INVALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new JsonAdaptedFood(VALID_NAME, VALID_PROTEIN, VALID_FAT, VALID_CARBS, VALID_DATE, invalidTags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, food::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 60,
      "jh123x": 24,
      "aidoxe-123": 17
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/storage/JsonAdaptedMacroTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.Macro;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class JsonAdaptedMacroTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void validMacro_success() throws Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String name \u003d \"test\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String[] macroArguments \u003d new String[]{\"a\", \"b\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String[] rawCommands \u003d new String[]{\"add -n \\\\a -f \\\\b\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        JsonAdaptedMacro jsonAdaptedMacro \u003d new JsonAdaptedMacro(name, macroArguments, rawCommands);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Macro macro \u003d new Macro(name, macroArguments, rawCommands);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Macro macroFromJson \u003d jsonAdaptedMacro.toMacro();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Assertions.assertEquals(macro.getName(), macroFromJson.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Assertions.assertEquals(macro.getMacroArguments(), macroFromJson.getMacroArguments());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Assertions.assertEquals(macro.getRawCommands(), macroFromJson.getRawCommands());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void invalidMacro_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String name \u003d \"test\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String[] macroArguments \u003d \"-a -b\".split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String[] rawCommands \u003d \"add -n \\\\a -f \\\\b\".split(\";\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        JsonAdaptedMacro jsonAdaptedMacro \u003d new JsonAdaptedMacro(name, macroArguments, rawCommands);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(IllegalValueException.class, jsonAdaptedMacro::toMacro);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 33
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/storage/JsonMacroListStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.Macro;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.MacroList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class JsonMacroListStorageTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonMacroListStorageTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Optional\u003cMacroList\u003e readMacroList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return new JsonMacroListStorage(TEST_DATA_FOLDER.resolve(filePath)).readMacroList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void readMcGymmy_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readMacroList(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertFalse(readMacroList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void validMacroList_success() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Optional\u003cMacroList\u003e result \u003d readMacroList(\"validMacroList.json\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(result.isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        MacroList macroList \u003d result.get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Macro first \u003d macroList.getMacro(\"first\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Macro second \u003d macroList.getMacro(\"second\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertArrayEquals(new String[]{\"a\", \"b\"}, first.getMacroArguments());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertArrayEquals(new String[]{\"list\", \"help\"}, first.getRawCommands());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertArrayEquals(new String[]{\"c\", \"d\"}, second.getMacroArguments());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertArrayEquals(new String[]{\"clear\"}, second.getRawCommands());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void toModelType_invalidFoodFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMacroList(\"invalidMacroList.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 52
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/storage/JsonMcGymmyStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class JsonMcGymmyStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonMcGymmyStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void readMcGymmy_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readMcGymmy(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private java.util.Optional\u003cReadOnlyMcGymmy\u003e readMcGymmy(String filePath) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return new JsonMcGymmyStorage(Paths.get(filePath)).readMcGymmy(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(readMcGymmy(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMcGymmy(\"notJsonFormatMcGymmy.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void readMcGymmy_invalidFoodMcGymmy_throwDataConversionException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMcGymmy(\"invalidFoodMcGymmy.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void readMcGymmy_invalidAndValidFoodMcGymmy_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMcGymmy(\"invalidAndValidFoodMcGymmy.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void readAndSaveMcGymmy_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempMcGymmy.json\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy original \u003d TypicalFoods.getTypicalMcGymmy();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        JsonMcGymmyStorage jsonMcGymmyStorage \u003d new JsonMcGymmyStorage(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        jsonMcGymmyStorage.saveMcGymmy(original, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ReadOnlyMcGymmy readBack \u003d jsonMcGymmyStorage.readMcGymmy(filePath).get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(original, new McGymmy(readBack));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        original.addFood(TypicalFoods.getHotPlate());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        original.removeFood(Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        jsonMcGymmyStorage.saveMcGymmy(original, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        readBack \u003d jsonMcGymmyStorage.readMcGymmy(filePath).get();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(original, new McGymmy(readBack));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        original.addFood(TypicalFoods.getIndomee());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        jsonMcGymmyStorage.saveMcGymmy(original); // file path not specified"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        readBack \u003d jsonMcGymmyStorage.readMcGymmy().get(); // file path not specified"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(original, new McGymmy(readBack));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void saveMcGymmy_nullMcGymmy_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMcGymmy(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Saves {@code mcGymmy} at the specified {@code filePath}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private void saveMcGymmy(ReadOnlyMcGymmy mcGymmy, String filePath) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            new JsonMcGymmyStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                    .saveMcGymmy(mcGymmy, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void saveMcGymmy_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMcGymmy(new McGymmy(), null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "jh123x": 103,
      "aidoxe-123": 2
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/storage/JsonSerializableMcGymmyTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class JsonSerializableMcGymmyTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableMcGymmyTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private static final Path TYPICAL_FOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalFoodMcGymmy.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private static final Path INVALID_FOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidFoodMcGymmy.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private static final Path DUPLICATE_FOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateFoodMcGymmy.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void toModelType_typicalFoodFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        JsonSerializableMcGymmy dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_FOOD_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                JsonSerializableMcGymmy.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy mcGymmyFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        McGymmy typicalFoodMcGymmy \u003d TypicalFoods.getTypicalMcGymmy();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertEquals(mcGymmyFromFile, typicalFoodMcGymmy);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void toModelType_invalidFoodFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        JsonSerializableMcGymmy dataFromFile \u003d JsonUtil.readJsonFile(INVALID_FOOD_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                JsonSerializableMcGymmy.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 9,
      "jh123x": 29
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        userPrefs.setMcGymmyFilePath(Paths.get(\"mcgymmy.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Path prefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(prefsFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void getUserPrefsFilePath_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Path prefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(new JsonUserPrefsStorage(prefsFilePath).getUserPrefsFilePath(), prefsFilePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 5,
      "jh123x": 1,
      "-": 114,
      "aidoxe-123": 8
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        JsonMcGymmyStorage mcGymmyStorage \u003d new JsonMcGymmyStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        JsonMacroListStorage macroListStorage \u003d new JsonMacroListStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        storageManager \u003d new StorageManager(mcGymmyStorage, macroListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void mcGymmyReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "         * {@link JsonMcGymmyStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonMcGymmyStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy original \u003d TypicalFoods.getTypicalMcGymmy();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        storageManager.saveMcGymmy(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ReadOnlyMcGymmy retrieved \u003d storageManager.readMcGymmy().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(original, new McGymmy(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void getMcGymmyFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotNull(storageManager.getMcGymmyFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertNotNull(storageManager.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void getMacroListFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertNotNull(storageManager.getMacroListFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 16,
      "joeychensmart": 2,
      "-": 53,
      "aidoxe-123": 8
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                                    Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/testutil/FoodBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.date.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Fat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Protein;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * A utility class to help with building Food objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class FoodBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Chicken Rice\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Integer DEFAULT_PROTEIN \u003d 456;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Integer DEFAULT_FAT \u003d 456;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Integer DEFAULT_CARB \u003d 456;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Protein protein;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Fat fat;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Carbohydrate carbohydrate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Creates a {@code FoodBuilder} with the default details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public FoodBuilder() throws IllegalValueException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        protein \u003d new Protein(DEFAULT_PROTEIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        fat \u003d new Fat(DEFAULT_FAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        carbohydrate \u003d new Carbohydrate(DEFAULT_CARB);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        date \u003d Date.currentDate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Initializes the FoodBuilder with the data of {@code foodToCopy}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public FoodBuilder(Food foodToCopy) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        name \u003d foodToCopy.getName();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        protein \u003d foodToCopy.getProtein();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        fat \u003d foodToCopy.getFat();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        carbohydrate \u003d foodToCopy.getCarbs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(foodToCopy.getTags());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        date \u003d foodToCopy.getDate();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Sets the {@code Name} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public FoodBuilder withName(Name name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Food} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public FoodBuilder withTags(String... tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Sets the {@code Carbohydrate} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public FoodBuilder withCarb(String carb) throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.carbohydrate \u003d new Carbohydrate(Integer.parseInt(carb));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Sets the {@code Protein} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public FoodBuilder withProtein(String protein) throws IllegalValueException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.protein \u003d new Protein(Integer.parseInt(protein));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Sets the {@code Fat} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public FoodBuilder withFat(String fat) throws IllegalValueException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.fat \u003d new Fat(Integer.parseInt(fat));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * Sets the {@code Date} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public FoodBuilder withDate(String date) throws IllegalValueException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Food build() throws IllegalValueException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return new Food(name, protein, fat, carbohydrate, tags, date);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 97,
      "aidoxe-123": 12
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/testutil/McGymmyBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * A utility class to help with building McGymmy objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * {@code McGymmy ab \u003d new McGymmyBuilder().withFood(\"Chicken Rice\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class McGymmyBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final McGymmy mcGymmy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public McGymmyBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        mcGymmy \u003d new McGymmy();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public McGymmyBuilder(McGymmy mcGymmy) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.mcGymmy \u003d mcGymmy;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Adds a new {@code Food} to the {@code McGymmy} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public McGymmyBuilder withFood(Food food) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        mcGymmy.addFood(food);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public McGymmy build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return mcGymmy;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 34
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns the middle index of the food in the {@code model}\u0027s food list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFoodList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns the last index of the food in the {@code model}\u0027s food list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns the food in the {@code model}\u0027s food list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Food getFood(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return model.getFilteredFoodList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "jh123x": 8,
      "-": 44
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/testutil/TypicalFoods.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * A utility class containing a list of {@code Food} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class TypicalFoods {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String KEYWORD_MATCHING_RICE \u003d \"Rice\"; // A keyword that matches RICE"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Food chickenRice;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Food nasiLemak;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Food crispyFriedFish;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Food danishCookies;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Food eggs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Food fruitCake;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Food gingerbread;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Food hotPlate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Food indomee;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    // Manually added - Food\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Food apple;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static Food beans;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            generateTypicalFoods();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            assert false : \"Error in Typical foods\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private TypicalFoods() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns an {@code McGymmy} with all the typical foods."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static McGymmy getTypicalMcGymmy() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy mg \u003d new McGymmy();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        for (Food food : getTypicalFoodItems()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            mg.addFood(food);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return mg;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static void generateTypicalFoods() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        //Generate all of the foods"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        chickenRice \u003d new FoodBuilder().withName(new Name(\"Chicken Rice\"))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .withProtein(\"253\").withFat(\"123\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .withCarb(\"456\").withDate(\"20 Apr 2020\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .withTags(\"lunch\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        crispyFriedFish \u003d new FoodBuilder().withName(new Name(\"Crispy Fried Fish\"))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .withProtein(\"563\").withFat(\"456\").withCarb(\"654\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                .withDate(\"13 Oct 2020\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        nasiLemak \u003d new FoodBuilder().withName(new Name(\"Nasi Alamak\"))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .withProtein(\"432\").withFat(\"321\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .withCarb(\"123\").withDate(\"2 Sep 2020\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .withTags(\"dinner\", \"lunch\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        danishCookies \u003d new FoodBuilder().withName(new Name(\"Danish Cookies\"))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .withProtein(\"533\").withFat(\"654\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                .withCarb(\"456\").withDate(\"1 Jan 2020\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                .withTags(\"lunch\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        eggs \u003d new FoodBuilder().withName(new Name(\"Eggs\"))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .withProtein(\"224\").withFat(\"246\").withCarb(\"810\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                .withDate(\"7 Mar 2019\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        fruitCake \u003d new FoodBuilder().withName(new Name(\"Fruit Cake\"))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .withProtein(\"427\").withFat(\"987\").withCarb(\"789\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                .withDate(\"3 Feb 1998\").build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        gingerbread \u003d new FoodBuilder().withName(new Name(\"Gingerbread\"))"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .withProtein(\"442\").withFat(\"789\").withCarb(\"987\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                .withDate(\"5 May 1973\").build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        hotPlate \u003d new FoodBuilder().withName(new Name(\"Hot Plate\")).withProtein(\"424\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .withFat(\"234\").withCarb(\"234\").build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        indomee \u003d new FoodBuilder().withName(new Name(\"Indomee\")).withProtein(\"131\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .withFat(\"234\").withCarb(\"234\").build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        apple \u003d new FoodBuilder().withName(new Name(\"Apple\")).withProtein(\"888\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .withFat(\"234\").withCarb(\"234\").build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        beans \u003d new FoodBuilder().withName(new Name(\"beans\")).withProtein(\"888\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .withFat(\"234\").withCarb(\"234\").build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * Returns an {@code McGymmy} with each of the typical food duplicated once."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public static McGymmy getTypicalDuplicateMcGymmy() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        McGymmy mg \u003d new McGymmy();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // each item is duplicated once"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        for (Food food : getTypicalFoodItems()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            mg.addFood(food);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        for (Food food : getTypicalFoodItems()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            mg.addFood(food);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return mg;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static List\u003cFood\u003e getTypicalFoodItems() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(chickenRice, nasiLemak, crispyFriedFish, danishCookies, eggs,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                fruitCake, gingerbread));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Food getChickenRice() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return chickenRice;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Food getNasiLemak() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return nasiLemak;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Food getCrispyFriedFish() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return crispyFriedFish;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Food getDanishCookies() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return danishCookies;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Food getEggs() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return eggs;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Food getFruitCake() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return fruitCake;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Food getGingerbread() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return gingerbread;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Food getHotPlate() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return hotPlate;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Food getIndomee() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return indomee;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Food getApple() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return apple;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Food getBeans() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return beans;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 136,
      "aidoxe-123": 21
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public static final Index INDEX_FIRST_FOOD \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public static final Index INDEX_SECOND_FOOD \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public static final Index INDEX_THIRD_FOOD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chewypiano": 6,
      "-": 7
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/testutil/TypicalMacros.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.macro.Macro;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class TypicalMacros {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final Macro TEST_MACRO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final Macro UNNAMED_PARAMETER_TEST_MACRO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final String addString \u003d \"add -n %s -c \\\\c -p \\\\p\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final String[] statements \u003d new String[] {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String.format(addString, \"first\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String.format(addString, \"second\")};"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            TEST_MACRO \u003d new Macro(\"test\", new String[] {\"p\", \"c\"}, statements);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            UNNAMED_PARAMETER_TEST_MACRO \u003d new Macro(\"test2\", new String[] {\"q\"}, new String[] {\"add -n \\\\$ -f \\\\q\"});"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new RuntimeException(e.getMessage());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 21
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "\u003c?import jimmy.mcgymmy.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "\u003c?import jimmy.mcgymmy.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml\" type\u003d\"TestFxmlObject\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "-": 4
    }
  }
]
