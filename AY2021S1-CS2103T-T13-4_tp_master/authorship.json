[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "[![CI Status](https://github.com//AY2021S1-CS2103T-T13-4/tp/workflows/Java%20CI/badge.svg)](https://github.com//AY2021S1-CS2103T-T13-4/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* Common Cents is a **money-tracking app** to help students to organise their expenses **operating small businesses**.\u003cbr\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  Example usages:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "  * as an expense and savings tracker"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "  * to categorise various types of expenses"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* The project simulates an ongoing software project for a desktop application (called _AddressBook_) used for managing contact details."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  * It is **written in OOP fashion**. It provides a **reasonably well-written** code base **bigger** (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * It comes with a **reasonable level of user and developer documentation**."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* For the detailed documentation of this project, see the **[our Product Website](https://ay2021s1-cs2103t-t13-4.github.io/tp/)**."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 1,
      "-": 7,
      "cheoksuanne": 5
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    archiveName \u003d \u0027commoncents.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "run {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 5,
      "-": 71
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "You can reach us at the email `jordany@comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "### Lim Zi Yang"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003cimg src\u003d\"images/ziyang-98.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "[[homepage](https://limziyang.com/)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "[[github](http://github.com/Ziyang-98)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "[[portfolio](https://limziyang.com)]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "* Responsibilities: Responsible for overall project coordination"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "### Le Hue Man"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003cimg src\u003d\"images/lettuceman4.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "[[github](https://github.com/lettuceman4)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "[[portfolio](team/man-cv.pdf)]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "* Role: Scheduling and Tracking/Deliverables and Deadlines"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "* Responsibilities: In charge of defining, assigning, and tracking project tasks and"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "ensure project deliverables are done on time and in the right format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "### Cheok Su Anne"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003cimg src\u003d\"images/cheoksuanne.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "[[github](https://github.com/cheoksuanne)]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "* Role: Testing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "* Responsibilities: Ensures the testing of the project is done properly and on time"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "### Nicholas Canete"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003cimg src\u003d\"images/nicholas-gcc.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "[[github](https://github.com/nicholas-gcc)]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "[[portfolio](team/nic-cv.pdf)]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "* Role: Code Quality"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "* Responsibilities: Looks after code quality, ensures adherence to coding standards, etc."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "### Jordan Yoong"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003cimg src\u003d\"images/jordanyoong.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "[[github](http://github.com/jordanyoong)]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "[[portfolio](https://jordanyoong.github.io/cv/experience.html)]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "* Role: Documentation"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "* Responsibilities: Responsible for the quality of various project documents"
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 32,
      "-": 31
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103T-T13-4/tp/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-T13-4/tp/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-T13-4/tp/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-T13-4/tp/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `AccountListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-T13-4/tp/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-T13-4/tp/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-T13-4/tp/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `CommonCentsParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-T13-4/tp/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* stores the CommonCents data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cAccount\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `CommonCents`, which `Entry` references. This allows `CommonCents` to only require one `Tag` object per unique `Tag`, instead of each `Entry` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-T13-4/tp/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* can save the CommonCents data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Classes used by multiple components are in the `seedu.address.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "### Edit account feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "The proposed edit account mechanism is facilitated by `EditAccountCommand`. It extends `Command` and is identified by"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "`CommonCentsParser` and `EditAccountCommandParser`. The `EditAccountCommand` interacts with `Account` and the interaction"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "is managed by `ActiveAccount` as well as the `Model`. As such, it implements the following operation:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* `Account#setName(Name editedName)` — Sets the name of the account"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "The operation is exposed in the `ActiveAccount` interface as `ActiveAccount#setName()`."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Given below is an example usage scenario and how the edit account mechanism behaves at each step."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* Step 1: The user inputs the edit command to edit the current account in `ActiveAccount`. `CommonCentsParser` identifies"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "the command word and calls `EditCommandParser#parse(String args)` to parse the input into a valid `EditAccountCommand`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* Step 2: `EditAccountCommand` starts to be executed. In the execution, the current account, namely `previousAccount`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "in `ActiveAccount` is retrieved."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* Step 3: `ActiveAccount#setName(Name editedName)` is called with the edited name to replace the name of the current"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "account in `ActiveAccount`."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* Step 4: The updated account, namely `newAccount`, in `ActiveAccount` is retrieved."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* Step 5: `Model#setAccount(Account target, Account editedAccount)` is called with `previousAccount` as `target`, and"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "`newAccount` as `editedAccount`. This is to replace the to-be-edited account in the Model with the edited account."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "The following sequence diagram shows how an edit account operation works:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "![EditAccountSequenceDiagram](images/EditAccountSequenceDiagram.png)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** Some of the interactions with the utility classes,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "such as `CommandResult` and `Storage` are left out of the sequence diagram as their roles are not significant in the execution"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "of the edit account command."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "![EditAccountActivityDiagram](images/EditAccountActivityDiagram.png)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "##### Aspect: How edit account executes:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* **Alternative 1 (current choice):** Accounts can only be edited if they are active."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "  * Cons: Less flexibility for user."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* **Alternative 2:** Accounts can be edited by retrieving them from the account list with an index input."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "  * Pros: More flexibility for user."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "  * Cons: It is difficult to implement and manage because we need to consider whether the account to be edited"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "  is active and add extra measures for that case. As such, we chose alternative one since it is a more elegant"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "  solution."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "  "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "##### Aspect: Mutability of account"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* **Choice:** Allowing Name attribute of Account to be mutated by EditCommand."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "  * Rationale: Initially, we implemented the Name attribute of Account to be immutable. However, we realize that it"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "  is difficult to replace the name of the account if it is immutable. Hence, to overcome this obstacle, we decided"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "  to make the Name attribute mutable."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "  * Implications: Extra precaution needs to be implemented, for instance creating new copies of account to prevent unnecessary"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "  changes to accounts in account list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "### Find entries feature "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "The proposed Find entries feature is facilitated by `FindCommand`. It extends `Command` and "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "is identified by `CommonCentsParser` and `FindCommandParser`. The FindCommand interacts "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "with `Account` and the interactions are managed by `ActiveAccount`. As such, it implements the following"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "operations: "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "* `Account#updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate)` — Updates the expense "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "list that has the given keywords as predicate."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "* `Account#updateFilteredRevenueList(Predicate\u003cRevenue\u003e predicate)` — Updates the revenue "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "list that has the given keywords as predicate. "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "The operations are exposed in the `ActiveAccount` interface as `ActiveAccount` interface as "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "`ActiveAccount#setName()`."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "Given below is an example usage scenario and how the find entries mechanism behaves "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "at each step."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "* Step 1. The user inputs the find command to find the entries that have the occurrences of "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "a list of specified keywords in the entries of `ActiveAccount`. `CommandParser` identifies the command word `find`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "and calls `FindCommandParser#parse(String args)` to parse the input into a valid `FindCommand`."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "* Step 2. `FindCommand` starts to be executed. In the execution, "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    * If there is a predicate for keywords in the expense list of `ActiveAccount`, the expense list is updated. "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    `ActiveAccount#updateFilteredExpenseList()` is called to update the current expense list with expenses "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    with descriptions matching the keywords. "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    * If there is a predicate for keywords in the revenue list of `ActiveAccount`, the revenue list is updated. "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    `ActiveAccount#updateFilteredExpenseList()` is called to update the current revenue list with revenues"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    with descriptions matching the keywords."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "The following sequence diagram shows how a find entry operation works:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "![FindSequenceDiagram](images/FindSequenceDiagram.png)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** Some of the interactions with the utility classes,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "such as `CommandResult` and `Storage` are left out of the sequence diagram as their roles are not significant in the execution"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "of the find entries command."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "![FindActivityDiagram](images/FindActivityDiagram.png)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "##### Aspect: How find entries command is parsed"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "* **Choice:** User needs to use prefix \"k/\" to before the keywords."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    * Pros: "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        * Easy to implement as the arguments can be tokenized in the event of inputs with multiple arguments."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        * Able to handle multiple arguments as input for Category (with prefix \"c/\") is optional."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    * Cons: Less convenience for the user. "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "### Get total revenue/expenses feature"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "The get total expenses/revenues mechanism is facilitated by `GetTotalCommand`. It extends `Command` and is identified by `CommonCentsParser` and `GetTotalCommandParser`. The `GetTotalCommand` interacts with `Account` and the interaction is managed by `ActiveAccount`. As such, it implements the following operations:   "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* `Account#getTotalExpenses()` — gets the total sum of all the expenses in the account"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* `Account#getTotalRevenue()` — gets the total sum of all the revenues in the account"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "The operation is exposed in the `ActiveAccount` interface as `ActiveAccount#getTotalExpenses()`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "Given below is an example usage scenario and how the get total expenses/revenues mechanism behaves at each step."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* Step 1. The user inputs the total command to get the total expenses/revenues in the current account in ActiveAccount. `CommonCentsParser` identifies the command word and calls `GetTotalCommandParser#parse(String args)` to parse the input into a valid `GetTotalCommand`."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* Step 2. `GetTotalCommand` starts to be executed. In the execution, the total sum of the expenses/revenues is first initialised to 0.00."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* Step 3. If the input category is an `Expense`, `ActiveAccount#getTotalExpenses()` is called to get the total sum of all the expenses in the account. Otherwise, if the input category is a `Revenue`, `ActiveAccount#getTotalRevenue()` is called to get the total sum of all the revenues in the account."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* Step 4. The total sum is updated. "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "The following sequence diagram shows how a get total expenses/revenues operation works: "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "![GetTotalSequenceDiagram](images/GetTotalSequenceDiagram.png)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "![GetTotalActivityDiagram](images/GetTotalActivityDiagram.png)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "#### Design consideration"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "##### Aspect: How get total expenses/revenues executes:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* Alternative 1 (current choice): Calculates the total expenses/revenues in the by retrieving the expense/revenue list. "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    * Pros: Easy to implement."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": " "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedCommonCents`. It extends `CommonCents` with an undo/redo history, stored internally as an `commonCentsStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* `VersionedCommonCents#commit()` — Saves the current CommonCents state in its history."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* `VersionedCommonCents#undo()` — Restores the previous CommonCents state from its history."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* `VersionedCommonCents#redo()` — Restores a previously undone CommonCents state from its history."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitCommonCents()`, `Model#undoCommonCents()` and `Model#redoCommonCents()` respectively."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedCommonCents` will be initialized with the initial Common Cents state, and the `currentStatePointer` pointing to that single Common Cents state."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the Common Cents. The `delete` command calls `Model#commitCommonCents()`, causing the modified state of the Common Cents after the `delete 5` command executes to be saved in the `commonCentsStateList`, and the `currentStatePointer` is shifted to the newly inserted Common Cents state."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitCommonCents()`, causing another modified Common Cents state to be saved into the `commonCentsStateList`."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitCommonCents()`, so the Common Cents state will not be saved into the `commonCentsStateList`."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoCommonCents()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous Common Cents state, and restores the Common Cents to that state."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial CommonCents state, then there are no previous CommonCents states to restore. The `undo` command uses `Model#canUndoCommonCents()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoCommonCents()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the Common Cents to that state."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `commonCentsStateList.size() - 1`, pointing to the latest Common Cents state, then there are no undone CommonCents states to restore. The `redo` command uses `Model#canRedoCommonCents()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the Common Cents, such as `list`, will usually not call `Model#commitCommonCents()`, `Model#undoCommonCents()` or `Model#redoCommonCents()`. Thus, the `commonCentsStateList` remains unchanged."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitCommonCents()`. Since the `currentStatePointer` is not pointing at the end of the `commonCentsStateList`, all Common Cents states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire Common Cents."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "_{more aspects and alternatives to be added}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* has a need to manage a significant number of business accounts, each with a significant number of financial entries"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "**Value proposition**: manage financial entries faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                 | I want to …​                                   | So that I can…​                                                                 |"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------------------------- | -------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "| `* * *`  | user                                       | exit the app                                      |                                                                      |"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "| `* * *`  | user                                       | add an expense/revenue entry                       |                                                                      |"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "| `* * *`  | user                                       | delete an entry                                   | remove entries that I no longer need                                 |"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "| `* *`    | user                                       | have multiple accounts for different businesses   | keep expense/earning entries for the respective businesses separate  |"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the **System** is the `CommonCents` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "**Use case: UC01 - Add an expense entry**"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "1.  User requests to add an expense entry"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "2.  Common Cents adds the expense entry"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* 1a. The given input is in invalid format."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    * 1a1. Common Cents shows an error message."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "**Use case: UC02 - Add a revenue entry**"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "1.  User requests to add revenue entry"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "2.  Common Cents adds revenue entry"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* 1a. The given input is in invalid format."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    * 1a1. Common Cents shows an error message."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "**Use case: UC03 - Delete an entry**"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "1.  User requests to delete a specific entry"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "2.  Common cents deletes the entry."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* 1a. The given index is invalid."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    * 1a1. Common cents shows an error message."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "**Use case: UC04 - Exiting app**"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "1.  User requests to exit"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "2.  Common cents responds with exit message and closes."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "2.  Should be able to hold up to 1000 entries per account without a noticeable sluggishness in performance for typical"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "4.  Should be able to perform simple arithmetic with up to 1000 entries without a significant drop in performance"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "5.  Should be able to understand the layout of product without much reference to the user guide"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "6.  Should be able to hold up to 100 accounts without taking up excess memory"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 134,
      "lettuceman4": 54,
      "jordanyoong": 2,
      "-": 321,
      "cheoksuanne": 33
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "Thank you for choosing **Common Cents**! This is your convenient at-hand **expense-tracking tool**, meant for **anyone who runs a small-scale business**. "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "With just a few commands, _Common Cents_ will keep track, categorise and calculate your income and expenditure for you! "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "You can even keep your expenses in multiple accounts for seamless organisation. Amalgamating the features of a "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "Command Line Interface (CLI) with a Graphical User Interface (GUI), _Common Cents_ is meant to be functional, intuitive and "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "faster than most traditional GUI expense-trackers out there!"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "This User Guide will show you how to navigate the User Interface (UI), give you step-by-step instructions on using commands, tips and tricks on how to maximise your experience with _Common Cents_ and clarify most doubts that you may have."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "The _Common Cents_ interface and commands consist of a few levels: `Application` level, `Account` level and `Entry` level.\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "* `Application` level commands deal with interactions with the app itself.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "* `Account` level commands deal with managing the different accounts in the app.\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "* `Entry` level commands deal with managing the entries which are either expenses or revenues in an account."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "# 1. Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "Below are steps to help you set up and start your Common Cents experience!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "1\\. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "2\\. Download the latest `commoncents.jar`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "3\\. Copy the file to the folder you want to use as the _home folder_ for _Common Cents_."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "4\\. Double-click the file to start the app. You should see the GUI similar to the one below in a few seconds (**Figure 1-1**). "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Note how the app contains some sample expenses and revenues if you have not used the app before.\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": " ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": " \u003cp align\u003d\"center\"\u003e \u003csub\u003e \u003cb\u003eFigure 1-1\u003c/b\u003e: Default GUI \u003c/sub\u003e \u003c/p\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "5\\. Type the command in the command box and press Enter to execute it. e.g. typing `help` and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "   * `add c/expense d/buy lunch a/5.20 t/food` : Adds an expense named \"buy lunch\" to the expense list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "   * `delete 1 c/expense` : Deletes the 1st entry in the expense list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "   * `exit` : Exits the app."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "6\\. Refer to the [Features](#5-features) below for details of each command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "[comment]: \u003c\u003e (Copy the blocks below and edit your message)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "# 2. How to identify notations"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "These blocks are a few examples of notations that will be used in this document. Each block and icon "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "has a different meaning so do look out for them under our features."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ":information_source: **Note:** "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Important notes to read regarding the feature. "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "[comment]: \u003c\u003e (This only appears in Github CSS)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ":bulb: **Tip:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "Ways to better your experience with _Common Cents_."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ":green_book: **Example:**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "An example, or multiple examples to follow."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-danger\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ":warning: **Warning:**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Important cautions that needs to be known before using the feature."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "# 3. User Interface Overview"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "As you can see, **figure 3-1** below shows the default user interface (UI) of _Common Cents_ with its components.  "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "![annotatedUi](images/commands/annotatedUi.PNG)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "\u003cp align\u003d\"center\"\u003e \u003csub\u003e \u003cb\u003eFigure 3-1\u003c/b\u003e: Default user interface of \u003ci\u003eCommon Cents\u003c/i\u003e \u003c/sub\u003e \u003c/p\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "You can find the description for each UI component shown in the table below.\u003cbr\u003e "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "UI component | Description"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "*Menu bar* | Displays the menu bar of _Common Cents_. You can use this to access the User Guide or exit the application. "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "*Active account name* | Displays the account you are currently on."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "*Display picture* | Displays the default display picture of the application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "*Command box* | Displays a text field for you to type the commands."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "*Result display* | Displays the result of your command. If the command is invalid, an error message will be displayed to prompt and guide you to input valid correct command."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "*Account summary chart* | Displays the total expenses and revenues in your current account in a pie chart."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "*Chart legend* | Displays the legend for the account summary chart."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "*Status bar* | Displays the current date."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "*Expense list* | Displays all the expenses in your current account in a panel."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "*Revenue list* | Displays all the revenues in your current account in a panel."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "# 4. Components"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "This section describes the various components that comprises _Common Cents_, mainly Account and Entries. If you"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "are new to _Common Cents_, do not fret as this section will guide you step by step in understanding the components"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "available! This will better your experience with _Common Cents_ and your usage of features!"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "## 4.1 Accounts"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "Accounts in Common Cents are key features that help you better manage, categorise, and organise your finances better. "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "In Common Cents, each account has a unique name, and a unique list of expenses and revenues. "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "You can make as many accounts as you\u0027d like in order to help you better categorise and organise your finances better!\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": " "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "When you first launch Common Cents, a **General Account** is made for you by default, which you may use on top of other"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "accounts. You may also make new accounts and switch between them and give them their very own set of expenses and revenues."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "### 4.1.1 Name"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "As mentioned in the previous section, you are able to make new accounts on top of the General Account. Every account "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "**MUST** have a unique name and duplicate names are not supported, so that you are able to distinguish and identify your"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "accounts better."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "### 4.1.2 Expense List"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "Each account will have an Expense list - that is, a list of transactions that involve expenditure on your end (i.e."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "net outflow of money). In general, expenses keyed into Common Cents have a compulsory Description and Amount, as well as "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "optional Tags. In the app user interface, each expense amount will be displayed as a negative value and all the expenses"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "will be displayed as a scrollable list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "### 4.1.3 Revenue List"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "Each account will also have a Revenue list - that is, a list of transactions that involve profit from your end (i.e."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "net inflow. of money). Like expenses, revenues keyed into Common Cents have a compulsory Description and Amount, as well as "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "optional Tags. In the app user interface, each revenue amount will be displayed as a positive value and all the revenues"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "will be displayed as a scrollable list, right beside the expenses list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "## 4.2 Entries"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "\u0027Entry\u0027 (or \u0027Entries\u0027) is the term used to describe either Expense or Revenue. Each entry input into Common Cents would "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "have compulsory fields - Description, Amount - and optional Tags. "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "### 4.2.1 Category"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Category is the field that specifies the type of Entry input that Common Cents receives from you. It is used in commands"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "to differentiate entries between Expense and Revenue. You can either specify the category as an `expense` or a `revenue`,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "or `e` or `r` for short and these are not case-sensitive. This documentation uses `expense` or `revenue` as examples in "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "the [Features](#5-features) below."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "### 4.2.2 Description"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "Description refers to the textual information that is associated with the Entry that Common Cents receives from you, in"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "order to provide more information about the Entry.  "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "### 4.2.3 Amount "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "Amount is the numeric value associated with the Entry that Common Cents receives from you. All amounts, for both expenses"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "and revenues must be given as a positive value."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "### 4.2.4 Tags"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "Tags refer to short textual prompts attached to an Entry, with the purpose of giving extra information and identity for"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "your Entries in Common Cents."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "# 5. Features"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "Here are some general notes about the commands in _Common Cents_ "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ":information_source: **About the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "* Words in UPPERCASE are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "  e.g. in `add c/CATEGORY...`, `CATEGORY` is a parameter which can be used as `add c/REVENUE...`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "  e.g `...a/AMOUNT [t/TAG]` can be used as `...a/50.10 t/Supplies` or as `...a/50.10`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "* Parameters **preceded by a prefix** can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "  e.g. if the command specifies `c/CATEGORY d/DESCRIPTION...`, `d/DESCRIPTION c/CATEGORY...` is also acceptable."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "* **Numeric** parameters (e.g. `ENTRY_INDEX`) must be in the correct order.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  e.g. if the command specifies `ENTRY_INDEX c/CATEGORY`, only `ENTRY_INDEX c/CATEGORY` is acceptable "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  and `c/CATEGORY ENTRY_INDEX` is invalid. "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "* Commands with no prefix parameters (e.g. `clear`, `profit`, `listacc`) can take in extra words after the command word"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "  without affecting its execution.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "  e.g. the command `profit abc` works the same as `profit` and is considered valid."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "The commands are separated into three categories: App-Level commands, Entry-Level commands and Account-Level Commands."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "Each level interacts with _Common Cents_ differently to maximise your experience. More details about each level are "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "found in its own section below.  "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "## 5.1 App-Level Commands"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "App-Level commands deals with interactions with the app, _Common Cents_, itself."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "### 5.1.1 Viewing help : `help`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "You can use this command when you are at a lost or want to view an overview of how to use the application."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "This command will return a message explaining how to access the help page (**Figure 5.1-1**). "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "You can click on the `Copy URL` button to copy the link to clipboard and paste it in your web browser. \u003cbr\u003e "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "**Format**: `help`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ":green_book: **Example:**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* `help`: Returns help prompt (**Figure 5.1-1**)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "![helpMessage](images/helpMessage.png)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "\u003cp align\u003d\"center\"\u003e \u003csub\u003e \u003cb\u003eFigure 5.1-1\u003c/b\u003e: Help message \u003c/sub\u003e \u003c/p\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": " "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "### 5.1.2 Exiting the program : `exit`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "You can use this command when you are done with what you need to do and want to close the application."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "**Format:** `exit`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ":green_book: **Example:**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* `exit`: Returns exit message then quits the program in 1.5 seconds (**Figure 5.1-2**)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "![exitCommand](images/commands/exitCommand.png)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "\u003cp align\u003d\"center\"\u003e \u003csub\u003e \u003cb\u003eFigure 5.1-2\u003c/b\u003e: Exit message appears in Result display \u003c/sub\u003e \u003c/p\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "## 5.2 Entry-Level Commands"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "Entry-Level commands involve managing the entries which are either expenses or revenues in an account. "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "### 5.2.1 Adding an entry: `add`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "You can use this command when you want to add an entry (expense/revenue) to the tracker."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "**Format:** `add c/CATEGORY d/DESCRIPTION a/AMOUNT [t/TAG]`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ":green_book: **Example:**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* `add c/expense d/buying supplies a/10.10 t/blogshop t/eCommerce` (**Figure 5.2-1**)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "* `add c/revenue d/sale of clothes a/200 t/blogshop t/eCommerce`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "![addCommand](images/commands/addCommand.png)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "\u003cp align\u003d\"center\"\u003e \u003csub\u003e \u003cb\u003eFigure 5.2-1\u003c/b\u003e: A new expense called \"buying supplies\" is added \u003c/sub\u003e \u003c/p\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "* Adds an entry to either category."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "* The category refers to the classification of the entry in the entry lists."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "* The category must be either \u0027expense\u0027 or \u0027revenue\u0027."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "* Each tag can only be 1 word."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "* If multiple tags are required, do input multiple t/ prefixes."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "* Each tag in entry only appears once even if added multiple times."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ":bulb: **Tip:**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "* Input expense/revenue information can be in any order"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "### 5.2.2 Deleting an entry: `delete`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "You can use this command to remove an entry (expense/revenue) from the tracker when you do not want to keep track of "
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "it anymore."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "**Format:** `delete ENTRY_INDEX c/CATEGORY`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ":green_book: **Example:**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* `delete 1 c/expense` : Deletes first entry in expense category"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* `delete 2 c/revenue` : Deletes second entry in the revenue category (**Figure 5.2-2**)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ":bulb: **Tip:**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "* It is possible for you to use the `find` function then `delete`."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "![deleteCommand1](images/commands/deleteCommand1.png)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "\u003cp align\u003d\"center\"\u003e \u003csub\u003e \u003cb\u003eFigure 5.2-2\u003c/b\u003e: The revenue at index 2 is deleted \u003c/sub\u003e \u003c/p\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "* Deletes the entry at the specified INDEX."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "* The index refers to the index number shown in the displayed entry lists."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* The index must be a positive integer (eg. 1, 2, 3), and must be within the range of the number of entries (e.g. if there are 10 entries, the INDEX given cannot be \u003e 10)."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "### 5.2.3 Editing an entry: `edit`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "You can use this to make edits to any existing entries in the tracker when the details of the entry are wrongly keyed."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "* `edit 1 c/CATEGORY d/DESCRIPTION a/AMOUNT t/TAG`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "* `edit 2 c/CATEGORY d/DESCRIPTION`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "* `edit 3 c/CATEGORY a/AMOUNT`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ":green_book: **Example:**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* `edit 2 c/expense d/buy McSpicy a/8.60`: Changes the name and the amount of entry 2 (**Figure 5.2-3**) to "
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "`buy McSpicy` and `$8.60` respectively (**Figure 5.2-4**)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "* `edit 2 c/revenue d/sell McNuggets`: Changes the name of entry 2 to `sell McNuggets` "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* `edit 2 c/expense a/5.50`: Changes the amount of entry 2 to `$5.50`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "![beforeEditCommand](images/commands/beforeEditCommand.png)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "\u003cp align\u003d\"center\"\u003e \u003csub\u003e \u003cb\u003eFigure 5.2-3\u003c/b\u003e: The targeted expense at index 2 before editing \u003c/sub\u003e \u003c/p\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "![afterEditCommand](images/commands/afterEditCommand.png)"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "\u003cp align\u003d\"center\"\u003e \u003csub\u003e \u003cb\u003eFigure 5.2-4\u003c/b\u003e: The targeted expense at index 2 after editing \u003c/sub\u003e \u003c/p\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* Edits an entry that matches the entry name and changes the parameters of an entry depending on which are specified."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* The tags d/ and a/ have to be used to indicate which field specifies DESCRIPTION and which field specifies AMOUNT."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "* The index must be a positive integer 1, 2, 3, and must be within the range of the number of entries"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "(e.g. if there are 10 entries, the `INDEX` given cannot be \u003e 10)."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "### 5.2.4 Locating entries by description: `find`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "You can use this command to list expenses and/or revenues that have the given keyword(s) in their descriptions. This is "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "useful when you want to find some particular entries to [`delete`](#522-deleting-an-entry-delete) or [`edit`](#523-editing-an-entry-edit). "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "If there is no expense or revenue found, the respective list will be empty."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "**Format:** `find [c/CATEGORY] k/KEYWORDS`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ":green_book: **Example:** "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* `find c/expense k/watercolours canvas`: Finds all expenses with keywords `watercolours` and/or `canvas` in their "
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "description"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* `find c/revenue k/phone`: Finds all revenues with keyword `phone` in their "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "description"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* `find k/canvas earrings`: Finds all expenses and revenues with keywords `canvas` and/or `earrings` in their "
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "description (**Figure 5.2-5**)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": " "
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003cbr\u003e![findCommand](images/commands/findCommand.PNG)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "\u003cp align\u003d\"center\"\u003e \u003csub\u003e \u003cb\u003eFigure 5.2-5\u003c/b\u003e: Find command successfully executed \u003c/sub\u003e \u003c/p\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "* The search is case-insensitive. e.g. `grocery` will match `grocery` and `Grocery`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "* Only the entry\u0027s description is searched."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "* The search does not match partial words. e.g. `food` will match `food` and `fast food` but not `fastfood`."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "* Entries matching at least one keyword will be returned (i.e. OR search). e.g. `Food` will return `Hawker food`, "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "`Restaurant Food`."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "* The `c/CATEGORY` is optional."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "[comment]: \u003c\u003e (This only appears in Github CSS)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ":bulb: **Tip:** When there are a lot of entries, and you want to delete something, "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "you can use `find` to search for it in the list and use [`delete ENTRY_INDEX`](#522-deleting-an-entry-delete) to remove it from the updated"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "list, with the updated `ENTRY INDEX`."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "### 5.2.5 Listing all entries: `list`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "You can use this command to list all entries in the current account when you want to have an overview of you account."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "**Format:** `list`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": " "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ":green_book: **Example:**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "* `list`: Returns the latest list of all entries"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "### 5.2.6 Clearing all expenses or revenue: `clear`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "You can use this command to clear all entries from a particular category when you do not need to track them anymore."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": " "
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "**Format:** `clear`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": " "
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ":green_book: **Example:**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* `clear c/expense`: Clears all entries visible in expense list (**Figure 5.2-6**)"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* `clear c/revenue`: Clears all entries visible in revenue list"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "![clearCommand](images/commands/clearCommand.png)"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "\u003cp align\u003d\"center\"\u003e \u003csub\u003e \u003cb\u003eFigure 5.2-6\u003c/b\u003e: The expenses in the account are cleared \u003c/sub\u003e \u003c/p\u003e"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "The `clear` command will clear all entries in the stipulated category. If you would like to delete selected"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "entries, use the `delete` command instead."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "### 5.2.7 Calculating net profits based on expenses and revenues: `profit` "
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "If you wish to calculate the profits you have currently, you may use this command to do so."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": " "
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "**Format:** `profit`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": " "
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ":green_book: **Example:**"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* `profit`: Returns the profits (**Figure 5.2-7**) by taking the difference between the expenses and revenues"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "![profitCommand](images/commands/profitCommand.PNG)"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "\u003cp align\u003d\"center\"\u003e \u003csub\u003e \u003cb\u003eFigure 5.2-7\u003c/b\u003e: Profit command successfully executed \u003c/sub\u003e \u003c/p\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e "
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "The `profit` function will show deficits as a negative number if the total expenses is greater than the total revenue."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "### 5.2.8 Undoing Entry-level commands: `undo`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "You can use this command to return to the state of the entry prior to the previous command."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " "
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "**Format:** `undo`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " "
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ":green_book: **Example:**"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* `undo`: Returns the state of expenses and revenues prior to the previous command. For example, if the "
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "[`delete`](#522-deleting-an-entry-delete) command was used (**Figure 5.2-8**), using `undo` returns account to the state before the "
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "[`delete`](#522-deleting-an-entry-delete) command was used (**Figure 5.2-9**)."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "![deleteCommand](images/commands/deleteCommand.png)"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "\u003cp align\u003d\"center\"\u003e \u003csub\u003e \u003cb\u003eFigure 5.2-8\u003c/b\u003e: Before the undo command, an expense was deleted \u003c/sub\u003e \u003c/p\u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "![undoCommand](images/commands/undoCommand.png)"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "\u003cp align\u003d\"center\"\u003e \u003csub\u003e \u003cb\u003eFigure 5.2-9\u003c/b\u003e: After the undo command, the deleted expense is added again \u003c/sub\u003e \u003c/p\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e "
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "Do note that the `undo` command can only undo  [`add`](#521-adding-an-entry-add), [`delete`](#522-deleting-an-entry-delete),"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "[`edit`](#523-editing-an-entry-edit) and [`clear`](#526-clearing-all-expenses-or-revenue-clear) commands at the entry-level. "
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Account-level commands cannot be reverted using the `undo` command."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-danger\"\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ":warning: **Warning:**"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* There is no `redo` command to revert your `undo` command. Do use the `undo` command with caution!"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* Once you exit the app, all the previous states will be lost. Do confirm your changes to the entries in the account "
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "before you exit the app!"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "## 5.3 Account-level Commands"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "Account-Level commands involve managing the different accounts in the app. "
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "### 5.3.1 Adding new account: `newacc`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "You can create a new account to manage a different set of entries with this command. "
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "**Format**: `newacc n/NAME`"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ":green_book: **Example:**"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* `newacc n/My Flower Shop`: Adds a new account, `My Flower Shop`, with no expenses or revenues"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* `newacc n/$uper $avers`: Adds a new account, `$uper $avers`, with no expenses or revenues (**Figure 5.3-1**)"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "![addAccountCommand](images/commands/addAccountCommand.png)"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "\u003cp align\u003d\"center\"\u003e \u003csub\u003e \u003cb\u003eFigure 5.3-1\u003c/b\u003e: A new account called $uper $avers is added \u003c/sub\u003e \u003c/p\u003e"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e "
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "* The app does not automatically switch to the new account. Once the account is created, you can check it using [`listacc`](#534-listing-accounts-you-have-listacc) or switch to it using [`switchacc`](#switching-accounts-switchacc). "
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* You cannot create an account with the same name as an existing account."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "### 5.3.2 Deleting an account: `deleteacc`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "You can remove an account by using this command. This command is useful for clearing accounts you are no longer using."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "**Format:** `deleteacc INDEX`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ":green_book: **Example:**"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "* `deleteacc 3`: Deletes third account based on list generated by using [`listacc`](#534-listing-accounts-you-have-listacc)"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": " (**Figure 5.3-2**)"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "![deleteAccountCommand](images/commands/deleteAccountCommand.png)"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "\u003cp align\u003d\"center\"\u003e \u003csub\u003e \u003cb\u003eFigure 5.3-2\u003c/b\u003e: An account called My Flower Shop is deleted \u003c/sub\u003e \u003c/p\u003e"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e "
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "Do note that _Common Cents_ prevents you from deleting the account if you are currently on that account"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "or if the account is your only account left."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ":bulb: **Tip:**"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "If you are unsure of the account index, use [`listacc`](#534-listing-accounts-you-have-listacc) to check the index!"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-danger\"\u003e"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ":warning: **Warning:**"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "Deleting your account means all the data of the entries in the account is lost as well. Also, deleting is an "
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "irreversible action and cannot be undone. Do delete your account with caution!"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "### 5.3.3 Editing the name of the current account: `editacc`"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "You can edit the name of the current account you are on using this command."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "**Format:** `editacc n/NAME`"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ":green_book: **Example:**"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* `editacc n/Bob\u0027s Bakery`: Replaces the name of the current account, `Default Account 1` to `Bob\u0027s Bakery` (**Figure 5.3-3**)"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "![editAccNameCommand](images/commands/editAccNameCommand.png)"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "\u003cp align\u003d\"center\"\u003e \u003csub\u003e \u003cb\u003eFigure 5.3-3\u003c/b\u003e: The currently active account, \"Default Account 1\", is renamed to \"Bob\u0027s Bakery\" \u003c/sub\u003e \u003c/p\u003e"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e "
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* You can only edit the account name of the account you are currently on. To edit the name"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "of another account, you can use [`switchacc`](#535-switching-accounts-switchacc) to switch to the other account"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "and edit the name from there."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* You cannot edit the account name to a name of another existing account."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "### 5.3.4 Listing accounts you have: `listacc`"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "You can check the accounts you have in the app by using this command. Each account will be numbered with an index and "
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "displayed as their names."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "**Format:** `listacc`"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ":green_book: **Example:**"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* `listacc`: Shows a numbered list of the account names as a message (**Figure 5.3-4**)"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "![listAccCommand](images/commands/listAccCommand.png)"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "\u003cp align\u003d\"center\"\u003e \u003csub\u003e \u003cb\u003eFigure 5.3-4\u003c/b\u003e: All the accounts are listed in the Result Display \u003c/sub\u003e \u003c/p\u003e"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "### 5.3.5 Switching accounts: `switchacc`"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "You can use this command to switch to the desired account. This is useful if you want to manage entries in the "
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "desired account or edit the name of the desired account."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "**Format:** `switchacc INDEX`"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ":green_book: **Example:**"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "* `switchacc 2`: Switches to the second account based on the list generated by "
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "[`listacc`](#534-listing-accounts-you-have-listacc) (**Figure 5.3-5**)"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "![switchAccCommand](images/commands/switchAccCommand.png)"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "\u003cp align\u003d\"center\"\u003e \u003csub\u003e \u003cb\u003eFigure 5.3-5\u003c/b\u003e: Current account has been switched to \"Default account 2\" \u003c/sub\u003e \u003c/p\u003e"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ":bulb: **Tip:**"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "If you are unsure of the account index, use [`listacc`](#534-listing-accounts-you-have-listacc) to check the index!"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-danger\"\u003e"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ":warning: **Warning:**"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "Once you use the `switchacc` command, all the previous states for the [`undo`](#528-undoing-entry-level-commands-undo) command will"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "be lost. This would mean that if you choose to switch back to the account, you cannot undo the previous entry-level"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "commands anymore. Do confirm the changes made to the entries in the account before you switch account!"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "# 6. Frequently Asked Questions (FAQ)"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "This section contains a few frequently asked questions with regard to _Common Cents_."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "## 6.1 General Inquiry"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "This section features general questions about _Common Cents_ that are not specific to the features."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "1. **Question:** How do I transfer my data to another computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "**Answer:** Install the app in the other computer and overwrite the empty data file it creates with the file that "
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "contains the data of your previous _CommonCents_ home folder."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "2. **Question:** What if I notice something wrong with the application?\u003cbr\u003e"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "**Answer:** You may submit a bug report or send us a notice directly [here](https://github.com/AY2021S1-CS2103T-T13-4/tp)."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "## 6.2 Features Inquiry"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "This section features feature-related questions about _Common Cents_."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "1. **Question:** What happens if I forget my account names?\u003cbr\u003e"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "**Answer:** You may use the `listacc` command to see a full list of your existing accounts."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "2. **Question:** I encountered this situation when using the features as shown in the screenshot below. I understand that the "
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "prefix indicated is wrong after checking the `add` section in the User Guide. However, the error message states that my category is"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "wrong. Can I clarify on this situation?\u003cbr\u003e"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "![errorMessage](images/commands/errorMessage.png)"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003cp align\u003d\"center\"\u003e \u003csub\u003e \u003cb\u003eFigure\u003c/b\u003e: Error message that might cause confusion \u003c/sub\u003e \u003c/p\u003e"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "   **Answer:** "
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Yes, the prefix indicated is wrong as it should be `d/` instead of `n/`. As a result, the category parameter is read as"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "`expense n/buy McSpicy a/8.60` instead of `expense`. Do remember to check that the **prefixes and parameters required for a command"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "are correct!** If you are unsure of the prefixes and parameters required, do check the sections under features above! "
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "3. **Question:** What if I typed in multiple prefixes with valid parameters? For instance, `add c/expense c/revenue d/Buy lunch a/4.30`"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "**Answer:** Multiple instances of prefixes, as well as indexes except for `tags (t/)` will not be executed and an error "
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "message will be shown. For instance, the example above has both `c/expense` and `c/revenue`, hence the command will not be executed. "
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Please follow the format of the commands closely in the [Features](#5-features) section above!"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "# 7. Command summary"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "The table below summarises the above commands in the order of appearance in this User Guide for your reference. "
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "Action | Format"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "[**Help**](#511-viewing-help--help) | `help`"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "[**Exit**](#512-exiting-the-program--exit) | `exit`"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "[**Add**](#521-adding-an-entry-add) | `add c/CATEGORY d/DESCRIPTION a/AMOUNT [t/TAG]`"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "[**Delete**](#522-deleting-an-entry-delete) | `delete ENTRY_INDEX c/CATEGORY`"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "[**Edit**](#523-editing-an-entry-edit) | `edit ENTRY_INDEX c/CATEGORY [d/DESCRIPTION] [a/AMOUNT] [t/TAG]`"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "[**Find**](#524-locating-entries-by-description-find) | `find k/KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "[**List**](#525-listing-all-entries-list) | `list`"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "[**Clear**](#526-clearing-all-expenses-or-revenue-clear) | `clear c/CATEGORY`"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "[**Profit**](#527-calculating-net-profits-based-on-expenses-and-revenues-profit) | `profit`"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "[**Undo**](#528-undoing-entry-level-commands-undo) | `undo`"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "[**New Account**](#531-adding-new-account-newacc) | `newacc n/NAME`"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "[**Delete Account**](#532-deleting-an-account-deleteacc) | `deleteacc INDEX`"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "[**Edit Account Name**](#533-editing-the-name-of-the-current-account-editacc) | `editacc n/NAME`"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "[**List Account**](#534-listing-accounts-you-have-listacc) | `listacc`"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "[**Switch Account**](#535-switching-accounts-switchacc) | `switchacc INDEX`"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "# 8. Acknowledgement"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "* The project is a brown-field project, based on AddressBook-Level3 by the [SE-EDU initiative](https://se-education.org/)."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "* The background image is [Designed by Freepik](http://www.freepik.com). "
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 188,
      "lettuceman4": 164,
      "nicholas-gcc": 41,
      "jordanyoong": 110,
      "-": 108,
      "cheoksuanne": 120
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1 c/deleteExpense\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteExpense(e)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : setAccount(account)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveCommonCents(commonCents)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 9,
      "-": 35
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "CommonCents *-right-\u003e \"1\" UniqueAccountList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "CommonCents *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "UniqueTagList -[hidden]down- UniqueAccountList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "UniqueTagList -[hidden]down- UniqueAccountList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "UniqueAccountList o-right-\u003e Account"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Entry o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Account *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Account *--\u003e \"1\" ExpenseList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Account *--\u003e \"1\" RevenueList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "ExpenseList o--\u003e \"*\" Expense"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "RevenueList o--\u003e \"*\" Revenue"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Expense ..|\u003e Entry"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Revenue ..|\u003e Entry"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Entry *--\u003e Description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Entry *--\u003e Amount"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 20,
      "-": 11
    }
  },
  {
    "path": "docs/diagrams/EditAccountActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "repeat :User enters command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "repeat  while () is ([invalid args])"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ":Account is retrieved from ActiveAccount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ":Account is edited in ActiveAccount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ":new Account\u0027s is retrieved from ActiveAccount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ":Account in Model is replaced with new Account;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "stop"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 12,
      "lettuceman4": 1
    }
  },
  {
    "path": "docs/diagrams/EditAccountSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "participant \":CommonCentsParser\" as CommonCentsParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "participant \":EditAccountCommandParser\" as EditAccountCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "participant \"u:EditAccountCommand\" as EditAccountCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "box ActiveAccount ACTIVEACCOUNT_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "participant \":ActiveAccountManager\" as ActiveAccount LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "participant \":ModelManager\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "[-\u003e LogicManager : execute(\"editacc 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "LogicManager -\u003e CommonCentsParser: parseCommand(\"editacc 1\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "activate CommonCentsParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "CommonCentsParser -\u003e EditAccountCommandParser: parse(\"editacc 1\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "activate EditAccountCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "create EditAccountCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "EditAccountCommandParser -\u003e EditAccountCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "activate EditAccountCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "EditAccountCommand -\u003e EditAccountCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "deactivate EditAccountCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "EditAccountCommandParser --\u003e CommonCentsParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "deactivate EditAccountCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "CommonCentsParser --\u003e LogicManager"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "deactivate CommonCentsParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "LogicManager -\u003e EditAccountCommand: execute(model, activeAccount)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "activate EditAccountCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "EditAccountCommand -\u003e ActiveAccount: getAccount()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "activate ActiveAccount"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "ActiveAccount --\u003e EditAccountCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "deactivate ActiveAccount"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "EditAccountCommand -\u003e ActiveAccount: setName(name)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "activate ActiveAccount"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "ActiveAccount --\u003e EditAccountCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "deactivate ActiveAccount"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "EditAccountCommand -\u003e ActiveAccount: getAccount()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "activate ActiveAccount"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "ActiveAccount --\u003e EditAccountCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "deactivate ActiveAccount"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "EditAccountCommand -\u003e Model: setAccount(target, editedAccount)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Model --\u003e EditAccountCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "EditAccountCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "deactivate EditAccountCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "@enduml"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 73
    }
  },
  {
    "path": "docs/diagrams/FindActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "(*) --\u003e User enters command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "--\u003e if \"\" then"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "---\u003e [invalid args] \"User enters command\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    else"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -down-\u003e [valid args] \"Account is retrieved from ActiveAccount\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "--\u003e if \"\" then"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "--\u003e [expense predicate exists] \"Expense list is updated\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "else"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "--\u003e if \"\" then"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "--\u003e [revenue predicate exists] \"Revenue list is updated\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    --\u003e (*)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    else"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    --\u003e [else] (*)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "endif"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "endif"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 23
    }
  },
  {
    "path": "docs/diagrams/FindSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "participant \":CommonCentsParser\" as CommonCentsParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "participant \":FindCommandParser\" as FindCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "participant \":FindCommand\" as FindCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "box ActiveAccount ACTIVEACCOUNT_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "participant \":ActiveAccountManager\" as ActiveAccount LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "[-\u003e LogicManager : execute(\"find k/cases flowers\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "LogicManager -\u003e CommonCentsParser: parseCommand(\"find k/cases flowers\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "activate CommonCentsParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "CommonCentsParser -\u003e FindCommandParser: parse(\"find k/cases flowers\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "create FindCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "FindCommandParser -\u003e FindCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "FindCommand -\u003e FindCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "FindCommandParser --\u003e CommonCentsParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "CommonCentsParser --\u003e LogicManager"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "deactivate CommonCentsParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "LogicManager -\u003e FindCommand: execute(model, activeAccount)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "alt expenseList !\u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "FindCommand -\u003e ActiveAccount: updateFilteredExpenseList()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "activate ActiveAccount"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "ActiveAccount --\u003e FindCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "deactivate ActiveAccount"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "else"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "end"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "alt (revenueList !\u003d null)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "FindCommand -\u003e ActiveAccount: updateFilteredRevenueList()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "activate ActiveAccount"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "ActiveAccount --\u003e FindCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "deactivate ActiveAccount"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "else"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "end"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "FindCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "@enduml"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 62
    }
  },
  {
    "path": "docs/diagrams/GetTotalActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "repeat :User enters command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "repeat  while () is ([invalid args])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ":Account is retrieved from ActiveAccount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "if () then ([is expense])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ":Calculate total expenses;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "else ([is revenue])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ":Calculate total revenue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "stop"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "cheoksuanne": 19
    }
  },
  {
    "path": "docs/diagrams/GetTotalSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "participant \":CommonCentsParser\" as CommonCentsParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "participant \":GetTotalCommandParser\" as GetTotalCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "participant \":GetTotalCommand\" as GetTotalCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "box Entry MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "participant \":Category\" as Category MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "box ActiveAccount ACTIVEACCOUNT_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "participant \":ActiveAccountManager\" as ActiveAccount LOGIC_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "[-\u003e LogicManager : execute(\"total c/expense\"\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "LogicManager -\u003e CommonCentsParser: parseCommand(\"total c/expense\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "activate CommonCentsParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "CommonCentsParser -\u003e GetTotalCommandParser: parse(\"total c/expense\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "activate GetTotalCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "create GetTotalCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "GetTotalCommandParser -\u003e GetTotalCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "activate GetTotalCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "GetTotalCommand --\u003e GetTotalCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "deactivate GetTotalCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "GetTotalCommandParser --\u003e CommonCentsParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "deactivate GetTotalCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "deactivate CommonCentsParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "LogicManager -\u003e GetTotalCommand: execute(model, activeAccount)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "activate GetTotalCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "alt is expense"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "GetTotalCommand -\u003e Category: isExpense()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "activate Category"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "Category --\u003e GetTotalCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "deactivate Category"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "GetTotalCommand -\u003e ActiveAccount: getTotalExpenses()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "activate ActiveAccount"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "ActiveAccount --\u003e GetTotalCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "deactivate ActiveAccount"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "else is revenue"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "GetTotalCommand -\u003e Category: isRevenue()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "activate Category"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "Category --\u003e GetTotalCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "deactivate Category"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "GetTotalCommand -\u003e ActiveAccount: getTotalRevenue()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "activate ActiveAccount"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "ActiveAccount --\u003e GetTotalCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "deactivate ActiveAccount"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "end"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "GetTotalCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "deactivate GetTotalCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "cheoksuanne": 75
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommonCentsParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package ActiveAccount{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e\"1\" CommonCentsParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "CommonCentsParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "LogicManager -left-\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "LogicManager -left-\u003e ActiveAccount"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Command .left.\u003e Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Command .left.\u003e ActiveAccount"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 8,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Class hidden #FFFF"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ReadOnlyCommonCents \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommonCents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyCommonCents"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Package Account {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Class UniqueAccountList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class Account"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Interface ActiveAccount"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Class ActiveAccountManager"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Package Entry {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Class ExpenseList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Class RevenueList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Abstract Class Entry"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class Expense"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Class Revenue"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Class Description"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Class Amount"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "hidden .down.|\u003e Model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "CommonCents .up.|\u003e ReadOnlyCommonCents"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Model ..\u003e ObservableList"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o--\u003e \"1\" CommonCents"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o--\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .down..|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "ModelManager --\u003e Account: filtered list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "ActiveAccountManager ..|\u003e ActiveAccount"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "ActiveAccountManager o-right-\u003e \"1\" Account"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "CommonCents *--\u003e \"1\" UniqueAccountList"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "UniqueAccountList o--\u003e \"1..*\" Account"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Account *--\u003e Name"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Account *--\u003e \"1\" ExpenseList"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Account *--\u003e \"1\" RevenueList"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "ExpenseList o--\u003e \"*\" Expense"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "RevenueList o--\u003e \"*\" Revenue"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Expense .down.|\u003e Entry"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Revenue .down.|\u003e Entry"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Entry *--\u003e Description"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Entry *--\u003e Amount"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Entry *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 29,
      "-": 48
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "Interface CommonCentsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "Class JsonCommonCentsStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "StorageManager o--\u003e CommonCentsStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "JsonCommonCentsStorage .left.|\u003e CommonCentsStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "JsonCommonCentsStorage .down.\u003e JsonSerializableCommonCents"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "JsonSerializableCommonCents .right.\u003e JsonAdaptedAccount"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "JsonAdaptedAccount .right.\u003e JsonAdaptedEntry"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "JsonAdaptedEntry .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "JsonAdaptedEntry --|\u003e JsonAdaptedExpense"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "JsonAdaptedEntry --|\u003e JsonAdaptedRevenue"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 11,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "Class RevenueListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "Class ExpenseListPanel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "Class EntryCard"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "MainWindow *-down-\u003e ExpenseListPanel"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "MainWindow *-down-\u003e RevenueListPanel"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "RevenueListPanel -down-\u003e EntryCard"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "ExpenseListPanel -down-\u003e EntryCard"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "EntryCard --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "EntryCard ..\u003e Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "ExpenseListPanel -[hidden]left- RevenueListPanel"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "RevenueListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 11,
      "-": 52
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    class State1 as \"__ab0:CommonCents__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    class State2 as \"__ab1:CommonCents__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    class State3 as \"__ab2:CommonCents__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"delete 5\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    class State1 as \"__ab0:CommonCents__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    class State2 as \"__ab1:CommonCents__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    class State3 as \"__ab2:CommonCents__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 3,
      "-": 19
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"add n/David\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    class State1 as \"__ab0:CommonCents__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    class State2 as \"__ab1:CommonCents__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    class State3 as \"__ab2:CommonCents__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    class State1 as \"__ab0:CommonCents__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    class State2 as \"__ab1:CommonCents__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    class State3 as \"__ab2:CommonCents__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"list\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    class State1 as \"__ab0:CommonCents__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    class State2 as \"__ab1:CommonCents__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    class State3 as \"__ab2:CommonCents__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"clear\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    class State1 as \"__ab0:CommonCents__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    class State2 as \"__ab1:CommonCents__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    class State3 as \"__ab3:CommonCents__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "note right on link: State ab2 deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 3,
      "-": 18
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "participant \":CommonCentsParser\" as CommonCentsParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "participant \":CommonCents\" as CommonCents MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "LogicManager -\u003e CommonCentsParser : parseCommand(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "activate CommonCentsParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "CommonCentsParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "UndoCommand --\u003e CommonCentsParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "CommonCentsParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "deactivate CommonCentsParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "UndoCommand -\u003e Model : undoCommonCents()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "Model -\u003e CommonCents : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "activate CommonCents"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "CommonCents -\u003e CommonCents :resetData(ReadOnlyCommonCents)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "CommonCents --\u003e Model :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "deactivate CommonCents"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 14,
      "-": 39
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "!define ACTIVEACCOUNT_COLOR #85C1E9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "!define ACTIVEACCOUNT_COLOR_T1 #5DADE2"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "!define ACTIVEACCOUNT_COLOR_T2 #3498DB"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "!define ACTIVEACCOUNT_COLOR_T3 #2E86C1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "!define ACTIVEACCOUNT_COLOR_T4 #2874A6"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 6,
      "-": 75
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "title: Common Cents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T13-4/tp/workflows/Java CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T13-4/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T13-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T13-4/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Common Cents is a money-tracking application to help students to organise their expenses operating small businesses. While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface). \u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* The project simulates an ongoing software project for a desktop application (called _AddressBook_) used for managing contact details."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "  * It is written in OOP fashion. It provides a reasonably well-written code base bigger (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "  * It comes with a reasonable level of user and developer documentation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* For the detailed documentation of this project, see the [our Product Website](https://ay2021s1-cs2103t-t13-4.github.io/tp/)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* If you are interested in using Common Cents, head over to the [_Quick Start_ section of the User Guide]((UserGuide.html#quick-start))."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "* If you are interested about developing AddressBook, the [Developer Guide](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Acknowledgements"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 12,
      "-": 12
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "Simply add the following to (https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 1,
      "-": 393
    }
  },
  {
    "path": "src/main/java/seedu/address/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 1,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.ReadOnlyCommonCents;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.util.SampleCommonCentsUtilData;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.storage.CommonCentsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.storage.JsonCommonCentsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing CommonCents ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        CommonCentsStorage commonCentsStorage \u003d new JsonCommonCentsStorage(userPrefs.getCommonCentsFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        storage \u003d new StorageManager(commonCentsStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean isNotEmpty \u003d !model.hasNoAccount();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assert isNotEmpty;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s Common Cents and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * The data from the sample Common Cents will be used instead if {@code storage}\u0027s Common Cents is not found,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * or an empty Common Cents will be used instead if errors occur when reading {@code storage}\u0027s Common Cents."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Optional\u003cReadOnlyCommonCents\u003e commonCentsOptional;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        ReadOnlyCommonCents initialData;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            commonCentsOptional \u003d storage.readCommonCents();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            if (commonCentsOptional.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample CommonCents\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            initialData \u003d commonCentsOptional.orElseGet(SampleCommonCentsUtilData::getSampleCommonCents);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty CommonCents\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            initialData \u003d SampleCommonCentsUtilData.initEmptyCommonCents();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CommonCents\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            initialData \u003d SampleCommonCentsUtilData.initEmptyCommonCents();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CommonCents\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        primaryStage.setResizable(false);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        logger.info(\"Starting CommonCents \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping CommonCents ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 16,
      "lettuceman4": 11,
      "-": 159
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 700;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1000;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 2,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String LOG_FILE \u003d \"commoncents.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_INVALID_DISPLAYED_INDEX \u003d \"The index provided is out of bounds!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static final String MESSAGE_ENTRIES_UPDATED \u003d \"Entries updated!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static final String MESSAGE_EMPTY_FILTERED_LIST \u003d \"No entries found!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_MULTIPLE_PREFIXES \u003d \"Each of these prefixes can only appear once:\\n%1$s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 3,
      "lettuceman4": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/category/Category.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.commons.core.category;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Represents the category of an add command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCategory(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Category can only be e, r, expense or revenue and \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            + \"its not case sensitive.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            \"([Ee]([Xx][Pp][Ee][Nn][Ss][Ee])?|([Rr]([Ee][Vv][Ee][Nn][Uu][Ee])?))\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String EXPENSE_REGEX \u003d \"[Ee]([Xx][Pp][Ee][Nn][Ss][Ee])?\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String REVENUE_REGEX \u003d \"([Rr]([Ee][Vv][Ee][Nn][Uu][Ee])?)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Constructs a {@code Category}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * @param category A valid category to determine Entry type."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public Category(String category) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        checkArgument(isValidCategory(category), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.value \u003d category;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns true if a given string is a valid category."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static boolean isValidCategory(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean isExpense() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return value.matches(EXPENSE_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean isRevenue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return value.matches(REVENUE_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                || (other instanceof Category // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                \u0026\u0026 value.equals(((Category) other).value)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.ReadOnlyCommonCents;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Revenue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns the CommonCents."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * @see seedu.address.model.Model#getCommonCents()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    ReadOnlyCommonCents getCommonCents();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Returns the names of the active account"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    Name getActiveAccountName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of accounts. */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    ObservableList\u003cAccount\u003e getFilteredAccountList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of expenses. */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of revenues. */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    ObservableList\u003cRevenue\u003e getFilteredRevenueList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    double getTotalRevenue();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    double getTotalExpense();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns the user prefs\u0027 Common Cents file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    Path getCommonCentsFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 13,
      "lettuceman4": 13,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.parser.CommonCentsParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.ReadOnlyCommonCents;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.ActiveAccountManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Expense;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Revenue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final int FIRST_ACCOUNT_INDEX \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final CommonCentsParser commonCentsParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final ActiveAccount activeAccount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.activeAccount \u003d new ActiveAccountManager(model.getFilteredAccountList().get(FIRST_ACCOUNT_INDEX));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        commonCentsParser \u003d new CommonCentsParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // Logging, safe to ignore"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // Parses user input from String to Command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Command command \u003d commonCentsParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // Executes the Command and stores the result in commandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        commandResult \u003d command.execute(model, activeAccount);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            // Since the model is modified previously, the current model is saved through the storage"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            storage.saveCommonCents(model.getCommonCents());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ReadOnlyCommonCents getCommonCents() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return model.getCommonCents();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ObservableList\u003cAccount\u003e getFilteredAccountList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return model.getFilteredAccountList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public Name getActiveAccountName() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return activeAccount.getAccount().getName();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return activeAccount.getFilteredExpenseList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ObservableList\u003cRevenue\u003e getFilteredRevenueList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return activeAccount.getFilteredRevenueList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public double getTotalRevenue() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return activeAccount.getTotalRevenue();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public double getTotalExpense() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return activeAccount.getTotalExpenses();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public Path getCommonCentsFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return model.getCommonCentsFilePath();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 34,
      "lettuceman4": 12,
      "nicholas-gcc": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddAccountCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Adds a entry to the Common Cents."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class AddAccountCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"newacc\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an Account to \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            + \"Common Cents\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "            + \"Parameters: \" + PREFIX_NAME + \"ACCOUNT NAME\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            + \"Example: \" + PREFIX_NAME + \"My Non-Biz Account\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String PREFIXES \u003d PREFIX_NAME + \"ACCOUNT NAME\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New account added! %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACCOUNT \u003d \"This account already exists in the app!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final Account account;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Creates an AddAccountCommand to add the specified {@code Account}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public AddAccountCommand(Account account) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(account);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.account \u003d account;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public CommandResult execute(Model model, ActiveAccount activeAccount) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireAllNonNull(model, activeAccount);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (model.hasAccount(this.account)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ACCOUNT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        model.addAccount(this.account);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return CommandResultFactory"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            .createCommandResultForEntryListChangingCommand(String.format(MESSAGE_SUCCESS, this.account));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                || (other instanceof AddAccountCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "                \u0026\u0026 account.getName().equals(((AddAccountCommand) other).account.getName()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 53,
      "lettuceman4": 2,
      "cheoksuanne": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static seedu.address.model.account.ActiveAccount.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static seedu.address.model.account.ActiveAccount.PREDICATE_SHOW_ALL_REVENUE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Entry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Revenue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Adds a entry to Common Cents."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an entry (revenue or expense) to \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            + \"Common Cents\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            + PREFIX_CATEGORY + \"revenue \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Sale of clothes \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            + PREFIX_AMOUNT + \"200 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            + PREFIX_TAG + \"blogshop \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            + PREFIX_TAG + \"eCommerce\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String PREFIXES \u003d PREFIX_CATEGORY + \"CATEGORY\\n\" + PREFIX_DESCRIPTION + \"DESCRIPTION\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New entry added! %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final Entry entry;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Entry}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public AddCommand(Entry entry) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        this.entry \u003d entry;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public CommandResult execute(Model model, ActiveAccount activeAccount) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireAllNonNull(model, activeAccount);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // Set previous state for undo before new entry is added"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccount.setPreviousState();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (entry instanceof Expense) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            activeAccount.addExpense((Expense) entry);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            assert entry instanceof Revenue;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            activeAccount.addRevenue((Revenue) entry);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccount.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccount.updateFilteredRevenueList(PREDICATE_SHOW_ALL_REVENUE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        model.setAccount(activeAccount.getAccount());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return CommandResultFactory"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            .createCommandResultForEntryListChangingCommand(String.format(MESSAGE_SUCCESS, this.entry));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                \u0026\u0026 entry.equals(((AddCommand) other).entry));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 18,
      "lettuceman4": 2,
      "nicholas-gcc": 21,
      "jordanyoong": 2,
      "-": 36,
      "cheoksuanne": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.commons.core.category.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": " * Clears all entries in the specified revenue/expense list of the account."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            + \": Clears all entries in the specified entry (expense/revenue) list.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            + \"Parameters: \" + \"[\" + PREFIX_CATEGORY + \"CATEGORY]\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_CATEGORY + \"CATEGORY\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String PREFIXES \u003d PREFIX_CATEGORY + \"CATEGORY\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_CLEAR_ENTRY_SUCCESS \u003d \"Cleared all %1$s\" + \"s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_CLEAR_BOTH_CATEGORY_SUCCESS \u003d \"Cleared all expenses and revenues\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final Category NO_CATEGORY \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    private final Category category;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Creates an ClearCommand to clear expenses or revenues based on {@code Category}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public ClearCommand(Category category) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Creates an ClearCommand to clear all expenses and revenues."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ClearCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.category \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public CommandResult execute(Model model, ActiveAccount activeAccount) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireAllNonNull(model, activeAccount);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean hasNoCategory \u003d category \u003d\u003d NO_CATEGORY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccount.setPreviousState();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (hasNoCategory) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            activeAccount.clearExpenses();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            activeAccount.clearRevenues();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            boolean isExpense \u003d this.category.isExpense();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            boolean isRevenue \u003d this.category.isRevenue();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            if (isExpense) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                activeAccount.clearExpenses();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                assert isRevenue;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                activeAccount.clearRevenues();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        model.setAccount(activeAccount.getAccount());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (hasNoCategory) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            return CommandResultFactory"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                    .createCommandResultForEntryListChangingCommand("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                            MESSAGE_CLEAR_BOTH_CATEGORY_SUCCESS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            return CommandResultFactory"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                    .createCommandResultForEntryListChangingCommand("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                            String.format(MESSAGE_CLEAR_ENTRY_SUCCESS, category));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                || (other instanceof ClearCommand) // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                \u0026\u0026 category.equals(((ClearCommand) other).category); // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 37,
      "lettuceman4": 1,
      "jordanyoong": 31,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public abstract CommandResult execute(Model model, ActiveAccount activeAccount) throws CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholas-gcc": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private final boolean isShowHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private final boolean isExit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private final boolean isEntryListChange;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean isEntryListChange) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        this.isShowHelp \u003d showHelp;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        this.isExit \u003d exit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        this.isEntryListChange \u003d isEntryListChange;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return isShowHelp;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public boolean isEntryListChange() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return isEntryListChange;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                \u0026\u0026 isShowHelp \u003d\u003d otherCommandResult.isShowHelp"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                \u0026\u0026 isExit \u003d\u003d otherCommandResult.isExit;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return Objects.hash(feedbackToUser, isShowHelp, isExit);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 17,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResultFactory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "public class CommandResultFactory {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static CommandResult createCommandResultForExitCommand(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return new CommandResult(message, false, true, false);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static CommandResult createCommandResultForHelpCommand(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return new CommandResult(message, true, false, false);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static CommandResult createCommandResultForEntryListChangingCommand(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return new CommandResult(message, false, false, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static CommandResult createDefaultCommandResult(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return new CommandResult(message, false, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 19,
      "nicholas-gcc": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteAccountCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Deletes an account identified using it\u0027s displayed index from CommonCents"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class DeleteAccountCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteacc\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            + \": Deletes the Account identified by the index number used in the displayed account list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer). \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_DELETE_ACCOUNT_SUCCESS \u003d \"Deleted Account: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_ONE_ACCOUNT_LEFT \u003d \"You can\u0027t delete your only account left!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_ACTIVE_ACCOUNT \u003d \"The account you intend to delete is currently active!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final int SIZE_OF_ACCOUNT_LIST_WITH_ONE_ACCOUNT \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Creates an DeleteAccountCommand to delete the specified {@code Account}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public DeleteAccountCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public CommandResult execute(Model model, ActiveAccount activeAccount) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireAllNonNull(model, activeAccount);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        List\u003cAccount\u003e accounts \u003d model.getFilteredAccountList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        int index \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean isInvalidIndex \u003d index \u003e\u003d accounts.size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (isInvalidIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean leftWithOneAccount \u003d accounts.size() \u003d\u003d SIZE_OF_ACCOUNT_LIST_WITH_ONE_ACCOUNT;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (leftWithOneAccount) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new CommandException(MESSAGE_ONE_ACCOUNT_LEFT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account currentActiveAccount \u003d activeAccount.getAccount();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account toBeDeleted \u003d accounts.get(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean isAccountActive \u003d currentActiveAccount.isSameAccount(toBeDeleted);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (isAccountActive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new CommandException(MESSAGE_ACTIVE_ACCOUNT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        model.deleteAccount(toBeDeleted);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return CommandResultFactory"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            .createCommandResultForEntryListChangingCommand(String.format(MESSAGE_DELETE_ACCOUNT_SUCCESS, toBeDeleted));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                || (other instanceof DeleteAccountCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteAccountCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 74,
      "lettuceman4": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.commons.core.category.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Entry;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.model.account.entry.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.model.account.entry.Revenue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": " * Deletes an entry identified using it\u0027s displayed index from the revenue/expense list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            + \": Deletes the Entry identified by the index number used in the displayed entry list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) c/CATEGORY\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_CATEGORY + \"revenue\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String PREFIXES \u003d PREFIX_CATEGORY + \"CATEGORY\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_DELETE_ENTRY_SUCCESS \u003d \"Deleted Entry: [%1$s]\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    private final Category category;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Creates an DeleteCommand to delete the specified {@code Entry}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public DeleteCommand(Index targetIndex, Category category) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public CommandResult execute(Model model, ActiveAccount activeAccount) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireAllNonNull(model, activeAccount);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        ObservableList\u003cExpense\u003e expenseList \u003d activeAccount.getFilteredExpenseList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        ObservableList\u003cRevenue\u003e revenueList \u003d activeAccount.getFilteredRevenueList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        int index \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        boolean isExpense \u003d this.category.isExpense();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        boolean isRevenue \u003d this.category.isRevenue();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean isInvalidExpenseIndex \u003d isExpense \u0026\u0026 (index \u003e\u003d expenseList.size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean isInvalidRevenueIndex \u003d isRevenue \u0026\u0026 (index \u003e\u003d revenueList.size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (isInvalidExpenseIndex || isInvalidRevenueIndex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // Set previous state for undo before entry is deleted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccount.setPreviousState();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Entry entry;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        if (isExpense) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            Expense expenseToDelete \u003d expenseList.get(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            activeAccount.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            entry \u003d expenseToDelete;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            assert isRevenue;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            Revenue revenueToDelete \u003d revenueList.get(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            activeAccount.deleteRevenue(revenueToDelete);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            entry \u003d revenueToDelete;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        model.setAccount(activeAccount.getAccount());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return CommandResultFactory"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .createCommandResultForEntryListChangingCommand(String.format(MESSAGE_DELETE_ENTRY_SUCCESS, entry));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex))"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                \u0026\u0026 category.equals(((DeleteCommand) other).category); // state check"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 28,
      "lettuceman4": 1,
      "jordanyoong": 23,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditAccountNameCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Edits the details of an existing account in Common Cents."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class EditAccountNameCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editacc\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the current Account\u0027s name\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            + \"Parameters: \" + PREFIX_NAME + \"ACCOUNT NAME\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            + \"Example: \" + PREFIX_NAME + \"My flower shop\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String PREFIXES \u003d PREFIX_NAME + \"ACCOUNT NAME\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Name for account changed from %1$s -\u003e %2$s!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_DUPLICATED_NAME \u003d \"There is already another account with this name!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public final Name name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Creates an EditAccountCommand to edit the current {@code ActiveAccount}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public EditAccountNameCommand(Name name) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public CommandResult execute(Model model, ActiveAccount activeAccount) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireAllNonNull(model, activeAccount);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account previousAccount \u003d activeAccount.getAccount();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account accountForCheck \u003d new Account(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (model.hasAccount(accountForCheck)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATED_NAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccount.setName(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account newAccount \u003d activeAccount.getAccount();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        model.setAccount(previousAccount, newAccount);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Name previousName \u003d previousAccount.getName();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Name newName \u003d newAccount.getName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return CommandResultFactory"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            .createDefaultCommandResult(String.format(MESSAGE_SUCCESS, previousName.toString(), newName.toString()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                || (other instanceof EditAccountNameCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                \u0026\u0026 name.equals(((EditAccountNameCommand) other).name));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 62,
      "lettuceman4": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.commons.core.category.Category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Entry;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Expense;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Revenue;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Edits an entry in Common Cents."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the entry identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            + \"by the index number used in the expense/revenue list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            + PREFIX_CATEGORY + \"revenue\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            + PREFIX_DESCRIPTION + \"selling clothes \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            + PREFIX_AMOUNT + \"20\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String PREFIXES \u003d PREFIX_CATEGORY + \"CATEGORY\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION]\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT]\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Edited Entry: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    private EditEntryDescriptor editEntryDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     * Creates an EditAccountCommand to edit the current {@code ActiveAccount}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public EditCommand(Index index, EditEntryDescriptor editEntryDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        this.editEntryDescriptor \u003d editEntryDescriptor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public CommandResult execute(Model model, ActiveAccount activeAccount) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assert(activeAccount !\u003d null \u0026\u0026 model !\u003d null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        List\u003c? extends Entry\u003e lastShownList;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        if (editEntryDescriptor.isEntryExpense()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            lastShownList \u003d activeAccount.getFilteredExpenseList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            assert editEntryDescriptor.isEntryRevenue();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            lastShownList \u003d activeAccount.getFilteredRevenueList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Entry entryToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Entry editedEntry \u003d createEditedEntry(entryToEdit, editEntryDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // Set previous state for undo before entry is edited"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccount.setPreviousState();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        if (entryToEdit instanceof Expense) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            activeAccount.setExpense((Expense) entryToEdit, (Expense) editedEntry);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            activeAccount.updateFilteredExpenseList(ActiveAccount.PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            assert editedEntry instanceof Revenue;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            activeAccount.setRevenue((Revenue) entryToEdit, (Revenue) editedEntry);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            activeAccount.updateFilteredRevenueList(ActiveAccount.PREDICATE_SHOW_ALL_REVENUE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        model.setAccount(activeAccount.getAccount());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return CommandResultFactory"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            .createCommandResultForEntryListChangingCommand(String.format(MESSAGE_SUCCESS, editedEntry));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    private static Entry createEditedEntry(Entry entryToEdit, EditEntryDescriptor editEntryDescriptor) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assert entryToEdit !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Description updatedDescription \u003d editEntryDescriptor.getDescription()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                .orElse(entryToEdit.getDescription());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Amount updatedAmount \u003d editEntryDescriptor.getAmount().orElse(entryToEdit.getAmount());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editEntryDescriptor.getTags().orElse(entryToEdit.getTags());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        if (entryToEdit instanceof Revenue) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            return new Revenue(updatedDescription, updatedAmount, updatedTags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            return new Expense(updatedDescription, updatedAmount, updatedTags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                \u0026\u0026 editEntryDescriptor.equals(e.editEntryDescriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Stores the details to edit the entry with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * corresponding field value of the entry."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public static class EditEntryDescriptor {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        private Category category;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        public EditEntryDescriptor() {}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        public EditEntryDescriptor(EditEntryDescriptor toCopy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            setCategory(toCopy.category);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        public boolean isEntryExpense() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            return getCategory().isExpense();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        public boolean isEntryRevenue() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            return getCategory().isRevenue();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "         */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, amount, tags);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        public void setCategory(Category category) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            this.category \u003d category;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        public Category getCategory() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            return category;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            if (!(other instanceof EditEntryDescriptor)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            EditEntryDescriptor e \u003d (EditEntryDescriptor) other;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            return getCategory().equals(e.getCategory())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 9,
      "lettuceman4": 4,
      "nicholas-gcc": 95,
      "-": 130,
      "cheoksuanne": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Common Cents as requested ... Good bye.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public CommandResult execute(Model model, ActiveAccount activeAccount) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return CommandResultFactory.createCommandResultForExitCommand(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 1,
      "lettuceman4": 1,
      "nicholas-gcc": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_KEYWORDS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.ExpenseDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.RevenueDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static final String EMPTY_KEYWORD_LIST_MESSAGE \u003d \"Keyword list cannot be empty! Here are some examples\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        + \"Parameters: \" + PREFIX_KEYWORDS + \"KEYWORDS \" + \"[\" + PREFIX_CATEGORY + \"CATEGORY\" + \"]\" + \"\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        + \"Example 1: \" + COMMAND_WORD + \" k/canvas cases\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        + \"Example 2: \" + COMMAND_WORD + \" k/canvas c/expense\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        + \"Example 3: \" + COMMAND_WORD + \" k/cases c/revenue\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all entries whose descriptions contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        + \"the specified keywords (case-insensitive) and displays them as lists with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        + \"Parameters: find k/KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        + \"Example 1: \" + COMMAND_WORD + \" k/canvas cases\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        + \"Example 2: \" + COMMAND_WORD + \" k/canvas c/expense\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        + \"Example 3: \" + COMMAND_WORD + \" k/cases c/revenue\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String PREFIXES \u003d PREFIX_KEYWORDS + \"KEYWORDS\\n\" + \"[\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY\" + \"]\" + \"\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private final ExpenseDescriptionContainsKeywordsPredicate expensePredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private final RevenueDescriptionContainsKeywordsPredicate revenuePredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Creates a FindCommand with a given predicate to find revenues with the given keywords."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public FindCommand(RevenueDescriptionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        this.expensePredicate \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        this.revenuePredicate \u003d predicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Creates a FindCommand with a given predicate to find expenses with the given keywords."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public FindCommand(ExpenseDescriptionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        this.expensePredicate \u003d predicate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        this.revenuePredicate \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Creates a FindCommand with a given predicate to find expenses and revenues with the given keywords."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public FindCommand(ExpenseDescriptionContainsKeywordsPredicate expensePredicate,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                       RevenueDescriptionContainsKeywordsPredicate revenuePredicate) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        this.expensePredicate \u003d expensePredicate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        this.revenuePredicate \u003d revenuePredicate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public CommandResult execute(Model model, ActiveAccount activeAccount) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        requireAllNonNull(model, activeAccount);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assert (activeAccount !\u003d null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        if (expensePredicate !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            activeAccount.updateFilteredExpenseList(expensePredicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        if (revenuePredicate !\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            activeAccount.updateFilteredRevenueList(revenuePredicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        boolean noExpenseFoundWithOnlyExpensePredicate \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            activeAccount.getFilteredExpenseList().size() \u003d\u003d 0 \u0026\u0026 expensePredicate !\u003d null \u0026\u0026 revenuePredicate \u003d\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        boolean noRevenueFoundWithOnlyRevenuePredicate \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            activeAccount.getFilteredRevenueList().size() \u003d\u003d 0 \u0026\u0026 revenuePredicate !\u003d null \u0026\u0026 expensePredicate \u003d\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        boolean noEntryFound \u003d activeAccount.getFilteredExpenseList().size() \u003d\u003d 0"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                            \u0026\u0026 activeAccount.getFilteredRevenueList().size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        if (noEntryFound || noExpenseFoundWithOnlyExpensePredicate || noRevenueFoundWithOnlyRevenuePredicate) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            return CommandResultFactory.createDefaultCommandResult(Messages.MESSAGE_EMPTY_FILTERED_LIST);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            return CommandResultFactory.createDefaultCommandResult(Messages.MESSAGE_ENTRIES_UPDATED);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        if (!(other instanceof FindCommand)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        FindCommand otherFindCommand \u003d (FindCommand) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        if (expensePredicate \u003d\u003d null || revenuePredicate \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            if (expensePredicate !\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                return expensePredicate.equals(otherFindCommand.expensePredicate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            } else if (revenuePredicate !\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                return revenuePredicate.equals(otherFindCommand.revenuePredicate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                return true; // if both predicates are null"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            return revenuePredicate.equals(otherFindCommand.revenuePredicate)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                \u0026\u0026 expensePredicate.equals(otherFindCommand.expensePredicate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 6,
      "lettuceman4": 86,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GetProfitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": " * Calculates the profit in an account."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "public class GetProfitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"profit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Profit: \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public CommandResult execute(Model model, ActiveAccount activeAccount) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        requireAllNonNull(model, activeAccount);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        double profits \u003d activeAccount.getProfits();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return CommandResultFactory.createDefaultCommandResult(MESSAGE_SUCCESS + String.format(\"%.2f\", profits));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 1,
      "lettuceman4": 1,
      "cheoksuanne": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public CommandResult execute(Model model, ActiveAccount activeAccount) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return CommandResultFactory.createCommandResultForHelpCommand(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 1,
      "nicholas-gcc": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListAccountCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Lists all the account in Common Cents oto the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class ListAccountCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listacc\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_SUCCESS_INTRO \u003d \"Listed all accounts:\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String NEW_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String EMPTY_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String DOT \u003d \".\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final int STARTING_ACC_INDEX \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public CommandResult execute(Model model, ActiveAccount activeAccount) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireAllNonNull(model, activeAccount);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        List\u003cAccount\u003e accounts \u003d model.getFilteredAccountList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        String messageSuccess \u003d accountsToString(accounts);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return CommandResultFactory.createDefaultCommandResult(messageSuccess);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Generates a meaningful String message containing all the accounts."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * @param accounts Account list of the model."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * @return String containing names of the accounts."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public String accountsToString(List\u003cAccount\u003e accounts) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        sb.append(MESSAGE_SUCCESS_INTRO).append(NEW_LINE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        int index \u003d STARTING_ACC_INDEX;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        for (Account account: accounts) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            // Account index"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            sb.append(index).append(DOT).append(EMPTY_SPACE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            // Account details"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            sb.append(account.toString()).append(EMPTY_SPACE).append(NEW_LINE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 50,
      "lettuceman4": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static seedu.address.model.account.ActiveAccount.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static seedu.address.model.account.ActiveAccount.PREDICATE_SHOW_ALL_REVENUE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Lists all entries."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all entries\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public CommandResult execute(Model model, ActiveAccount activeAccount) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireAllNonNull(model, activeAccount);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        activeAccount.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        activeAccount.updateFilteredRevenueList(PREDICATE_SHOW_ALL_REVENUE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return CommandResultFactory.createDefaultCommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 3,
      "lettuceman4": 8,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SwitchAccountCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static seedu.address.model.account.ActiveAccount.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static seedu.address.model.account.ActiveAccount.PREDICATE_SHOW_ALL_REVENUE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Switches the account details on the UI to that of the targeted account"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * identified using it\u0027s displayed index from CommonCents."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class SwitchAccountCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switchacc\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            + \": Switches the current account displayed to another account at the targeted index.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer). \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_SWITCH_ACCOUNT_SUCCESS \u003d \"Account switch! Current account: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_ACTIVE_ACCOUNT \u003d \"You are already on the account!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Creates an SwitchAccountCommand to delete the specified {@code Account}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public SwitchAccountCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public CommandResult execute(Model model, ActiveAccount activeAccount) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireAllNonNull(model, activeAccount);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        List\u003cAccount\u003e accounts \u003d model.getFilteredAccountList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        int index \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean isInvalidIndex \u003d index \u003e\u003d accounts.size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (isInvalidIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account currentActiveAccount \u003d activeAccount.getAccount();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account toBeSwitched \u003d accounts.get(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean isAccountActive \u003d currentActiveAccount.isSameAccount(toBeSwitched);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (isAccountActive) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new CommandException(MESSAGE_ACTIVE_ACCOUNT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccount.setActiveAccount(toBeSwitched);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccount.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccount.updateFilteredRevenueList(PREDICATE_SHOW_ALL_REVENUE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccount.removePreviousState();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return CommandResultFactory.createCommandResultForEntryListChangingCommand("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                String.format(MESSAGE_SWITCH_ACCOUNT_SUCCESS, toBeSwitched));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                || (other instanceof SwitchAccountCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SwitchAccountCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 70,
      "lettuceman4": 2,
      "cheoksuanne": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Undo the latest command executed in CommonCents."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Previous command undone!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_NO_PREVIOUS_COMMAND \u003d \"You did not input any command prior to this!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public CommandResult execute(Model model, ActiveAccount activeAccount) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireAllNonNull(model, activeAccount);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (activeAccount.hasNoPreviousState()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new CommandException(MESSAGE_NO_PREVIOUS_COMMAND);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccount.returnToPreviousState();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        model.setAccount(activeAccount.getAccount());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return CommandResultFactory.createCommandResultForEntryListChangingCommand(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 30,
      "lettuceman4": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddAccountCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_PREFIXES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.commands.AddAccountCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.parser.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Parses input arguments and creates a new AddAccountCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class AddAccountCommandParser implements Parser\u003cAddAccountCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddAccountCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * and returns an AddAccountCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public AddAccountCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        boolean isPrefixPresent \u003d arePrefixesPresent(argMultimap, PREFIX_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean isPreambleEmpty \u003d argMultimap.isPreambleEmpty();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!isPrefixPresent || !isPreambleEmpty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAccountCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean areNumberOfPrefixCorrect \u003d ParserUtil.areNumberOfPrefixesOnlyOne(argMultimap, PREFIX_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!areNumberOfPrefixCorrect) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MULTIPLE_PREFIXES, AddAccountCommand.PREFIXES));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account account \u003d new Account(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return new AddAccountCommand(account);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 49,
      "cheoksuanne": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_PREFIXES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.commons.core.category.Category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.parser.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Entry;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Expense;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Revenue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CATEGORY, PREFIX_DESCRIPTION, PREFIX_AMOUNT, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean arePrefixPresent \u003d ParserUtil.arePrefixesPresent(argMultimap,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                PREFIX_CATEGORY, PREFIX_DESCRIPTION, PREFIX_AMOUNT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean isPreambleEmpty \u003d argMultimap.isPreambleEmpty();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!arePrefixPresent || !isPreambleEmpty) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean areNumberOfPrefixCorrect \u003d ParserUtil.areNumberOfPrefixesOnlyOne(argMultimap, PREFIX_CATEGORY,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                PREFIX_DESCRIPTION, PREFIX_AMOUNT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!areNumberOfPrefixCorrect) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MULTIPLE_PREFIXES, AddCommand.PREFIXES));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Entry entry;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (category.isExpense()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            entry \u003d new Expense(description, amount, tagList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            assert category.isRevenue();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            entry \u003d new Revenue(description, amount, tagList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return new AddCommand(entry);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 38,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClearCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.commons.core.category.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.logic.parser.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "public class ClearCommandParser implements Parser\u003cClearCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClearCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     * and returns a ClearCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public ClearCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        boolean ifNoCategory \u003d !ParserUtil.arePrefixesPresent(argMultimap, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (ifNoCategory) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            boolean areInvalidArgs \u003d !argMultimap.isPreambleEmpty();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            if (areInvalidArgs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                        String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ClearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean areNumberOfPrefixCorrect \u003d ParserUtil.areNumberOfPrefixesOnlyOne(argMultimap, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!areNumberOfPrefixCorrect) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                    String.format(Messages.MESSAGE_MULTIPLE_PREFIXES, ClearCommand.PREFIXES));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        return new ClearCommand(category);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 18,
      "lettuceman4": 1,
      "jordanyoong": 30,
      "cheoksuanne": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CommonCentsParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.commands.AddAccountCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.commands.DeleteAccountCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.commands.EditAccountNameCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.logic.commands.GetProfitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.commands.ListAccountCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.commands.SwitchAccountCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class CommonCentsParser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // Entry-level Commands"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            return new ClearCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        case GetProfitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "            return new GetProfitCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // Account-level Commands"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        case AddAccountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            return new AddAccountCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        case EditAccountNameCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            return new EditAccountNameCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        case DeleteAccountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            return new DeleteAccountCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        case SwitchAccountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            return new SwitchAccountCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        case ListAccountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            return new ListAccountCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 28,
      "jordanyoong": 3,
      "-": 71,
      "cheoksuanne": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteAccountCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.commands.DeleteAccountCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Parses input arguments and creates a new DeleteAccountCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class DeleteAccountCommandParser implements Parser\u003cDeleteAccountCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteAccountCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * and returns a DeleteAccountCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public DeleteAccountCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            return new DeleteAccountCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAccountCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_PREFIXES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.commons.core.category.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.logic.parser.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean arePrefixPresent \u003d ParserUtil.arePrefixesPresent(argMultimap, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean isPreambleEmpty \u003d argMultimap.isPreambleEmpty();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!arePrefixPresent || isPreambleEmpty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean areNumberOfPrefixCorrect \u003d ParserUtil.areNumberOfPrefixesOnlyOne(argMultimap, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!areNumberOfPrefixCorrect) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MULTIPLE_PREFIXES, DeleteCommand.PREFIXES));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        return new DeleteCommand(index, category);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 14,
      "jordanyoong": 14,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditAccountNameCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_PREFIXES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.commands.EditAccountNameCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.parser.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Parses input arguments and creates a new EditAccountCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class EditAccountNameCommandParser implements Parser\u003cEditAccountNameCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditAccountCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * and returns an EditAccountCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public EditAccountNameCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean isPrefixPresent \u003d ParserUtil.arePrefixesPresent(argMultimap, PREFIX_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean isPreambleEmpty \u003d argMultimap.isPreambleEmpty();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!isPrefixPresent || !isPreambleEmpty) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                    EditAccountNameCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean areNumberOfPrefixCorrect \u003d ParserUtil.areNumberOfPrefixesOnlyOne(argMultimap, PREFIX_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!areNumberOfPrefixCorrect) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MULTIPLE_PREFIXES, EditAccountNameCommand.PREFIXES));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return new EditAccountNameCommand(name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_PREFIXES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.parser.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CATEGORY, PREFIX_DESCRIPTION, PREFIX_AMOUNT, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // Parsing index"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                    EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // Check if there is category"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean isCategoryPrefixPresent \u003d ParserUtil.arePrefixesPresent(argMultimap, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!isCategoryPrefixPresent) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                    EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // Check if category prefix is only used once"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean isNumberOfCategoryPrefixCorrect \u003d ParserUtil.areNumberOfPrefixesOnlyOne(argMultimap, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // Check if optional prefixes are only used once or none"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean isNumberOfOtherPrefixCorrect \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                ParserUtil.areNumberOfPrefixesOneOrNone(argMultimap, PREFIX_DESCRIPTION, PREFIX_AMOUNT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!isNumberOfCategoryPrefixCorrect || !isNumberOfOtherPrefixCorrect) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MULTIPLE_PREFIXES, EditCommand.PREFIXES));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // Parse category"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        EditEntryDescriptor editEntryDescriptor \u003d new EditEntryDescriptor();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        editEntryDescriptor.setCategory(ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // Parse description if have"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (ParserUtil.arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            editEntryDescriptor.setDescription(ParserUtil.parseDescription(argMultimap"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                    .getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // Parse amount if have"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (ParserUtil.arePrefixesPresent(argMultimap, PREFIX_AMOUNT)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            editEntryDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // Parse tags if have"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editEntryDescriptor::setTags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        if (!editEntryDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return new EditCommand(index, editEntryDescriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 26,
      "nicholas-gcc": 22,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_PREFIXES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_KEYWORDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.commons.core.category.Category;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.logic.parser.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.ExpenseDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.RevenueDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_CATEGORY, PREFIX_KEYWORDS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        handleArgMultimapException(argMultimap);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        List\u003cString\u003e keywords \u003d ParserUtil.parseKeywords(argMultimap.getValue(PREFIX_KEYWORDS).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        handleEmptyKeywordListException(keywords);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        boolean isCategoryPrefixPresent \u003d ParserUtil.arePrefixesPresent(argMultimap, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        if (isCategoryPrefixPresent) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            if (category.isExpense()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                return new FindCommand(new ExpenseDescriptionContainsKeywordsPredicate(keywords));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                assert category.isRevenue();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                return new FindCommand(new RevenueDescriptionContainsKeywordsPredicate(keywords));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            return new FindCommand(new ExpenseDescriptionContainsKeywordsPredicate(keywords),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                new RevenueDescriptionContainsKeywordsPredicate(keywords));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private void handleArgMultimapException(ArgumentMultimap multimap) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        boolean isKeywordPrefixPresent \u003d ParserUtil.arePrefixesPresent(multimap, PREFIX_KEYWORDS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        boolean isPreambleEmpty \u003d multimap.getPreamble().isEmpty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // Check if there is a keyword prefix and no preambles"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!isKeywordPrefixPresent || !isPreambleEmpty) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // Check if keyword prefix are only used once or none"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        boolean isNumberOfKeywordPrefixCorrect \u003d ParserUtil.areNumberOfPrefixesOnlyOne(multimap, PREFIX_KEYWORDS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // Check if optional prefixes are only used once or none"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean isNumberOfOtherPrefixCorrect \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            ParserUtil.areNumberOfPrefixesOneOrNone(multimap, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!isNumberOfKeywordPrefixCorrect || !isNumberOfOtherPrefixCorrect) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MULTIPLE_PREFIXES, FindCommand.PREFIXES));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private void handleEmptyKeywordListException(List\u003cString\u003e keywords) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // Check if keyword list is empty"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        boolean isKeywordListEmpty \u003d keywords.size() \u003d\u003d 1 \u0026\u0026 keywords.get(0).equals(\"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        if (isKeywordListEmpty) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.EMPTY_KEYWORD_LIST_MESSAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 11,
      "lettuceman4": 48,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SwitchAccountCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.commands.SwitchAccountCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Parses input arguments and creates a new DeleteAccountCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class SwitchAccountCommandParser implements Parser\u003cSwitchAccountCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SwitchAccountCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * and returns a SwitchAccountCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public SwitchAccountCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            return new SwitchAccountCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchAccountCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/util/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final int ONE_VALUE \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Checks if the preamble is empty."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean isPreambleEmpty() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return getPreamble().isEmpty();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Checks if there is exactly one value for the prefix."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean hasOnlyOneValue(Prefix prefix) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return values.size() \u003d\u003d ONE_VALUE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Checks if there are more than one values for the prefix."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean hasNotMoreThanOneValue(Prefix prefix) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        List\u003cString\u003e value \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return value.size() \u003c\u003d ONE_VALUE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 28,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/util/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 3,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/util/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /* Account Commands Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /* Entry Commands Prefix definitions */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    // To determine whether an expense or a revenue is added"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static final Prefix PREFIX_KEYWORDS \u003d new Prefix(\"k/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 11,
      "lettuceman4": 1,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/util/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.commons.core.category.Category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Parses a {@code String category} into a {@code Category}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * @throws ParseException if the given {@code category} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static Category parseCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!Category.isValidCategory(trimmedCategory)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new ParseException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return new Category(trimmedCategory);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Parses a {@code String amount} into a {@code Amount}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static Amount parseAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        String trimmedAmount \u003d amount.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!Amount.isValidAmount(trimmedAmount)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return new Amount(trimmedAmount);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Parses {@code String keywords} into a {@code List\u003cString\u003e}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static List\u003cString\u003e parseKeywords(String keywords) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        requireNonNull(keywords);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        String trimmedKeywords \u003d keywords.trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        String[] splitKeywords \u003d trimmedKeywords.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return Arrays.asList(splitKeywords);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns true if there is a correct number of values for each prefix in the given"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static boolean areNumberOfPrefixesOnlyOne(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return Stream.of(prefixes).allMatch(argumentMultimap::hasOnlyOneValue);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns true if there is a correct number of values for each prefix in the given"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static boolean areNumberOfPrefixesOneOrNone(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return Stream.of(prefixes).allMatch(argumentMultimap::hasNotMoreThanOneValue);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 60,
      "lettuceman4": 22,
      "nicholas-gcc": 1,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CommonCents.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "//import seedu.address.model.account.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.UniqueAccountList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Wraps all data at the money-tracker level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Duplicate accounts are not allowed (by .isSameAccount comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class CommonCents implements ReadOnlyCommonCents {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    //private static final String ACCOUNT_NAME \u003d \"General account\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    //private static final Account GENERAL_ACCOUNT \u003d new Account(new Name(ACCOUNT_NAME));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final UniqueAccountList accounts;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        accounts \u003d new UniqueAccountList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        //accounts.add(GENERAL_ACCOUNT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public CommonCents() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Creates a CommonCents using the Accounts in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public CommonCents(ReadOnlyCommonCents toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Replaces the contents of the account list with {@code accounts}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * {@code accounts} must not contain duplicate accounts."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setAccounts(List\u003cAccount\u003e accounts) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.accounts.setAccounts(accounts);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Resets the existing data of this {@code CommonCents} with {@code newData}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void resetData(ReadOnlyCommonCents newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        setAccounts(newData.getAccountList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    //// account-level operations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns true if an account with the same identity as {@code account} exists in the Common Cents."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean hasAccount(Account account) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(account);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return accounts.contains(account);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Adds an account to the money-tracker."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * The account must not already exist in the money-tracker."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void addAccount(Account a) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        accounts.add(a);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Replaces the given account {@code target} in the list with {@code editedAccount}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * {@code target} must exist in the money-tracker."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * The account identity of {@code editedAccount} must not be the same as another"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * existing account in the money-tracker."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setAccount(Account target, Account editedAccount) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(editedAccount);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        accounts.setAccount(target, editedAccount);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Replaces the account in the list with the same name as {@code editedAccount}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * The account with the same name must exist in the money-tracker."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setAccount(Account editedAccount) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(editedAccount);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        accounts.setAccount(editedAccount);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Removes {@code key} from this {@code CommonCents}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * {@code key} must exist in the money-tracker."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void removeAccount(Account key) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        accounts.remove(key);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return accounts.asUnmodifiableObservableList().size() + \" accounts\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ObservableList\u003cAccount\u003e getAccountList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return accounts.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                || (other instanceof CommonCents // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                \u0026\u0026 accounts.equals(((CommonCents) other).accounts));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return accounts.hashCode();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    Predicate\u003cAccount\u003e PREDICATE_SHOW_ALL_ACCOUNTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns the user prefs\u0027 CommonCents file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    Path getCommonCentsFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Sets the user prefs\u0027 CommonCents file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    void setCommonCentsFilePath(Path commonCentsFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Replaces CommonCents data with the data in {@code commonCents}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    void setCommonCents(ReadOnlyCommonCents commonCents);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /** Returns the CommonCents */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    ReadOnlyCommonCents getCommonCents();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns true if a account with the same identity as {@code account} exists in the CommonCents."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    boolean hasAccount(Account account);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Deletes the given account."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * The account must exist in the CommonCents."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    void deleteAccount(Account target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Adds the given account."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * {@code account} must not already exist in the CommonCents."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    void addAccount(Account account);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Replaces the given account {@code target} with {@code editedAccount}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * {@code target} must exist in the CommonCents."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * The account identity of {@code editedAccount} must not be the same as another existing account"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * in the CommonCents."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    void setAccount(Account target, Account editedAccount);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Replaces the account in the list with the same name as {@code editedAccount}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * The account with the same name must exist in CommonCents."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    void setAccount(Account editedAccount);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Checks if the filtered account list is empty."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean hasNoAccount();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /** Returns an unmodifiable view of the filtered account list */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    ObservableList\u003cAccount\u003e getFilteredAccountList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Updates the filter of the filtered account list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    void updateFilteredAccountList(Predicate\u003cAccount\u003e predicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 37,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Represents the in-memory model of the Common Cents data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final CommonCents commonCents;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final FilteredList\u003cAccount\u003e filteredAccounts;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Initializes a ModelManager with the given CommonCents and userPrefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ModelManager(ReadOnlyCommonCents commonCents, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireAllNonNull(commonCents, userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        logger.fine(\"Initializing with common cents data: \" + commonCents + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.commonCents \u003d new CommonCents(commonCents);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        filteredAccounts \u003d new FilteredList\u003c\u003e(this.commonCents.getAccountList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this(new CommonCents(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public Path getCommonCentsFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return userPrefs.getCommonCentsFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setCommonCentsFilePath(Path commonCentsFilePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(commonCentsFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        userPrefs.setCommonCentsFilePath(commonCentsFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CommonCents \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setCommonCents(ReadOnlyCommonCents commonCents) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.commonCents.resetData(commonCents);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ReadOnlyCommonCents getCommonCents() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return commonCents;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean hasAccount(Account account) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(account);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return commonCents.hasAccount(account);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void deleteAccount(Account target) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        commonCents.removeAccount(target);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void addAccount(Account account) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        commonCents.addAccount(account);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        updateFilteredAccountList(PREDICATE_SHOW_ALL_ACCOUNTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setAccount(Account target, Account editedAccount) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireAllNonNull(target, editedAccount);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        commonCents.setAccount(target, editedAccount);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setAccount(Account editedAccount) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireAllNonNull(editedAccount);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        commonCents.setAccount(editedAccount);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Account List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean hasNoAccount() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return filteredAccounts.isEmpty();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Account} backed by the internal list of"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * {@code versionedCommonCents}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ObservableList\u003cAccount\u003e getFilteredAccountList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return filteredAccounts;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void updateFilteredAccountList(Predicate\u003cAccount\u003e predicate) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        filteredAccounts.setPredicate(predicate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return commonCents.equals(other.commonCents)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                \u0026\u0026 filteredAccounts.equals(other.filteredAccounts);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 51,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyCommonCents.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Unmodifiable view of a Common Cents"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public interface ReadOnlyCommonCents {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns an unmodifiable view of the accounts list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * This list will not contain any duplicate accounts."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    ObservableList\u003cAccount\u003e getAccountList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    Path getCommonCentsFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private Path commonCentsFilePath \u003d Paths.get(\"data\" , \"CommonCents.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        setCommonCentsFilePath(newUserPrefs.getCommonCentsFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public Path getCommonCentsFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return commonCentsFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setCommonCentsFilePath(Path commonCentsFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(commonCentsFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.commonCentsFilePath \u003d commonCentsFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                \u0026\u0026 commonCentsFilePath.equals(o.commonCentsFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return Objects.hash(guiSettings, commonCentsFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + commonCentsFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 9,
      "lettuceman4": 1,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/Account.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.ExpenseList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Revenue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.RevenueList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Wraps all data that represents one business Common Cents."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class Account implements ReadOnlyAccount {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final double INITIAL_SUM \u003d 0.00;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    // identity field"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    // data field"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final ExpenseList expenses;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final RevenueList revenues;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Constructs an Account object with the given name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public Account(Name name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.expenses \u003d new ExpenseList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.revenues \u003d new RevenueList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    Account(ReadOnlyAccount toBeCopied) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this(toBeCopied.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    //// overwrite operations"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Replaces the name of the account with {@code name}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Replaces the contents of the expense list with {@code expenses}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.expenses.setExpenses(expenses);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void setExpenses(ExpenseList expenses) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        this.expenses.setExpenses(expenses);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Replaces the contents of the revenue list with {@code revenues}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setRevenues(List\u003cRevenue\u003e revenues) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.revenues.setRevenues(revenues);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setRevenues(RevenueList revenues) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.revenues.setRevenues(revenues);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Clears contents of the expense list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void clearExpenses() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.expenses.clearExpenses();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Clears contents of the revenue list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void clearRevenues() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.revenues.clearRevenues();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Resets the existing data of this {@code Account} with {@code newData}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void resetData(ReadOnlyAccount newData) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        setName(newData.getName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        setExpenses(newData.getExpenseList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        setRevenues(newData.getRevenueList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns a new {@code Account} with the same data as {@code newData}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public Account copyData() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account newAccount \u003d new Account(getName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        newAccount.setExpenses(getExpenseList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        newAccount.setRevenues(getRevenueList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return newAccount;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    //// entry-level operations"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns true if an expense entry with the same identity as {@code expense} exists in the ExpenseList."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return expenses.contains(expense);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns true if a profit entry with the same identity as {@code profit} exists in the ProfitList."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean hasRevenue(Revenue revenue) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(revenue);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return revenues.contains(revenue);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns true if an entry with the same identity as {@code entry} exists in the Account."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return expenses.contains(entry) || revenues.contains(entry);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Adds an expense entry to the account."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void addExpense(Expense e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        expenses.add(e);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Adds a revenue entry to the account."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void addRevenue(Revenue p) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        revenues.add(p);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Replaces the given expense entry {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * {@code target} must exist in the account."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(editedExpense);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        expenses.setExpense(target, editedExpense);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Replaces the given revenue entry {@code target} in the list with {@code editedRevenue}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * {@code target} must exist in the account."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setRevenue(Revenue target, Revenue editedRevenue) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(editedRevenue);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        revenues.setRevenue(target, editedRevenue);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Removes {@code key} from this {@code Account}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * {@code key} must exist in the account."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void removeExpense(Expense key) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        expenses.remove(key);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Removes {@code key} from this {@code Account}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * {@code key} must exist in the account."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void removeRevenue(Revenue key) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        revenues.remove(key);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns the total sum of the expenses."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public double getTotalExpense() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        double sum \u003d INITIAL_SUM;;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        for (Expense expense : expenses) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            Amount amount \u003d expense.getAmount();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            sum \u003d sum + amount.getValue();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return sum;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns the total sum of the revenues."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public double getTotalRevenue() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        double sum \u003d INITIAL_SUM;;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        for (Revenue revenue : revenues) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            Amount amount \u003d revenue.getAmount();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            sum \u003d sum + amount.getValue();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return sum;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Calculates the total profits."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public double getProfits() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return getTotalRevenue() - getTotalExpense();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return \"Name: \" + name.toString();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return expenses.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ObservableList\u003cRevenue\u003e getRevenueList() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return revenues.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns true if both Account have identity fields that are the same."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * This defines a weaker notion of equality between two entries."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean isSameAccount(Account otherAccount) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (otherAccount \u003d\u003d this) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return otherAccount !\u003d null"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                \u0026\u0026 otherAccount.getName().equals(getName());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns true if both expenses have the same identity and data fields."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * This defines a stronger notion of equality between two accounts."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                || (other instanceof Account // instanceof handles nulls"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                \u0026\u0026 (name.equals(((Account) other).name)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                \u0026\u0026 expenses.equals(((Account) other).expenses)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                \u0026\u0026 revenues.equals(((Account) other).revenues)));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return Objects.hash(name, expenses, revenues);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 253,
      "lettuceman4": 11,
      "jordanyoong": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/ActiveAccount.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Entry;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Revenue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public interface ActiveAccount {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    Predicate\u003cExpense\u003e PREDICATE_SHOW_ALL_EXPENSES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    Predicate\u003cRevenue\u003e PREDICATE_SHOW_ALL_REVENUE \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    Predicate\u003cEntry\u003e PREDICATE_SHOW_ALL_ENTRY \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns a copy of this {@code ActiveAccount}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    ActiveAccount getCopy();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns the most recent previous state of this {@code ActiveAccount}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    Optional\u003cActiveAccount\u003e getPreviousState();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns true if this {@code ActiveAccount} does not have a previous state."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    boolean hasNoPreviousState();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Sets the existing data of this {@code ActiveAccount} {@code ActiveAccount} to be the previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    void setPreviousState();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Removes the previous state of this {@code ActiveAccount}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    void removePreviousState();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Resets the existing data of this {@code ActiveAccount} with the data of the previous state."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    void returnToPreviousState();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Replaces account data with the data in {@code newActiveAccount}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    void setActiveAccount(ReadOnlyAccount newActiveAccount);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Replaces the name of the account with {@code name}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    void setName(Name name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /** Returns a copy of the Active Account */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    Account getAccount();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns true if an expense/revenue entry with the same identity as {@code entry} exists in the account."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    boolean hasEntry(Entry entry);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns true if a expense with the same identity as {@code expense} exists in the account."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    boolean hasExpense(Expense expense);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns true if a revenue with the same identity as {@code revenue} exists in the account."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    boolean hasRevenue(Revenue revenue);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Deletes the given expense."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * The expense must exist in the account."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    void deleteExpense(Expense target);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Deletes the given revenue."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * The revenue must exist in the account."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    void deleteRevenue(Revenue target);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Adds the given expense."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    void addExpense(Expense expense);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Adds the given revenue."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    void addRevenue(Revenue revenue);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Replaces the given expense {@code target} with {@code editedExpense}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * {@code target} must exist in the account."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    void setExpense(Expense target, Expense editedExpense);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Replaces the given revenue {@code target} with {@code editedRevenue}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * {@code target} must exist in the account."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    void setRevenue(Revenue target, Revenue editedRevenue);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     * Clears all entries in the expense list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    void clearExpenses();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     * Clears all entries in the revenues list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    void clearRevenues();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /** Returns an unmodifiable view of the filtered expense list */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /** Returns an unmodifiable view of the filtered revenue list */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ObservableList\u003cRevenue\u003e getFilteredRevenueList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Updates the filter of the filtered expense list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Updates the filter of the filtered revenue list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    void updateFilteredRevenueList(Predicate\u003cRevenue\u003e predicate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "     * Returns the total sum of the expenses."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public double getTotalExpenses();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "     * Returns the total sum of the revenues."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public double getTotalRevenue();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public double getProfits();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 133,
      "lettuceman4": 1,
      "nicholas-gcc": 1,
      "jordanyoong": 10,
      "cheoksuanne": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/ActiveAccountManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Entry;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Revenue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Represents the in-memory model of the active account data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class ActiveAccountManager implements ActiveAccount {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final Account activeAccount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final FilteredList\u003cExpense\u003e filteredExpenses;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final FilteredList\u003cRevenue\u003e filteredRevenues;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private Optional\u003cActiveAccount\u003e previousState;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Initializes an ActiveAccountManager with the given account."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ActiveAccountManager(ReadOnlyAccount account) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(account);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.activeAccount \u003d new Account(account);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        filteredExpenses \u003d new FilteredList\u003c\u003e(this.activeAccount.getExpenseList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        filteredRevenues \u003d new FilteredList\u003c\u003e(this.activeAccount.getRevenueList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        previousState \u003d Optional.empty();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Initializes an ActiveAccountManager with the given account, expenses,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * revenues and previous state of ActiveAccount."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private ActiveAccountManager(ReadOnlyAccount account, FilteredList\u003cExpense\u003e filteredExpenses,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                                 FilteredList\u003cRevenue\u003e filteredRevenues, Optional\u003cActiveAccount\u003e previousState) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireAllNonNull(account, filteredExpenses, filteredRevenues, previousState);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.activeAccount \u003d new Account(account);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.filteredExpenses \u003d filteredExpenses;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.filteredRevenues \u003d filteredRevenues;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.previousState \u003d previousState;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ActiveAccount \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ActiveAccount getCopy() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account copiedAccount \u003d getAccount();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        FilteredList\u003cExpense\u003e copiedExpenses \u003d new FilteredList\u003c\u003e(copiedAccount.getExpenseList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        FilteredList\u003cRevenue\u003e copiedRevenues \u003d new FilteredList\u003c\u003e(copiedAccount.getRevenueList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return new ActiveAccountManager(copiedAccount, copiedExpenses, copiedRevenues, previousState);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public Optional\u003cActiveAccount\u003e getPreviousState() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return previousState;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean hasNoPreviousState() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return previousState.isEmpty();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setPreviousState() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        previousState \u003d Optional.of(this.getCopy());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void removePreviousState() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        previousState \u003d Optional.empty();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void returnToPreviousState() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        previousState.ifPresent((prevState) -\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            Account prevStateAccount \u003d prevState.getAccount();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            setActiveAccount(prevStateAccount);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            previousState \u003d prevState.getPreviousState();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Account \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setActiveAccount(ReadOnlyAccount newActiveAccount) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.activeAccount.resetData(newActiveAccount);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccount.setName(name);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public Account getAccount() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return activeAccount.copyData();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return activeAccount.hasEntry(entry);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return activeAccount.hasExpense(expense);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean hasRevenue(Revenue revenue) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(revenue);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return activeAccount.hasRevenue(revenue);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccount.removeExpense(target);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void deleteRevenue(Revenue target) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccount.removeRevenue(target);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccount.addExpense(expense);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void addRevenue(Revenue revenue) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccount.addRevenue(revenue);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccount.setExpense(target, editedExpense);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setRevenue(Revenue target, Revenue editedRevenue) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireAllNonNull(target, editedRevenue);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccount.setRevenue(target, editedRevenue);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void clearExpenses() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        //activeAccount.clearExpenses();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        List\u003cExpense\u003e copiedFilteredExpenses \u003d copyFilteredExpenses();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        for (Expense expense : copiedFilteredExpenses) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            deleteExpense(expense);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void clearRevenues() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        //activeAccount.clearRevenues();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        List\u003cRevenue\u003e copiedFilteredRevenues \u003d copyFilteredRevenue();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        for (Revenue revenue : copiedFilteredRevenues) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            deleteRevenue(revenue);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Account List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private List\u003cExpense\u003e copyFilteredExpenses() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return new ArrayList\u003c\u003e(filteredExpenses);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private List\u003cRevenue\u003e copyFilteredRevenue() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return new ArrayList\u003c\u003e(filteredRevenues);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return filteredExpenses;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ObservableList\u003cRevenue\u003e getFilteredRevenueList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return filteredRevenues;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.filteredExpenses.setPredicate(predicate);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void updateFilteredRevenueList(Predicate\u003cRevenue\u003e predicate) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.filteredRevenues.setPredicate(predicate);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public double getTotalExpenses() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return activeAccount.getTotalExpense();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public double getTotalRevenue() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return activeAccount.getTotalRevenue();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public double getProfits() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return activeAccount.getProfits();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!(obj instanceof ActiveAccountManager)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        ActiveAccountManager other \u003d (ActiveAccountManager) obj;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return activeAccount.equals(other.activeAccount)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                \u0026\u0026 filteredExpenses.equals(other.filteredExpenses)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                \u0026\u0026 filteredRevenues.equals(other.filteredRevenues);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 230,
      "lettuceman4": 1,
      "nicholas-gcc": 1,
      "jordanyoong": 8,
      "cheoksuanne": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Name can take in any values, and it should not be blank\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private final String accountName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        this.accountName \u003d name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns true if a given string is a valid account name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return accountName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return this.accountName.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                \u0026\u0026 accountName.equals(((Name) other).accountName)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return accountName.hashCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 43,
      "lettuceman4": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/ReadOnlyAccount.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Revenue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public interface ReadOnlyAccount {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    Name getName();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns an unmodifiable view of the expense list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    ObservableList\u003cExpense\u003e getExpenseList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns an unmodifiable view of the revenue list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    ObservableList\u003cRevenue\u003e getRevenueList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/UniqueAccountList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.exceptions.AccountNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.exceptions.DuplicateAccountException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * A list of accounts that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * An account is considered unique by comparing using {@code Account#isSameAccount(Account)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * updating of accounts uses Account#isSameAccount(Account) for equality so as to ensure that the account being added or"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * updated is unique in terms of identity in the UniqueAccountList. However, the removal of a account uses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Account#equals(Object) so as to ensure that the account with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * @see Account#isSameAccount(Account)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class UniqueAccountList implements Iterable\u003cAccount\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final int ACCOUNT_NOT_FOUND_INDEX \u003d -1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String NEW_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final ObservableList\u003cAccount\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final ObservableList\u003cAccount\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns true if the list contains an equivalent account as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean contains(Account toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameAccount);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Adds a account to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * The account must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void add(Account toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new DuplicateAccountException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private int getAccountIndex(Name name) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            if (internalList.get(i).getName().equals(name)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Replaces the account {@code target} in the list with {@code editedAccount}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * The account identity of {@code editedAccount} must not be the same as another existing account in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setAccount(Account target, Account editedAccount) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireAllNonNull(target, editedAccount);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account copiedEditedAccount \u003d editedAccount.copyData();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (index \u003d\u003d ACCOUNT_NOT_FOUND_INDEX) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new AccountNotFoundException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!target.isSameAccount(copiedEditedAccount) \u0026\u0026 contains(copiedEditedAccount)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new DuplicateAccountException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        internalList.set(index, copiedEditedAccount);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setAccount(Account editedAccount) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Name accountName \u003d editedAccount.getName();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        int accountIndex \u003d getAccountIndex(accountName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (accountIndex \u003d\u003d ACCOUNT_NOT_FOUND_INDEX) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new AccountNotFoundException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account target \u003d internalList.get(accountIndex);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!target.isSameAccount(editedAccount) \u0026\u0026 contains(editedAccount)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new DuplicateAccountException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account copiedAccount \u003d editedAccount.copyData();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        internalList.set(accountIndex, copiedAccount);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Removes the equivalent account from the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * The account must exist in the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void remove(Account toRemove) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new AccountNotFoundException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setAccounts(UniqueAccountList replacement) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Replaces the contents of this list with {@code accounts}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * {@code accounts} must not contain duplicate accounts."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setAccounts(List\u003cAccount\u003e accounts) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireAllNonNull(accounts);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!accountsAreUnique(accounts)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new DuplicateAccountException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        internalList.setAll(accounts);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ObservableList\u003cAccount\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public Iterator\u003cAccount\u003e iterator() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                || (other instanceof UniqueAccountList // instanceof handles nulls"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueAccountList) other).internalList));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns true if {@code accounts} contains only unique accounts."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private boolean accountsAreUnique(List\u003cAccount\u003e accounts) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        for (int i \u003d 0; i \u003c accounts.size() - 1; i++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            for (int j \u003d i + 1; j \u003c accounts.size(); j++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                if (accounts.get(i).isSameAccount(accounts.get(j))) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 168
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/entry/Amount.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.model.account.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Represents an Entry\u0027s monetary value."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAmount(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class Amount {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Amount should be of format Dollar.Cents and adhere \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            + \"to the following constraints: \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            + \"1. The Dollars part should be all numbers and should not start with the digit 0\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            + \"2. The . between Dollars and Cents is optional\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            + \"3. The Cents part should be all numbers and can only contain 0-2 digits\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            + \"4. The input value should not be more than 1,000,000.00.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            \"(^[1-9][0-9]*(\\\\.?[0-9]?[0-9]?)|^([0-9]*)?(\\\\.[1-9][0-9]?)|^([0-9]*)(\\\\.[0-9][1-9]))\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public static final double MAX_AMOUNT \u003d 1000000.00;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final Double value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Constructs an {@code Amount}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * @param amount A valid monetary value of an Entry."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public Amount(String amount) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        checkArgument(isValidAmount(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.value \u003d Double.parseDouble(amount);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns true if a given string is a valid monetary value."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static boolean isValidAmount(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            double value \u003d Double.parseDouble(test);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            return !(value \u003e MAX_AMOUNT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return String.format(\"%.2f\", this.value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                || (other instanceof Amount // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                \u0026\u0026 value.equals(((Amount) other).value)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public Double getValue() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 51,
      "jordanyoong": 10,
      "cheoksuanne": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/entry/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.model.account.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Represents an Entry\u0027s description."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Description can take in any values, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * @param description A valid description of an Entry."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.value \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/entry/Entry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.model.account.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Represents the skeleton of an entry in Common Cents."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public abstract class Entry {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public Entry(Description description, Amount amount, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireAllNonNull(description, amount, tags);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    protected boolean hasTags() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return !tags.isEmpty();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return Objects.hash(description, amount, tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/entry/Expense.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.model.account.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Represents a expense entry in Common Cents."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class Expense extends Entry {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public Expense(Description description, Amount amount, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        super(description, amount, tags);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!(other instanceof Expense)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Expense otherExpense \u003d (Expense) other;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return otherExpense.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                \u0026\u0026 otherExpense.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                \u0026\u0026 otherExpense.getTags().equals(getTags());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        builder.append(\"Expense: \")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                .append(getAmount());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (hasTags()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/entry/ExpenseDescriptionContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "package seedu.address.model.account.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "public class ExpenseDescriptionContainsKeywordsPredicate implements Predicate\u003cExpense\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public ExpenseDescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public boolean test(Expense entry) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(entry.getDescription().toString(), keyword));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            || (other instanceof ExpenseDescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            \u0026\u0026 keywords.equals(((ExpenseDescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/entry/ExpenseList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.model.account.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * A list that stores the expense entries."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class ExpenseList implements Iterable\u003cExpense\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns true if the list contains an equivalent expense as the given argument."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean contains(Entry toCheck) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Adds an expense to the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void add(Expense toAdd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Replaces the expense {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        internalList.set(index, editedExpense);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Removes the equivalent expense from the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * The expense entry must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void remove(Expense toRemove) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setExpenses(ExpenseList replacement) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Replaces the contents of this list with {@code expenses}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireAllNonNull(expenses);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        internalList.setAll(expenses);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     * Clears all contents of this list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void clearExpenses() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ObservableList\u003cExpense\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public Iterator\u003cExpense\u003e iterator() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                || (other instanceof ExpenseList // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                \u0026\u0026 internalList.equals(((ExpenseList) other).internalList));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 101,
      "jordanyoong": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/entry/Revenue.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.model.account.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Represents a revenue entry in Common Cents."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class Revenue extends Entry {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public Revenue(Description description, Amount amount, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        super(description, amount, tags);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!(other instanceof Revenue)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Revenue otherRevenue \u003d (Revenue) other;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return otherRevenue.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                \u0026\u0026 otherRevenue.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                \u0026\u0026 otherRevenue.getTags().equals(getTags());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        builder.append(\"Revenue: \")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                .append(getAmount());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (hasTags()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/entry/RevenueDescriptionContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "package seedu.address.model.account.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "public class RevenueDescriptionContainsKeywordsPredicate implements Predicate\u003cRevenue\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public RevenueDescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public boolean test(Revenue entry) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(entry.getDescription().toString(), keyword));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            || (other instanceof RevenueDescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            \u0026\u0026 keywords.equals(((RevenueDescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/entry/RevenueList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.model.account.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * A list that stores the revenue entries."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class RevenueList implements Iterable\u003cRevenue\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final ObservableList\u003cRevenue\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final ObservableList\u003cRevenue\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns true if the list contains an equivalent revenue as the given argument."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean contains(Entry toCheck) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Adds a revenue to the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void add(Revenue toAdd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Replaces the revenue {@code target} in the list with {@code editedRevenue}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setRevenue(Revenue target, Revenue editedRevenue) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireAllNonNull(target, editedRevenue);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        internalList.set(index, editedRevenue);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Removes the equivalent revenue from the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * The revenue entry must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void remove(Revenue toRemove) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setRevenues(RevenueList replacement) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Replaces the contents of this list with {@code revenues}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setRevenues(List\u003cRevenue\u003e revenues) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        requireAllNonNull(revenues);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        internalList.setAll(revenues);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     * Clears all contents of this list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void clearRevenues() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ObservableList\u003cRevenue\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public Iterator\u003cRevenue\u003e iterator() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                || (other instanceof RevenueList // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                \u0026\u0026 internalList.equals(((RevenueList) other).internalList));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 101,
      "jordanyoong": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/entry/exceptions/EntryNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.model.account.entry.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Signals that the operation is unable to find the specified entry."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class EntryNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/exceptions/AccountNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.model.account.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Signals that the operation is unable to find the specified account."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class AccountNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/exceptions/DuplicateAccountException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.model.account.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Signals that the operation will result in duplicate Accounts (Accounts are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class DuplicateAccountException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public DuplicateAccountException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        super(\"Operation would result in duplicate accounts\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Represents a Tag in the Common Cents."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleCommonCentsUtilData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.CommonCents;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.ReadOnlyCommonCents;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.Amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.ExpenseList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Revenue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.RevenueList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": " * Contains utility methods for populating {@code CommonCents} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "public class SampleCommonCentsUtilData {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static Account[] getSampleAccount() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account acc \u003d new Account(new Name(\"Default account 1\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        RevenueList accRevenues \u003d new RevenueList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        accRevenues.add(new Revenue(new Description(\"earrings sales\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                new Amount(\"13.50\"), getTagSet(\"craft\", \"accessories\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        accRevenues.add(new Revenue(new Description(\"phone cases sales\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                new Amount(\"15.70\"), getTagSet(\"phone\", \"accessories\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        ExpenseList accExpenses \u003d new ExpenseList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        accExpenses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                .add(new Expense(new Description(\"Watercolours\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                new Amount(\"12.10\"), getTagSet(\"art\", \"colours\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        accExpenses"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                .add(new Expense(new Description(\"canvas\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                new Amount(\"20.15\"), getTagSet(\"art\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        acc.setExpenses(accExpenses);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        acc.setRevenues(accRevenues);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account acc2 \u003d new Account(new Name(\"Default account 2\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        ExpenseList acc2Expenses \u003d new ExpenseList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        RevenueList acc2Revenues \u003d new RevenueList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        acc2Expenses.add(new Expense(new Description(\"lunch\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                new Amount(\"5.45\"), getTagSet(\"food\", \"hawker\")));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        acc2Expenses.add(new Expense(new Description(\"dinner at Morganafield\u0027s\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                new Amount(\"24.45\"), getTagSet(\"food\", \"restaurant\", \"Morganafields\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        acc2.setExpenses(acc2Expenses);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        acc2.setRevenues(acc2Revenues);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return new Account[]{acc, acc2};"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static ReadOnlyCommonCents getSampleCommonCents() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        CommonCents sampleCc \u003d new CommonCents();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        for (Account acc : getSampleAccount()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            sampleCc.addAccount(acc);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return sampleCc;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Initializes a empty account."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * @return A account with no entries."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static Account initEmptyAccount() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account acc \u003d new Account(new Name(\"Default account\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return acc;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Initializes a Common Cents with one default account."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * @return A Common Cents with a default account with no entries."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static ReadOnlyCommonCents initEmptyCommonCents() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        CommonCents emptyCc \u003d new CommonCents();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        emptyCc.addAccount(initEmptyAccount());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return emptyCc;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 43,
      "lettuceman4": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CommonCentsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.ReadOnlyCommonCents;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": " * Represents a storage for {@link seedu.address.model.CommonCents}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "public interface CommonCentsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    Path getCommonCentsFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Returns CommonCents data as a {@link ReadOnlyCommonCents}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    Optional\u003cReadOnlyCommonCents\u003e readCommonCents() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * @see #getCommonCentsFilePath()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    Optional\u003cReadOnlyCommonCents\u003e readCommonCents(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Saves the given {@link ReadOnlyCommonCents} to the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * @param commonCents cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    void saveCommonCents(ReadOnlyCommonCents commonCents) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * @see #saveCommonCents(ReadOnlyCommonCents)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    void saveCommonCents(ReadOnlyCommonCents commonCents, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 13,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedAccount.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.ExpenseList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.RevenueList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": " * Jackson-friendly version of {@link Account}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "public class JsonAdaptedAccount {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Account\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private final List\u003cJsonAdaptedExpense\u003e expenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final List\u003cJsonAdaptedRevenue\u003e revenues \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Constructs a {@code JsonAdaptedAccount} with the given account."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public JsonAdaptedAccount(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                              @JsonProperty(\"expenses\") List\u003cJsonAdaptedExpense\u003e expenses,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                              @JsonProperty(\"revenues\") List\u003cJsonAdaptedRevenue\u003e revenues) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        this.expenses.addAll(expenses);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.revenues.addAll(revenues);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Converts a given {@code Account} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public JsonAdaptedAccount(Account source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        expenses.addAll(source.getExpenseList().stream().map(JsonAdaptedExpense::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        revenues.addAll(source.getRevenueList().stream().map(JsonAdaptedRevenue::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Converts this account into the model\u0027s {@code Account} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public Account toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        ExpenseList accountExpenses \u003d new ExpenseList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        RevenueList accountProfits \u003d new RevenueList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        for (JsonAdaptedRevenue profit : revenues) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            accountProfits.add(profit.toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        for (JsonAdaptedExpense expense : expenses) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            accountExpenses.add(expense.toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Account modelAcc \u003d new Account(modelName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        modelAcc.setExpenses(accountExpenses);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        modelAcc.setRevenues(accountProfits);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return modelAcc;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 9,
      "lettuceman4": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEntry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.Entry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": " * Jackson-friendly version of {@link Entry}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "public class JsonAdaptedEntry {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Entry\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    //protected final String type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    protected final String amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    protected final List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Constructs a {@code JsonAdaptedEntry} with the given entry\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public JsonAdaptedEntry(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                            @JsonProperty(\"amount\") String amount, @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        //this.type \u003d type;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            this.tags.addAll(tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Converts a given {@code Entry} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public JsonAdaptedEntry(Entry source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        description \u003d source.getDescription().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        amount \u003d source.getAmount().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        tags.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Converts this Jackson-friendly adapted entry object into the model\u0027s {@code Entry} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted entry."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public Entry toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 16,
      "lettuceman4": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedExpense.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.Entry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "public class JsonAdaptedExpense extends JsonAdaptedEntry {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Constructs a {@code JsonAdaptedAccount} with the given account."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public JsonAdaptedExpense(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                              @JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                              @JsonProperty(\"tags\")List\u003cJsonAdaptedTag\u003e tags) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        super(description, amount, tags);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Converts a given {@code Entry} into this class for Jackson use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public JsonAdaptedExpense(Entry source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        super(source);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Converts this Jackson-friendly adapted profit object into the model\u0027s {@code Profit} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted profit."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public Expense toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        final List\u003cTag\u003e entryTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        for (JsonAdaptedTag tag : tags) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            entryTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                                            Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            throw new IllegalValueException(String.format(Description.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            throw new IllegalValueException(String.format(Amount.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(entryTags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return new Expense(modelDescription, modelAmount, modelTags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 10,
      "lettuceman4": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRevenue.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.Entry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Revenue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class JsonAdaptedRevenue extends JsonAdaptedEntry {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Constructs a {@code JsonAdaptedAccount} with the given account."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public JsonAdaptedRevenue(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                              @JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                              @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        super(description, amount, tags);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Converts a given {@code Entry} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public JsonAdaptedRevenue(Entry source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        super(source);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Converts this Jackson-friendly adapted revenue object into the model\u0027s {@code Revenue} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted revenue."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public Revenue toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        final List\u003cTag\u003e entryTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        for (JsonAdaptedTag tag : tags) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            entryTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            throw new IllegalValueException(String.format(Amount.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(entryTags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return new Revenue(modelDescription, modelAmount, modelTags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 17,
      "lettuceman4": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonCommonCentsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.ReadOnlyCommonCents;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": " * A class to access CommonCents data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "public class JsonCommonCentsStorage implements CommonCentsStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCommonCentsStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private Path filepath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public JsonCommonCentsStorage(Path filepath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public Path getCommonCentsFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return filepath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Returns CommonCents data as a {@link ReadOnlyCommonCents}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public Optional\u003cReadOnlyCommonCents\u003e readCommonCents() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return readCommonCents(filepath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Similar to {@link #readCommonCents()}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * @see #getCommonCentsFilePath()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public Optional\u003cReadOnlyCommonCents\u003e readCommonCents(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Optional\u003cJsonSerializableCommonCents\u003e jsonCommonCents \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                filePath, JsonSerializableCommonCents.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        if (jsonCommonCents.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            return Optional.of(jsonCommonCents.get().toModelType());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Saves the given {@link ReadOnlyCommonCents} to the storage."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * @param commonCents cannot be null."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void saveCommonCents(ReadOnlyCommonCents commonCents) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        saveCommonCents(commonCents, filepath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Similar to {@link #saveCommonCents(ReadOnlyCommonCents)}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void saveCommonCents(ReadOnlyCommonCents commonCents, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        requireNonNull(commonCents);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCommonCents(commonCents), filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 2,
      "lettuceman4": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableCommonCents.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.CommonCents;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.ReadOnlyCommonCents;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * An Immutable CommonCents that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "@JsonRootName(value \u003d \"commoncents\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "public class JsonSerializableCommonCents {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACCOUNT \u003d \"Account list contains duplicate account(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private final List\u003cJsonAdaptedAccount\u003e accounts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Constructs a {@code JsonSerializableCommonCents} with the given accounts."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public JsonSerializableCommonCents(@JsonProperty(\"accounts\") List\u003cJsonAdaptedAccount\u003e accounts) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        this.accounts.addAll(accounts);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Converts a given {@code ReadOnlyCommonCents} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCommonCents}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public JsonSerializableCommonCents(ReadOnlyCommonCents source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        accounts.addAll(source.getAccountList().stream().map(JsonAdaptedAccount::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Converts this Common Cents into the model\u0027s {@code CommonCents} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public CommonCents toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        CommonCents commonCents \u003d new CommonCents();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        for (JsonAdaptedAccount jsonAdaptedAccount : accounts) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            Account account \u003d jsonAdaptedAccount.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            if (commonCents.hasAccount(account)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ACCOUNT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            commonCents.addAccount(account);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return commonCents;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 6,
      "lettuceman4": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.ReadOnlyCommonCents;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "public interface Storage extends CommonCentsStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    Path getCommonCentsFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    Optional\u003cReadOnlyCommonCents\u003e readCommonCents() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    void saveCommonCents(ReadOnlyCommonCents commonCents) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.ReadOnlyCommonCents;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Manages storage of CommonCents data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private CommonCentsStorage commonCentsStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code CommonCentsStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public StorageManager(CommonCentsStorage commonCentsStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        this.commonCentsStorage \u003d commonCentsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CommonCents methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public Path getCommonCentsFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return commonCentsStorage.getCommonCentsFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public Optional\u003cReadOnlyCommonCents\u003e readCommonCents() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return readCommonCents(commonCentsStorage.getCommonCentsFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public Optional\u003cReadOnlyCommonCents\u003e readCommonCents(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return commonCentsStorage.readCommonCents(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void saveCommonCents(ReadOnlyCommonCents commonCents) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        saveCommonCents(commonCents, commonCentsStorage.getCommonCentsFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void saveCommonCents(ReadOnlyCommonCents commonCents, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        commonCentsStorage.saveCommonCents(commonCents, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 5,
      "lettuceman4": 12,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EntryCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "public class EntryCard extends UiPart\u003cNode\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String FXML \u003d \"EntryListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public final Entry entry;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Creates a {@code EntryCard} with the given {@code entry } and index to display."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public EntryCard(Entry entry, int displayIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        this.entry \u003d entry;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        id.setText(displayIndex + \". \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        description.setText(entry.getDescription().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        if (entry instanceof Expense) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            amount.setText(\"-$\" + entry.getAmount().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            amount.setText(\"+$\" + entry.getAmount().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        entry.getTags().stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        if (!(other instanceof EntryCard)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        EntryCard card \u003d (EntryCard) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                \u0026\u0026 entry.equals(card.entry);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 7,
      "lettuceman4": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpenseListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "public class ExpenseListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final String FXML \u003d \"ExpenseListPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExpenseListPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private Label expenseLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private ListView\u003cExpense\u003e expenseListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Creates a {@code ExpenseListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public ExpenseListPanel(ObservableList\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        expenseLabel.setText(\"Expenses\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        expenseLabel.setTextAlignment(TextAlignment.CENTER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        expenseListView.setItems(expenses);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        expenseListView.setCellFactory(listView -\u003e new ExpenseListViewCell());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    class ExpenseListViewCell extends ListCell\u003cExpense\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        protected void updateItem(Expense expense, boolean isEmpty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            super.updateItem(expense, isEmpty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            if (isEmpty || expense \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                setGraphic(new EntryCard(expense, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-t13-4.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 1,
      "lettuceman4": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LabeledPieChart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.scene.shape.Arc;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author lettuceman4-reused"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "//Reused from https://stackoverflow.com/questions/42065871/how-to-display-values-in-javafx-pie-chart"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "// with minor modifications"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class LabeledPieChart extends PieChart {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cData, Text\u003e labels \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a pie chart with labels indicating the percentage of each slice."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public LabeledPieChart() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getData().addListener((ListChangeListener.Change\u003c? extends Data\u003e c) -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            addLabels();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void layoutChartChildren(double top, double left, double contentWidth, double contentHeight) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super.layoutChartChildren(top, left, contentWidth, contentHeight);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        double centerX \u003d contentWidth / 2 + left;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        double centerY \u003d contentHeight / 2 + top;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        layoutLabels(centerX, centerY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setLabelsVisible(false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // this.setPrefSize(50, 50);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void addLabels() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Text label : labels.values()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            this.getChartChildren().remove(label);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        labels.clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Data data : getData()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            final Text dataText;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            final double displayValue \u003d data.getPieValue();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            dataText \u003d new Text(String.format(\"$%.2f\", displayValue));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            labels.put(data, dataText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            this.getChartChildren().add(dataText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void layoutLabels(double centerX, double centerY) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        double total \u003d 0.0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Data d : this.getData()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            total +\u003d d.getPieValue();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double scale \u003d (total !\u003d 0) ? 360 / total : 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Map.Entry\u003cData, Text\u003e entry : labels.entrySet()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            Data vData \u003d entry.getKey();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            Text vText \u003d entry.getValue();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Region vNode \u003d (Region) vData.getNode();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            Arc arc \u003d (Arc) vNode.getShape();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            double start \u003d arc.getStartAngle();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            double size \u003d (isClockwise()) ? (-scale * Math.abs(vData.getPieValue()))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                                            : (scale * Math.abs(vData.getPieValue()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            final double angle \u003d normalizeAngle(start + (size / 2));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            final double sproutX \u003d calcX(angle, arc.getRadiusX() / 2, centerX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            final double sproutY \u003d calcY(angle, arc.getRadiusY() / 2, centerY);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            vText.relocate("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                sproutX - vText.getBoundsInLocal().getWidth() + 15,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                sproutY - vText.getBoundsInLocal().getHeight());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            vText.setFont(Font.font(\"Century Gothic\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            vText.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static double normalizeAngle(double angle) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        double a \u003d angle % 360;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (a \u003c\u003d -180) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            a +\u003d 360;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (a \u003e 180) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            a -\u003d 360;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return a;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static double calcX(double angle, double radius, double centerX) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return (double) (centerX + radius * Math.cos(Math.toRadians(-angle)));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private static double calcY(double angle, double radius, double centerY) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return (double) (centerY + radius * Math.sin(Math.toRadians(-angle)));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 13,
      "-": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.geometry.Side;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private ExpenseListPanel expenseListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private RevenueListPanel revenueListPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private HBox accountNameBar;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private Label activeAccountName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private HBox commandBoxPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private Circle accountDisplayPicture;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private HBox entryListPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private StackPane pieChartPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private LabeledPieChart pieChart;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private StackPane expenseListPanelPlaceholder;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private StackPane revenueListPanelPlaceholder;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // Image img \u003d new Image(this.getClass().getResourceAsStream(\"/images/sampleDisplayPicture.png\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // accountDisplayPicture.setFill(new ImagePattern(img));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // TODO: Dummy colour, to be changed later"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        accountDisplayPicture.setFill(Color.web(\"ffb997\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void fillInnerParts() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        fillEntryDisplay();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        createPieChart();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        updateActiveAccountName();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        accountNameBar.getChildren().setAll(activeAccountName);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getCommonCentsFilePath());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        commandBoxPlaceholder.getChildren().addAll(commandBox.getRoot());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private void fillEntryDisplay() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        expenseListPanel \u003d new ExpenseListPanel(logic.getFilteredExpenseList());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        entryListPlaceholder.getChildren().add(expenseListPanel.getRoot());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        revenueListPanel \u003d new RevenueListPanel(logic.getFilteredRevenueList());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        entryListPlaceholder.getChildren().add(revenueListPanel.getRoot());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    void updateActiveAccountName() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        activeAccountName.setText(logic.getActiveAccountName().toString());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private void updatePieChart() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d createPieChartDataFromLogic();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        setPieChartData(pieChartData);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    void createPieChart() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d createPieChartDataFromLogic();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        pieChart \u003d new LabeledPieChart();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        setPieChartData(pieChartData);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        pieChart.setLegendSide(Side.LEFT);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        pieChartPlaceholder.getChildren().add(pieChart);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private ObservableList\u003cPieChart.Data\u003e createPieChartDataFromLogic() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return FXCollections.observableArrayList("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            new PieChart.Data(\"Expense\", logic.getTotalExpense()),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            new PieChart.Data(\"Revenue\", logic.getTotalRevenue())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        );"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private void setPieChartData(ObservableList\u003cPieChart.Data\u003e pieChartData) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        pieChart.getData().setAll(pieChartData);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        PauseTransition pause \u003d new PauseTransition(Duration.seconds(1.5f));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        pause.setOnFinished(event -\u003e {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                    (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.hide();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.hide();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        commandBoxPlaceholder.setDisable(true);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        pause.play();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public ExpenseListPanel getEntryListPanel() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return expenseListPanel;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public RevenueListPanel getRevenueListPanel() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return revenueListPanel;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            if (commandResult.isEntryListChange()) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                updatePieChart();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            updateActiveAccountName();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 8,
      "lettuceman4": 85,
      "-": 192
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RevenueListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.Revenue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "public class RevenueListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final String FXML \u003d \"RevenueListPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RevenueListPanel.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private Label revenueLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private ListView\u003cRevenue\u003e revenueListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Creates a {@code ExpenseListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public RevenueListPanel(ObservableList\u003cRevenue\u003e revenues) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        revenueLabel.setText(\"Revenues\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        revenueListView.setItems(revenues);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        revenueListView.setCellFactory(listView -\u003e new RevenueListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    class RevenueListViewCell extends ListCell\u003cRevenue\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        protected void updateItem(Revenue entry, boolean isEmpty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            super.updateItem(entry, isEmpty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            if (isEmpty || entry \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                setGraphic(new EntryCard(entry, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private Label statusBarText;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        statusBarText.setText(formatter.format(LocalDate.now()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 5,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/cc_logo.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/PinkTheme.css\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 3,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 1,
      "-": 88
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" prefWidth\u003d\"865\" minHeight\u003d\"90\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "             onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 1,
      "lettuceman4": 2,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-background-color: #B0838D;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-border-color: #B0838D #B0838D #ffffff #B0838D;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-border-insets: 20 20 25 20;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-font-family: \"Consolas\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 4,
      "-": 348
    }
  },
  {
    "path": "src/main/resources/view/EntryListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"80\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                \u003cLabel fx:id\u003d\"amount\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 2,
      "lettuceman4": 33
    }
  },
  {
    "path": "src/main/resources/view/ExpenseListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" prefWidth\u003d\"370\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \u003cLabel fx:id\u003d\"expenseLabel\" styleClass\u003d\"header-label\" prefWidth\u003d\"370\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \u003cListView fx:id\u003d\"expenseListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 10
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Common Cents - If you have it, use it.\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \u003cImage url\u003d\"@/images/cc_logo.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        \u003cURL value\u003d\"@PinkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \u003cVBox stylesheets\u003d\"@PinkTheme.css\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        \u003cHBox fx:id\u003d\"accountNameBar\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            \u003cInsets top\u003d\"10\" left\u003d\"10\" right\u003d\"5\" bottom\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "          \u003cLabel fx:id\u003d\"activeAccountName\" styleClass\u003d\"account-name\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "              \u003cInsets top\u003d\"5\" left\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "          \u003c/Label\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \u003cHBox fx:id\u003d\"commandBoxPlaceholder\" maxHeight\u003d\"150\" minHeight\u003d\"120\" prefHeight\u003d\"120\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"  \u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "          \u003cInsets bottom\u003d\"5\" left\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        \u003cCircle fx:id\u003d\"accountDisplayPicture\" radius\u003d\"40.0\" strokeType\u003d\"INSIDE\" style\u003d\"-fx-effect: dropshadow(three-pass-box, rgba(0,0,0,0.8), 10, 0, 0, 0);\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "          \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            \u003cInsets bottom\u003d\"100.0\" left\u003d\"5.0\" right\u003d\"12.0\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "          \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        \u003c/Circle\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                   styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c!--        \u003cVBox fx:id\u003d\"entryList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e--\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c!--          \u003cpadding\u003e--\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c!--            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e--\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c!--          \u003c/padding\u003e--\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c!--          \u003cStackPane fx:id\u003d\"entryListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e--\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c!--        \u003c/VBox\u003e--\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        \u003cHBox fx:id\u003d\"entryListPlaceholder\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "              VBox.vgrow\u003d\"ALWAYS\" spacing\u003d\"10\" \u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                \u003cInsets top\u003d\"5\" bottom\u003d\"5\" right\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "              \u003cStackPane fx:id\u003d\"pieChartPlaceholder\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                  \u003cInsets top\u003d\"10\" bottom\u003d\"10\" right\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "              \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "              \u003cStackPane fx:id\u003d\"expenseListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "              \u003cStackPane fx:id\u003d\"revenueListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                   style\u003d\"-fx-background-color: rgba(100, 84, 92, 0.8); -fx-padding: 5 0 5 5\"/\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 1,
      "lettuceman4": 50,
      "-": 43
    }
  },
  {
    "path": "src/main/resources/view/PinkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-background-color: rgba(187, 147, 152, 0.9);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-border-color: #B0838D #B0838D #ffffff #B0838D;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-border-insets: 20 20 25 20;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-font-family: \"Consolas\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".root {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-background-image: url(\"https://i.imgur.com/4k6DV8Y.png\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".account-name {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-background-color: #93A5AC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-font-family: \"Consolas\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-background-radius: 5"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-background-color: #64545c;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-font-family: \"Century Gothic\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".header-label {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-border-width: 12;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-border-color: rgba(249, 184, 168, 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-border-style: solid inside;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-border-radius: 5;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-background-color: rgba(249, 184, 168, 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-background-radius: 10 10 0 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-text-fill: #64545c;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-font-size: 15pt;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-font-family: \"Palatino Linotype\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     -fx-background-color: transparent;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     -fx-border-color: transparent transparent #ffffff transparent;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-padding: 5 0 5 5;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-control-background: transparent;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-control-inner-background: transparent;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".text-area {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-background-color: rgba(106, 57, 80, 0.5);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".text-area .scroll-pane {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".text-area .scroll-pane .viewport{"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".text-area .scroll-pane .content{"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-font-family: \"Georgia\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-font-family: \"Georgia\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-background-color: rgba(249, 184, 168, 0.6);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-background-color: rgba(214, 176, 193, 0.3);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-hgap: 3;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-background-color: #b5838d;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-font-family: \"Century Gothic\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".chart{"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-pie-label-visible:true;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-label-line-length: 20;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-start-angle: 90;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-legend-side: right;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".chart-pie-label{"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-font-family: \"Century Gothic\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-visible: false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".chart-pie {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".chart-content{"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-padding :2;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".default-color0.chart-pie { -fx-pie-color: #93A5AC; }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".default-color1.chart-pie { -fx-pie-color: #F6A395; }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".default-color2.chart-pie { -fx-pie-color: #93A5AC; }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".default-color3.chart-pie { -fx-pie-color: #F6A395; }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".default-color4.chart-pie { -fx-pie-color: #93A5AC; }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".default-color5.chart-pie { -fx-pie-color: #F6A395; }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".default-color6.chart-pie { -fx-pie-color: #93A5AC; }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".default-color7.chart-pie { -fx-pie-color: #F6A395; }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".default-color8.chart-pie { -fx-pie-color: #93A5AC; }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".default-color9.chart-pie { -fx-pie-color: #F6A395; }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".default-color10.chart-pie { -fx-pie-color: #93A5AC; }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".default-color11.chart-pie { -fx-pie-color: #F6A395; }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".default-color12.chart-pie { -fx-pie-color: #93A5AC; }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".default-color13.chart-pie { -fx-pie-color: #F6A395; }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".chart-legend{"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.5);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-font-family: \"Century Gothic\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-font-color: white"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ".chart-legend-item{"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-font-family: \"Century Gothic\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    -fx-text-fill: white"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 211
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 2,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/RevenueListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" prefWidth\u003d\"370\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \u003cLabel fx:id\u003d\"revenueLabel\" styleClass\u003d\"header-label\" prefWidth\u003d\"370\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \u003cListView fx:id\u003d\"revenueListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 9
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  \u003cLabel fx:id\u003d\"statusBarText\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 1,
      "lettuceman4": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/JsonCommonCentsAccountListTest/duplicateAccountListCommonCents.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  \"accounts\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"name\" : \"General account\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"expenses\" : [ {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"bought flower pots\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"49.99\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"tools\", \"29Sept\" ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"bought shovel\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"20\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"tools\", \"17Aug\" ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"paid rent\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"1000\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"buying flower seeds\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"15.65\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"roses\" ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"revenues\" : [ {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"sold flower pots\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"99.99\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"10sold\" ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"sold gardening tools\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"45.55\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"shovel\", \"wateringCan\", \"sickle\" ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"sold flower seed\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"30\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"10sunflowerseeds\", \"5roseseeds\" ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"selling flowers\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"32.99\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"sunflowers\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"name\" : \"General account\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"expenses\" : [ {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"bought flower pots\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"49.99\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"tools\", \"29Sept\" ]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"bought shovel\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"20\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"tools\", \"17Aug\" ]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"paid rent\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"1000\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"buying flower seeds\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"15.65\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"roses\" ]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }],"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"revenues\" : [ {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"sold flower pots\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"99.99\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"10sold\" ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"sold gardening tools\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"45.55\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"shovel\", \"wateringCan\", \"sickle\" ]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"sold flower seed\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"30\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"10sunflowerseeds\", \"5roseseeds\" ]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"selling flowers\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"32.99\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"sunflowers\"]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 73
    }
  },
  {
    "path": "src/test/data/JsonCommonCentsAccountListTest/invalidAccountListCommonCents.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  \"accounts\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"name\" : \"General account\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"expenses\" : [ {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"bought flower pots\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"49.99\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"tools\", \"%29Sept\" ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \" \","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"20\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"tools\", \"17Aug\" ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"paid rent\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"1000\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"buying flower seeds\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"15.65\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"roses\" ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"revenues\" : [ {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"sold flower pots\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"99.99\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"10sold\" ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"sold gardening tools\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"45.55f\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"shovel\", \"wateringCan\", \"sickle\" ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"sold flower seed\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"30\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"10sunflowerseeds\", \"5roseseeds\" ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"selling flowers\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"32.99\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"sunflowers\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 38
    }
  },
  {
    "path": "src/test/data/JsonCommonCentsAccountListTest/typicalAccountListCommonCents.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  \"accounts\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"name\" : \"General account\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"expenses\" : [ {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"bought flower pots\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"49.99\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"tools\", \"29Sept\" ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"bought shovel\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"20\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"tools\", \"17Aug\" ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"paid rent\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"1000\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"buying flower seeds\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"15.65\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"roses\" ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"revenues\" : [ {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"sold flower pots\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"99.99\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"10sold\" ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"sold gardening tools\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"45.55\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"shovel\", \"wateringCan\", \"sickle\" ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"sold flower seed\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"30\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"10sunflowerseeds\", \"5roseseeds\" ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"selling flowers\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"32.99\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"sunflowers\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 38
    }
  },
  {
    "path": "src/test/data/JsonCommonCentsAccountTest/invalidAccountNameCommonCents.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  \"name\" : \" \","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  \"expenses\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"description\" : \"Watercolours\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"amount\" : \"12.10\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"tags\" : [ \"art\", \"colours\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"description\" : \"canvas\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"amount\" : \"20.15\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"tags\" : [ \"art\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  \"revenues\" : [ {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"description\" : \"flowers\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"amount\" : \"20.00\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"tags\" : [ \"stub\" ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 17
    }
  },
  {
    "path": "src/test/data/JsonCommonCentsAccountTest/typicalCommonCentsAccount.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  \"name\" : \"General account\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  \"expenses\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"description\" : \"Watercolours\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"amount\" : \"12.10\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"tags\" : [ \"art\", \"colours\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"description\" : \"canvas\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"amount\" : \"20.15\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"tags\" : [ \"art\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  \"revenues\" : [ {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"description\" : \"flowers\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"amount\" : \"20.00\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"tags\" : [ \"stub\" ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 17
    }
  },
  {
    "path": "src/test/data/JsonCommonCentsStorageTest/invalidAccountNameCommonCents.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  \"accounts\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"name\" : \"Invalid account name!!!\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"expenses\" : [ {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"bought flower pots\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"49.99\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"tools\", \"%29Sept\" ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \" \","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"20\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"tools\", \"17Aug\" ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"paid rent\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"1000\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"buying flower seeds\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"15.65\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"roses\" ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"revenues\" : [ {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"sold flower pots\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"99.99\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"10sold\" ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"sold gardening tools\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"45.55f\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"shovel\", \"wateringCan\", \"sickle\" ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"sold flower seed\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"30\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"10sunflowerseeds\", \"5roseseeds\" ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"selling flowers\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"32.99\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"sunflowers\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 38
    }
  },
  {
    "path": "src/test/data/JsonCommonCentsStorageTest/invalidAndValidAccountCommonCents.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  \"accounts\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"name\" : \"Account with invalid tag\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"expenses\" : [ {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"bought flower pots\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"49.99\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"tools\", \"%29Sept"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        \" ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \" \","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"20\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"tools\", \"17Aug\" ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"paid rent\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"1000\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"buying flower seeds\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"15.65\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"roses\" ]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }],"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    \"revenues\" : [ {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"sold flower pots\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"99.99\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"10sold\" ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"sold gardening tools\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"45.55f\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"shovel\", \"wateringCan\", \"sickle\" ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"sold flower seed\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"30\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"10sunflowerseeds\", \"5roseseeds\" ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"description\" : \"selling flowers\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"amount\" : \"32.99\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "      \"tags\" : [ \"sunflowers\"]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 39
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "  \"addressBookFilePath\" : \"commoncents.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Config defaultConfigCopy \u003d new Config();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Config differentConfig \u003d new Config();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        differentConfig.setUserPrefsFilePath(Paths.get(\"nonexistentFile.json\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(defaultConfig, defaultConfig);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(null, defaultConfig);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(1, defaultConfig);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(defaultConfig, defaultConfigCopy);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // differentUserPrefs path -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(defaultConfig, differentConfig);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void hashCode_test() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Config defaultConfigCopy \u003d new Config();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Config differentConfig \u003d new Config();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        differentConfig.setUserPrefsFilePath(Paths.get(\"nonexistentFile.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // same object -\u003e same hashcode"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(defaultConfig.hashCode(), defaultConfig.hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // same value -\u003e same hashcode"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(defaultConfig.hashCode(), defaultConfigCopy.hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // different value -\u003e different hashcode"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(defaultConfig.hashCode(), differentConfig.hashCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 39,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/GuiSettingsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "public class GuiSettingsTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private GuiSettings defaultGui \u003d new GuiSettings();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private GuiSettings testingGui \u003d new GuiSettings(1000, 700, 0, 0);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private GuiSettings testingGuiCopy \u003d new GuiSettings(testingGui.getWindowWidth(),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                                                testingGui.getWindowHeight(),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                                                testingGui.getWindowCoordinates().x,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                                                testingGui.getWindowCoordinates().y);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private GuiSettings differentGui \u003d new GuiSettings(200, testingGui.getWindowHeight(),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        testingGui.getWindowCoordinates().x, testingGui.getWindowCoordinates().y);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(testingGui, testingGui);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(defaultGui, defaultGui);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(testingGui, testingGuiCopy);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(null, testingGui);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(1, testingGui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(testingGui, differentGui);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // same object -\u003e same hashcode"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(testingGui.hashCode(), testingGui.hashCode());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // same value -\u003e same hashcode"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(testingGui.hashCode(), testingGuiCopy.hashCode());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // different value -\u003e different hashcode"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(testingGui.hashCode(), differentGui.hashCode());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(testingGuiCopy.toString(), testingGui.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/category/CategoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.commons.core.category;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class CategoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Category(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void constructor_invalidAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        String invalidCategory \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Category(invalidCategory));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void isValidAmount_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // null category"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Category.isValidCategory(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // blank category"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(Category.isValidCategory(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(Category.isValidCategory(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // invalid category"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(Category.isValidCategory(\"hello\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(Category.isValidCategory(\"expenses\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(Category.isValidCategory(\"expense1\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(Category.isValidCategory(\"reve nue\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(Category.isValidCategory(\"revenuee\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // valid category"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Category.isValidCategory(\"E\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Category.isValidCategory(\"e\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Category.isValidCategory(\"R\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Category.isValidCategory(\"r\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Category.isValidCategory(\"Expense\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Category.isValidCategory(\"expense\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Category.isValidCategory(\"ExPeNsE\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Category.isValidCategory(\"Revenue\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Category.isValidCategory(\"revenue\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Category.isValidCategory(\"rEvEnUe\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void validIsExpense_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Category validExpense1 \u003d new Category(\"expense\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Category validExpense2 \u003d new Category(\"e\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Category validExpense3 \u003d new Category(\"E\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Category validExpense4 \u003d new Category(\"exPeNSe\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertTrue(validExpense1.isExpense());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertTrue(validExpense2.isExpense());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertTrue(validExpense3.isExpense());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertTrue(validExpense4.isExpense());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // revenue -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertFalse(new Category(\"reveNUe\").isExpense());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void validIsRevenue_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Category validRevenue1 \u003d new Category(\"reveNue\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Category validRevenue2 \u003d new Category(\"r\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Category validRevenue3 \u003d new Category(\"R\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Category validRevenue4 \u003d new Category(\"revenue\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertTrue(validRevenue1.isRevenue());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertTrue(validRevenue2.isRevenue());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertTrue(validRevenue3.isRevenue());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertTrue(validRevenue4.isRevenue());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // expense -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertFalse(new Category(\"expeNse\").isRevenue());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void toString_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Category validExpense \u003d new Category(\"expEnse\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Category validRevenue \u003d new Category(\"r\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(\"expEnse\", validExpense.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(\"r\", validRevenue.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Category validExpense \u003d new Category(\"expEnse\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Category validRevenue \u003d new Category(\"r\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(validExpense, validExpense);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(validRevenue, validRevenue);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Category validExpenseCopy \u003d new Category(\"expEnse\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Category validRevenueCopy \u003d new Category(\"r\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(validExpense, validExpenseCopy);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(validRevenue, validRevenueCopy);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(null, validExpense);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(null, validRevenue);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(1, validExpense);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(1, validRevenue);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void hashCode_test() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Category validExpense \u003d new Category(\"expEnse\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Category validRevenue \u003d new Category(\"r\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Category anotherValidExpense \u003d new Category(\"eXPENse\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Category anotherValidRevenue \u003d new Category(\"revenue\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Category validExpenseCopy \u003d new Category(\"expEnse\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Category validRevenueCopy \u003d new Category(\"r\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // same value -\u003e same hashcode"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(validExpense.hashCode(), validExpenseCopy.hashCode());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(validRevenue.hashCode(), validRevenueCopy.hashCode());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // different value -\u003e different hashcode"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(validExpense.hashCode(), anotherValidExpense.hashCode());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(validRevenue.hashCode(), anotherValidRevenue.hashCode());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(validExpense.hashCode(), validRevenue.hashCode());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 53,
      "lettuceman4": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        final Index fifthEntryIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(fifthEntryIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(fifthEntryIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(fifthEntryIndex.equals(fifthEntryIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(fifthEntryIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(fifthEntryIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(fifthEntryIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 3,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_EXPENSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_ROSES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.model.util.SampleCommonCentsUtilData.initEmptyCommonCents;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.BUY_ROSE_SEEDS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.ReadOnlyCommonCents;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.ActiveAccountManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Expense;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.storage.JsonCommonCentsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final int FIRST_ACCOUNT_INDEX \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private Model model \u003d new ModelManager(initEmptyCommonCents(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private ActiveAccount activeAccount \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            new ActiveAccountManager(model.getFilteredAccountList().get(FIRST_ACCOUNT_INDEX));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        JsonCommonCentsStorage commonCentsStorage \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                new JsonCommonCentsStorage(temporaryFolder.resolve(\"CommonCents.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        StorageManager storage \u003d new StorageManager(commonCentsStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        String deleteCommand \u003d \"delete 9 c/revenue\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        String exitCommand \u003d ExitCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertCommandSuccess(exitCommand, ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT, model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // Setup LogicManager with JsonCommonCentsIoExceptionThrowingStub"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        JsonCommonCentsStorage commonCentsStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                new JsonCommonCentsIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionCommonCents.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        StorageManager storage \u003d new StorageManager(commonCentsStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + CATEGORY_DESC_EXPENSE + DESCRIPTION_DESC_EXPENSE"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                + AMOUNT_DESC_EXPENSE + TAG_DESC_ROSES;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Expense expectedExpense \u003d new ExpenseBuilder(BUY_ROSE_SEEDS).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(initEmptyCommonCents(), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccount.addExpense(expectedExpense);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        expectedModel.setAccount(activeAccount.getAccount());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void getFilteredAccountList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredAccountList().remove(0));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void getFilteredExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredExpenseList().remove(0));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void getFilteredRevenueList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredRevenueList().remove(0));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCommonCents(), new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static class JsonCommonCentsIoExceptionThrowingStub extends JsonCommonCentsStorage {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        private JsonCommonCentsIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        public void saveCommonCents(ReadOnlyCommonCents commonCents, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 49,
      "lettuceman4": 3,
      "-": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddAccountCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.testutil.ActiveAccountStub;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.testutil.TypicalEntries;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class AddAccountCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void constructor_nullAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddAccountCommand(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void execute_accountAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        ActiveAccountStub activeAccountStub \u003d new ActiveAccountStub();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account validAccount \u003d TypicalEntries.getTypicalAccount();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        CommandResult commandResult \u003d new AddAccountCommand(validAccount).execute(modelStub, activeAccountStub);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(String.format(AddAccountCommand.MESSAGE_SUCCESS, validAccount), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(Arrays.asList(validAccount), modelStub.getAccountList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void execute_duplicateAccount_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account validAccount \u003d TypicalEntries.getTypicalAccount();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        AddAccountCommand addAccountCommand \u003d new AddAccountCommand(validAccount);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        modelStub.addAccount(validAccount);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        ActiveAccountStub activeAccountStub \u003d new ActiveAccountStub();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(CommandException.class, AddAccountCommand.MESSAGE_DUPLICATE_ACCOUNT, ()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            -\u003e addAccountCommand.execute(modelStub, activeAccountStub));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account accountOne \u003d new Account(new Name(\"Account 1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account accountTwo \u003d new Account(new Name(\"Account 2\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        AddAccountCommand addAccountOneCommand \u003d new AddAccountCommand(accountOne);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        AddAccountCommand addAccountTwoCommand \u003d new AddAccountCommand(accountTwo);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(addAccountOneCommand.equals(addAccountOneCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        AddAccountCommand addAccountOneCommandCopy \u003d new AddAccountCommand(accountOne);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(addAccountOneCommand.equals(addAccountOneCommandCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(addAccountOneCommand.equals(1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(addAccountOneCommand.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(addAccountOneCommand.equals(addAccountTwoCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Entry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Revenue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.testutil.ActiveAccountStub;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.testutil.RevenueBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    private final ExpenseBuilder expenseBuilder \u003d new ExpenseBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    private final RevenueBuilder revenueBuilder \u003d new RevenueBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void constructor_nullEntry_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void execute_expenseAcceptedByModel_addSuccessful() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Expense expenseStub \u003d expenseBuilder.build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Model modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        ActiveAccountStubAcceptingEntry activeAccountStub \u003d new ActiveAccountStubAcceptingEntry();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(expenseStub).execute(modelStub, activeAccountStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, expenseStub),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertTrue(activeAccountStub.getEntries().contains(expenseStub));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void execute_revenueAcceptedByModel_addSuccessful() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Revenue revenueStub \u003d revenueBuilder.build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Model modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        ActiveAccountStubAcceptingEntry activeAccountStub \u003d new ActiveAccountStubAcceptingEntry();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(revenueStub).execute(modelStub, activeAccountStub);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, revenueStub),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertTrue(activeAccountStub.getEntries().contains(revenueStub));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void execute_typicalExpense() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Expense expenseStub \u003d expenseBuilder.build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Model modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        ActiveAccount activeAccountStub \u003d new ActiveAccountStub();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(\"New entry added! Expense: buying paint supplies Amount: 131.73\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                new AddCommand(expenseStub).execute(modelStub, activeAccountStub).getFeedbackToUser());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void execute_typicalRevenue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Revenue revenueStub \u003d revenueBuilder.build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Model modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        ActiveAccount activeAccountStub \u003d new ActiveAccountStub();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(\"New entry added! Revenue: buying paint supplies Amount: 131.73\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                new AddCommand(revenueStub).execute(modelStub, activeAccountStub).getFeedbackToUser());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void execute_typicalRevenue_withTags() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        //to maintain immutability of revenueBuilder"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        RevenueBuilder revenueBuilderStub \u003d new RevenueBuilder(revenueBuilder.build());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        revenueBuilderStub.withTags(\"bar\", \"foo\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Revenue revenueStub \u003d revenueBuilderStub.build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Model modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        ActiveAccount activeAccountStub \u003d new ActiveAccountStub();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertEquals(\"New entry added! Revenue: buying paint supplies Amount: 131.73 Tags: [bar][foo]\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                new AddCommand(revenueStub).execute(modelStub, activeAccountStub).getFeedbackToUser());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void execute_typicalExpense_withTags() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        //to maintain immutability of expenseBuilder"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        ExpenseBuilder expenseBuilderStub \u003d new ExpenseBuilder(expenseBuilder.build());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        expenseBuilderStub.withTags(\"bar\", \"foo\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Expense expenseStub \u003d expenseBuilderStub.build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Model modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        ActiveAccount activeAccountStub \u003d new ActiveAccountStub();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertEquals(\"New entry added! Expense: buying paint supplies Amount: 131.73 Tags: [bar][foo]\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                new AddCommand(expenseStub).execute(modelStub, activeAccountStub).getFeedbackToUser());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Expense expenseStub \u003d expenseBuilder.build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Revenue revenueStub \u003d revenueBuilder.build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        AddCommand addExpenseCommand \u003d new AddCommand(expenseStub);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        AddCommand addRevenueCommand \u003d new AddCommand(revenueStub);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertTrue(addExpenseCommand.equals(addExpenseCommand));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertTrue(addRevenueCommand.equals(addRevenueCommand));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        AddCommand addExpenseCommandCopy \u003d new AddCommand(expenseStub);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertTrue(addExpenseCommand.equals(addExpenseCommandCopy));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        AddCommand addRevenueCommandCopy \u003d new AddCommand(revenueStub);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertTrue(addRevenueCommand.equals(addRevenueCommandCopy));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertFalse(addExpenseCommand.equals(1));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertFalse(addRevenueCommand.equals(1));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertFalse(addExpenseCommand.equals(null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertFalse(addRevenueCommand.equals(null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertFalse(addRevenueCommand.equals(addExpenseCommand));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public static class ActiveAccountStubAcceptingEntry extends ActiveAccountStub {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        private final ArrayList\u003cEntry\u003e entries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            entries.add(expense);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        public void addRevenue(Revenue revenue) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            entries.add(revenue);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        public ArrayList\u003cEntry\u003e getEntries() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            return entries;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 2,
      "nicholas-gcc": 97,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.BUY_FLOWER_POTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.SELL_FLOWER_POTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.commons.core.category.Category;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.model.account.ActiveAccountManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.testutil.TypicalEntries;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": " * Contains integration and unit tests for {@code ClearCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    private final Model modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    private final Category expense \u003d new Category(\"expense\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    private final Category revenue \u003d new Category(\"revenue\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    private final ActiveAccount activeAccount \u003d new ActiveAccountManager(TypicalEntries.getTypicalAccount());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void execute_validClearExpense_success() throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        CommandResult commandResult \u003d new ClearCommand(expense).execute(modelStub, activeAccount);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(String.format(ClearCommand.MESSAGE_CLEAR_ENTRY_SUCCESS, expense),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        assertFalse(activeAccount.hasExpense(BUY_FLOWER_POTS));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        assertTrue(activeAccount.getFilteredExpenseList().isEmpty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void execute_validClearRevenue_success() throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        CommandResult commandResult \u003d new ClearCommand(revenue).execute(modelStub, activeAccount);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(String.format(ClearCommand.MESSAGE_CLEAR_ENTRY_SUCCESS, revenue),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        assertFalse(activeAccount.hasRevenue(SELL_FLOWER_POTS));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        assertTrue(activeAccount.getFilteredRevenueList().isEmpty());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void execute_validClearExpense_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        assertTrue(activeAccount.hasExpense(BUY_FLOWER_POTS));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        assertFalse(activeAccount.getFilteredExpenseList().isEmpty());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void execute_validClearRevenue_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        assertTrue(activeAccount.hasRevenue(SELL_FLOWER_POTS));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        assertFalse(activeAccount.getFilteredRevenueList().isEmpty());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 2,
      "jordanyoong": 40,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        CommandResult commandResult \u003d CommandResultFactory.createDefaultCommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertTrue(commandResult.equals(CommandResultFactory.createDefaultCommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            \"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertFalse(commandResult.equals(CommandResultFactory.createDefaultCommandResult(\"different\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertFalse(commandResult.equals(CommandResultFactory.createCommandResultForHelpCommand(\"different\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertFalse(commandResult.equals(CommandResultFactory.createCommandResultForExitCommand(\"different\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // different list changing value -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertFalse(commandResult.equals(CommandResultFactory"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            .createCommandResultForEntryListChangingCommand(\"different\")));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        CommandResult commandResult \u003d CommandResultFactory.createDefaultCommandResult(\"feedback\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(commandResult.hashCode(), CommandResultFactory.createDefaultCommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            CommandResultFactory.createDefaultCommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            CommandResultFactory.createCommandResultForHelpCommand(\"different\").hashCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            CommandResultFactory.createCommandResultForExitCommand(\"different\").hashCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // different list changing value -\u003e return different hashcode"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            CommandResultFactory.createCommandResultForEntryListChangingCommand(\"different\").hashCode());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 23,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.CommonCents;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.ActiveAccountManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.testutil.EditEntryDescriptorBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String VALID_CATEGORY_EXPENSE \u003d \"expense\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String VALID_CATEGORY_REVENUE \u003d \"revenue\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String VALID_DESCRIPTION_EXPENSE \u003d \"buying flower seeds\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String VALID_DESCRIPTION_REVENUE \u003d \"selling flowers\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String VALID_AMOUNT_EXPENSE \u003d \"15.65\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String VALID_AMOUNT_REVENUE \u003d \"32.99\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String VALID_TAG_ROSES \u003d \"roses\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String VALID_TAG_SUNFLOWER \u003d \"sunflowers\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String CATEGORY_DESC_EXPENSE \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_EXPENSE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String CATEGORY_DESC_REVENUE \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_REVENUE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String DESCRIPTION_DESC_EXPENSE \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_EXPENSE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String DESCRIPTION_DESC_REVENUE \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_REVENUE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String AMOUNT_DESC_EXPENSE \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_EXPENSE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String AMOUNT_DESC_REVENUE \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_REVENUE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String TAG_DESC_ROSES \u003d \" \" + PREFIX_TAG + VALID_TAG_ROSES;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String TAG_DESC_SUNFLOWERS \u003d \" \" + PREFIX_TAG + VALID_TAG_SUNFLOWER;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String INVALID_CATEGORY_DESC \u003d \" \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            + PREFIX_CATEGORY + \"revenu\"; // only \u0027revenue\u0027 or \u0027expense\u0027 allowed"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION + \" \"; // description cannot be empty"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public static final String INVALID_AMOUNT_DESC \u003d \" \" + PREFIX_AMOUNT + \"0\"; // amount cannot be 0 in value"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public static final EditCommand.EditEntryDescriptor DESC_TYPICAL_EXPENSE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public static final EditCommand.EditEntryDescriptor DESC_TYPICAL_REVENUE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final int GENERAL_ACC_INDEX \u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        DESC_TYPICAL_EXPENSE \u003d new EditEntryDescriptorBuilder().withCategory(VALID_CATEGORY_EXPENSE)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_EXPENSE).withAmount(VALID_AMOUNT_EXPENSE)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                .withTags(VALID_TAG_ROSES).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        DESC_TYPICAL_REVENUE \u003d new EditEntryDescriptorBuilder().withCategory(VALID_CATEGORY_REVENUE)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_REVENUE).withAmount(VALID_AMOUNT_REVENUE)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                .withTags(VALID_TAG_SUNFLOWER).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                                            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        ActiveAccount activeAccount \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                new ActiveAccountManager(actualModel.getFilteredAccountList().get(GENERAL_ACC_INDEX));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, activeAccount);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        CommandResult expectedCommandResult \u003d CommandResultFactory.createDefaultCommandResult(expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * - the common cents, filtered account list and selected account in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        ActiveAccount activeAccount \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                new ActiveAccountManager(actualModel.getFilteredAccountList().get(GENERAL_ACC_INDEX));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        CommonCents expectedCommonCents \u003d new CommonCents(actualModel.getCommonCents());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        List\u003cAccount\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredAccountList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel, activeAccount));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(expectedCommonCents, actualModel.getCommonCents());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredAccountList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 46,
      "lettuceman4": 1,
      "nicholas-gcc": 13,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteAccountCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ENTRY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.testutil.TypicalEntries;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class DeleteAccountCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalEntries.getTypicalCommonCents(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account secondAccount \u003d new Account(new Name(\"Second Account\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        model.addAccount(secondAccount);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        DeleteAccountCommand deleteAccountCommand \u003d new DeleteAccountCommand(INDEX_SECOND_ENTRY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteAccountCommand.MESSAGE_DELETE_ACCOUNT_SUCCESS, secondAccount);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getCommonCents(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        expectedModel.deleteAccount(secondAccount);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertCommandSuccess(deleteAccountCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void execute_invalidIndexOutOfRange_throwCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        DeleteAccountCommand deleteAccountCommand \u003d new DeleteAccountCommand(INDEX_SECOND_ENTRY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertCommandFailure(deleteAccountCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void execute_deleteOnlyAccountLeft_throwCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        DeleteAccountCommand deleteAccountCommand \u003d new DeleteAccountCommand(INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        String expectedMessage \u003d DeleteAccountCommand.MESSAGE_ONE_ACCOUNT_LEFT;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertCommandFailure(deleteAccountCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void execute_deleteCurrentActiveAccount_throwCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account secondAccount \u003d new Account(new Name(\"Second Account\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        model.addAccount(secondAccount);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        DeleteAccountCommand deleteAccountCommand \u003d new DeleteAccountCommand(INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        String expectedMessage \u003d DeleteAccountCommand.MESSAGE_ACTIVE_ACCOUNT;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertCommandFailure(deleteAccountCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account secondAccount \u003d new Account(new Name(\"Second Account\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        model.addAccount(secondAccount);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        DeleteAccountCommand deleteFirstAccountCommand \u003d new DeleteAccountCommand(INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        DeleteAccountCommand deleteSecondAccountCommand \u003d new DeleteAccountCommand(INDEX_SECOND_ENTRY);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(deleteFirstAccountCommand.equals(deleteFirstAccountCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        DeleteAccountCommand deleteFirstAccountCommandCopy \u003d new DeleteAccountCommand(INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(deleteFirstAccountCommand.equals(deleteFirstAccountCommandCopy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(deleteFirstAccountCommand.equals(1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(deleteFirstAccountCommand.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(deleteFirstAccountCommand.equals(deleteSecondAccountCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.BUY_FLOWER_POTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.SELL_FLOWER_POTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ENTRY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_TENTH_ENTRY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.commons.core.category.Category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.model.account.ActiveAccountManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.testutil.ActiveAccountStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.testutil.TypicalEntries;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    private final Model modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    private final Category expense \u003d new Category(\"expense\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    private final Category revenue \u003d new Category(\"revenue\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    private final ActiveAccount activeAccountStub \u003d new ActiveAccountStub();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    private final ActiveAccount activeAccount \u003d new ActiveAccountManager(TypicalEntries.getTypicalAccount());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void constructor_nullEntry_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteCommand(INDEX_FIRST_ENTRY, expense)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                .execute(modelStub, activeAccountStub));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void execute_validDeleteExpense_success() throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        CommandResult commandResult \u003d new DeleteCommand(INDEX_FIRST_ENTRY, expense).execute(modelStub, activeAccount);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(String.format(DeleteCommand.MESSAGE_DELETE_ENTRY_SUCCESS, BUY_FLOWER_POTS),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        assertFalse(activeAccount.hasExpense(BUY_FLOWER_POTS));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void execute_validDeleteRevenue_success() throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        CommandResult commandResult \u003d new DeleteCommand(INDEX_FIRST_ENTRY, revenue).execute(modelStub, activeAccount);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(String.format(DeleteCommand.MESSAGE_DELETE_ENTRY_SUCCESS, SELL_FLOWER_POTS),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        assertFalse(activeAccount.hasRevenue(SELL_FLOWER_POTS));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void execute_invalidIndexExpense_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new DeleteCommand(INDEX_TENTH_ENTRY, expense)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                .execute(modelStub, activeAccount));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void execute_invalidIndexRevenue_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new DeleteCommand(INDEX_TENTH_ENTRY, revenue)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                .execute(modelStub, activeAccount));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_ENTRY, expense);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_ENTRY, revenue);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_ENTRY, expense);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 9,
      "nicholas-gcc": 7,
      "jordanyoong": 28,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditAccountNameCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class EditAccountNameCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final Account GENERAL_ACCOUNT \u003d new Account(new Name(\"General account\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void addAccount() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        model.addAccount(GENERAL_ACCOUNT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void constructor_nullAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EditAccountNameCommand(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void execute_editNameOfFirstAccount_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Name currentName \u003d GENERAL_ACCOUNT.getName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Name newName \u003d new Name(\"new Name\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        EditAccountNameCommand editAccountNameCommand \u003d new EditAccountNameCommand(newName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCommonCents(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        expectedModel.setAccount(GENERAL_ACCOUNT, new Account(newName));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        String expectedMessage \u003d String.format(EditAccountNameCommand.MESSAGE_SUCCESS, currentName.toString(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                newName.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertCommandSuccess(editAccountNameCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void execute_editDuplicatedName_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Name currentName \u003d GENERAL_ACCOUNT.getName();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Name newName \u003d new Name(\"new Name\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        model.addAccount(new Account(newName));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        EditAccountNameCommand editAccountNameCommand \u003d new EditAccountNameCommand(newName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        String expectedMessage \u003d EditAccountNameCommand.MESSAGE_DUPLICATED_NAME;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertCommandFailure(editAccountNameCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Name nameOne \u003d new Name(\"Name 1\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Name nameTwo \u003d new Name(\"Name 2\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        EditAccountNameCommand editAccountNameOneCommand \u003d new EditAccountNameCommand(nameOne);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        EditAccountNameCommand editAccountNameTwoCommand \u003d new EditAccountNameCommand(nameTwo);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(editAccountNameOneCommand.equals(editAccountNameOneCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        EditAccountNameCommand addAccountNameOneCommandCopy \u003d new EditAccountNameCommand(nameOne);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(editAccountNameOneCommand.equals(addAccountNameOneCommandCopy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(editAccountNameOneCommand.equals(1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(editAccountNameOneCommand.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(editAccountNameOneCommand.equals(editAccountNameTwoCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_TYPICAL_EXPENSE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_TYPICAL_REVENUE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ROSES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.getTypicalCommonCents;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ENTRY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.CommonCents;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Entry;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Expense;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Revenue;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.testutil.EditEntryDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.testutil.RevenueBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalCommonCents(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    private final Account account \u003d model.getFilteredAccountList().get(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    private final ExpenseBuilder expenseBuilder \u003d new ExpenseBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    private final RevenueBuilder revenueBuilder \u003d new RevenueBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void execute_allExpenseFieldsSpecifiedList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Expense editedExpense \u003d expenseBuilder.build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder(editedExpense).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ENTRY, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CommonCents(model.getCommonCents()), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Account expectedAccount \u003d expectedModel.getFilteredAccountList().get(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        expectedAccount.setExpense(account.getExpenseList().get(0), editedExpense);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void execute_allRevenueFieldsSpecifiedList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Revenue editedRevenue \u003d revenueBuilder.build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder(editedRevenue).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ENTRY, descriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_SUCCESS, editedRevenue);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CommonCents(model.getCommonCents()), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Account expectedAccount \u003d expectedModel.getFilteredAccountList().get(0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        expectedAccount.setRevenue(account.getRevenueList().get(0), editedRevenue);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void execute_someFieldsSpecifiedList_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Index indexLastExpense \u003d Index.fromOneBased(account.getExpenseList().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Entry lastEntry \u003d account.getExpenseList().get(indexLastExpense.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assert(lastEntry instanceof Expense);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        ExpenseBuilder expenseInList \u003d new ExpenseBuilder((Expense) lastEntry);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Expense editedExpense \u003d expenseInList.withDescription(VALID_DESCRIPTION_EXPENSE)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                .withTags(VALID_TAG_ROSES).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder().withCategory(\"expense\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_EXPENSE).withTags(VALID_TAG_ROSES).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastExpense, descriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CommonCents(model.getCommonCents()), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Account expectedAccount \u003d expectedModel.getFilteredAccountList().get(0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        expectedAccount.setExpense(account.getExpenseList().get(0), editedExpense);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void execute_noFieldSpecifiedList_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder().withCategory(\"expense\").build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ENTRY, descriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Expense editedExpense \u003d account.getExpenseList().get(INDEX_FIRST_ENTRY.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CommonCents(model.getCommonCents()), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void execute_invalidExpenseIndexList_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(account.getExpenseList().size() + 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder().withCategory(\"expense\").build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void execute_invalidRevenueIndexList_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(account.getRevenueList().size() + 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder().withCategory(\"revenue\").build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        final EditCommand standardCommandExpense \u003d new EditCommand(INDEX_FIRST_ENTRY,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                DESC_TYPICAL_EXPENSE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        final EditCommand standardCommandRevenue \u003d new EditCommand(INDEX_FIRST_ENTRY,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                DESC_TYPICAL_REVENUE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditEntryDescriptor copyDescriptorExpense \u003d new EditEntryDescriptor(DESC_TYPICAL_EXPENSE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditCommand commandWithSameValuesExpense \u003d new EditCommand(INDEX_FIRST_ENTRY, copyDescriptorExpense);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertTrue(standardCommandExpense.equals(commandWithSameValuesExpense));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditEntryDescriptor copyDescriptorRevenue \u003d new EditEntryDescriptor(DESC_TYPICAL_REVENUE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditCommand commandWithSameValuesRevenue \u003d new EditCommand(INDEX_FIRST_ENTRY, copyDescriptorRevenue);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertTrue(standardCommandRevenue.equals(commandWithSameValuesRevenue));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertTrue(standardCommandExpense.equals(standardCommandExpense));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertTrue(standardCommandRevenue.equals(standardCommandRevenue));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertFalse(standardCommandExpense.equals(null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertFalse(standardCommandRevenue.equals(null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertFalse(standardCommandExpense.equals(new ExitCommand()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertFalse(standardCommandRevenue.equals(new ExitCommand()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertFalse(standardCommandExpense.equals(new EditCommand(INDEX_SECOND_ENTRY,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                DESC_TYPICAL_EXPENSE)));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertFalse(standardCommandRevenue.equals(new EditCommand(INDEX_SECOND_ENTRY,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                DESC_TYPICAL_REVENUE)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertFalse(standardCommandExpense.equals(new EditCommand(INDEX_FIRST_ENTRY,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                DESC_TYPICAL_REVENUE)));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholas-gcc": 90,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(\"Exiting Common Cents as requested ... Good bye.\", expectedCommandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 2,
      "lettuceman4": 1,
      "jordanyoong": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EMPTY_FILTERED_LIST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ENTRIES_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.ActiveAccountManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.ExpenseDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.RevenueDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.testutil.TypicalEntries;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private final Model modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private final ActiveAccount activeAccount \u003d new ActiveAccountManager(TypicalEntries.getTypicalAccount());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        ExpenseDescriptionContainsKeywordsPredicate firstExpensePredicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            new ExpenseDescriptionContainsKeywordsPredicate(Collections.singletonList(\"firstExpense\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        ExpenseDescriptionContainsKeywordsPredicate secondExpensePredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            new ExpenseDescriptionContainsKeywordsPredicate(Collections.singletonList(\"secondExpense\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        RevenueDescriptionContainsKeywordsPredicate firstRevenuePredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            new RevenueDescriptionContainsKeywordsPredicate(Collections.singletonList(\"firstRevenue\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        RevenueDescriptionContainsKeywordsPredicate secondRevenuePredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            new RevenueDescriptionContainsKeywordsPredicate(Collections.singletonList(\"secondRevenue\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        FindCommand findFirstExpenseCommand \u003d new FindCommand(firstExpensePredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        FindCommand findSecondExpenseCommand \u003d new FindCommand(secondExpensePredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        FindCommand findFirstRevenueCommand \u003d new FindCommand(firstRevenuePredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        FindCommand findSecondRevenueCommand \u003d new FindCommand(secondRevenuePredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        FindCommand findBothCommand \u003d new FindCommand(firstExpensePredicate, firstRevenuePredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(findFirstExpenseCommand, findFirstExpenseCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(findFirstRevenueCommand, findFirstRevenueCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        FindCommand findFirstExpenseCommandCopy \u003d new FindCommand(firstExpensePredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(findFirstExpenseCommand, findFirstExpenseCommandCopy);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        FindCommand findFirstRevenueCommandCopy \u003d new FindCommand(firstRevenuePredicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(findFirstRevenueCommand, findFirstRevenueCommandCopy);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        FindCommand findBothCommandCopy \u003d new FindCommand(firstExpensePredicate, firstRevenuePredicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(findBothCommandCopy, findBothCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(1, findFirstExpenseCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(1, findFirstRevenueCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(1, findBothCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(null, findFirstExpenseCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(null, findFirstRevenueCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(null, findBothCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // different entries -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(findFirstExpenseCommand, findSecondExpenseCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(findFirstRevenueCommand, findSecondRevenueCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(findFirstExpenseCommand, findSecondRevenueCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void execute_nonexistentKeyword_noExpenseFound() throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        ExpenseDescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            new ExpenseDescriptionContainsKeywordsPredicate(Collections.singletonList(\"NONE\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        CommandResult expectedCommandResult \u003d CommandResultFactory"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            .createDefaultCommandResult(MESSAGE_EMPTY_FILTERED_LIST);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        CommandResult actualCommandResult \u003d new FindCommand(predicate).execute(modelStub, activeAccount);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(expectedCommandResult, actualCommandResult);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void execute_nonexistentKeyword_noRevenueFound() throws CommandException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        RevenueDescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            new RevenueDescriptionContainsKeywordsPredicate(Collections.singletonList(\"NONE\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        CommandResult expectedCommandResult \u003d CommandResultFactory"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            .createDefaultCommandResult(MESSAGE_EMPTY_FILTERED_LIST);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        CommandResult actualCommandResult \u003d new FindCommand(predicate).execute(modelStub, activeAccount);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(expectedCommandResult, actualCommandResult);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void execute_nonexistentKeyword_noEntryFound() throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        ExpenseDescriptionContainsKeywordsPredicate predicateExpense \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            new ExpenseDescriptionContainsKeywordsPredicate(Collections.singletonList(\"NONE\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        RevenueDescriptionContainsKeywordsPredicate predicateRevenue \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            new RevenueDescriptionContainsKeywordsPredicate(Collections.singletonList(\"NONE\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        CommandResult expectedCommandResult \u003d CommandResultFactory"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            .createDefaultCommandResult(MESSAGE_EMPTY_FILTERED_LIST);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        CommandResult actualCommandResult \u003d new FindCommand(predicateExpense, predicateRevenue)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            .execute(modelStub, activeAccount);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(expectedCommandResult, actualCommandResult);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void execute_validKeywords_foundInExpenseList() throws CommandException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        ExpenseDescriptionContainsKeywordsPredicate predicateExpense \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            new ExpenseDescriptionContainsKeywordsPredicate(Collections.singletonList(\"shovel\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        CommandResult expectedCommandResult \u003d CommandResultFactory"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            .createDefaultCommandResult(MESSAGE_ENTRIES_UPDATED);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        CommandResult actualCommandResult \u003d new FindCommand(predicateExpense).execute(modelStub, activeAccount);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(expectedCommandResult, actualCommandResult);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void execute_validKeywords_foundInRevenueList() throws CommandException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        RevenueDescriptionContainsKeywordsPredicate predicateRevenue \u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            new RevenueDescriptionContainsKeywordsPredicate(Collections.singletonList(\"sold\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        CommandResult expectedCommandResult \u003d CommandResultFactory"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            .createDefaultCommandResult(MESSAGE_ENTRIES_UPDATED);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        CommandResult actualCommandResult \u003d new FindCommand(predicateRevenue).execute(modelStub, activeAccount);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(expectedCommandResult, actualCommandResult);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void execute_validKeywords_foundInEitherList() throws CommandException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        ExpenseDescriptionContainsKeywordsPredicate predicateExpense \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            new ExpenseDescriptionContainsKeywordsPredicate(Collections.singletonList(\"shovel\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        RevenueDescriptionContainsKeywordsPredicate predicateRevenue \u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            new RevenueDescriptionContainsKeywordsPredicate(Collections.singletonList(\"flower\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        CommandResult expectedCommandResult \u003d CommandResultFactory"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            .createDefaultCommandResult(MESSAGE_ENTRIES_UPDATED);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        CommandResult actualCommandResult \u003d new FindCommand(predicateExpense, predicateRevenue)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            .execute(modelStub, activeAccount);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(expectedCommandResult, actualCommandResult);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void execute_validMultipleKeyWords_foundInEitherList() throws CommandException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        ExpenseDescriptionContainsKeywordsPredicate predicateExpense \u003d prepareExpensePredicate(\"rent flower\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        RevenueDescriptionContainsKeywordsPredicate predicateRevenue \u003d prepareRevenuePredicate(\"rent flower\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        CommandResult expectedCommandResult \u003d CommandResultFactory"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            .createDefaultCommandResult(MESSAGE_ENTRIES_UPDATED);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        CommandResult actualCommandResult \u003d new FindCommand(predicateExpense, predicateRevenue)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            .execute(modelStub, activeAccount);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(expectedCommandResult, actualCommandResult);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Parses {@code userInput} into a {@code ExpenseDescriptionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private ExpenseDescriptionContainsKeywordsPredicate prepareExpensePredicate(String userInput) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return new ExpenseDescriptionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Parses {@code userInput} into a {@code ExpenseDescriptionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private RevenueDescriptionContainsKeywordsPredicate prepareRevenuePredicate(String userInput) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return new RevenueDescriptionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 128,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GetProfitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.model.account.ActiveAccountManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.testutil.TypicalEntries;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "class GetProfitCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    private final Model modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    private final ActiveAccount activeAccount \u003d new ActiveAccountManager(TypicalEntries.getTypicalAccount());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    void execute_validAccount_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        CommandResult commandResult \u003d new GetProfitCommand().execute(modelStub, activeAccount);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Double profit \u003d activeAccount.getProfits();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertEquals(GetProfitCommand.MESSAGE_SUCCESS + String.format(\"%.2f\", profit),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "            commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheoksuanne": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.getTypicalAccount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        model.addAccount(getTypicalAccount());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        expectedModel.addAccount(getTypicalAccount());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 4,
      "lettuceman4": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListAccountCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.getTypicalAccount;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class ListAccountCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void execute_listacc_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        model.addAccount(getTypicalAccount());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        expectedModel.addAccount(getTypicalAccount());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        ListAccountCommand listacc \u003d new ListAccountCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                new CommandResultFactory().createDefaultCommandResult(listacc"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                        .accountsToString(expectedModel.getFilteredAccountList()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertCommandSuccess(listacc, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 23,
      "nicholas-gcc": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.getTypicalCommonCents;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        model \u003d new ModelManager(getTypicalCommonCents(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getCommonCents(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 3,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SwitchAccountCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ENTRY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ENTRY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.ActiveAccountManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.testutil.TypicalEntries;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class SwitchAccountCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalEntries.getTypicalCommonCents(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private ActiveAccount activeAccount \u003d new ActiveAccountManager(TypicalEntries.getTypicalAccount());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void addAccount() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        model.addAccount(new Account(new Name(\"Account 2\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account accountToSwitch \u003d model.getFilteredAccountList().get(INDEX_SECOND_ENTRY.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        SwitchAccountCommand switchAccountCommand \u003d new SwitchAccountCommand(INDEX_SECOND_ENTRY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        String expectedMessage \u003d String.format(SwitchAccountCommand.MESSAGE_SWITCH_ACCOUNT_SUCCESS, accountToSwitch);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getCommonCents(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertCommandSuccess(switchAccountCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void execute_invalidIndexOutOfRange_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        SwitchAccountCommand switchAccountCommand \u003d new SwitchAccountCommand(INDEX_THIRD_ENTRY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertCommandFailure(switchAccountCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void execute_invalidIndexSameAccount_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        SwitchAccountCommand switchAccountCommand \u003d new SwitchAccountCommand(INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        String expectedMessage \u003d SwitchAccountCommand.MESSAGE_ACTIVE_ACCOUNT;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertCommandFailure(switchAccountCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        SwitchAccountCommand switchFirstAccountCommand \u003d new SwitchAccountCommand(INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        SwitchAccountCommand switchSecondAccountCommand \u003d new SwitchAccountCommand(INDEX_SECOND_ENTRY);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(switchFirstAccountCommand.equals(switchFirstAccountCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        SwitchAccountCommand switchFirstAccountCommandCopy \u003d new SwitchAccountCommand(INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(switchFirstAccountCommand.equals(switchFirstAccountCommandCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(switchFirstAccountCommand.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(switchFirstAccountCommand.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(switchFirstAccountCommand.equals(switchSecondAccountCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.commons.core.category.Category;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.ActiveAccountManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Expense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.testutil.EditEntryDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.testutil.TypicalEntries;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final Model model \u003d new ModelManager(TypicalEntries.getTypicalCommonCents(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final ActiveAccount activeAccount \u003d new ActiveAccountManager(TypicalEntries.getTypicalAccount());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void execute_undoAddCommand_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        ExpenseBuilder expenseBuilder \u003d new ExpenseBuilder().withDescription(\"test\").withAmount(\"0.39\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Expense expenseStub \u003d expenseBuilder.build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(expenseStub);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        addCommand.execute(model, activeAccount);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(TypicalEntries.getTypicalCommonCents(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                CommandResultFactory.createCommandResultForEntryListChangingCommand(UndoCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            CommandResult result \u003d undoCommand.execute(model, activeAccount);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void execute_undoDeleteCommand_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ENTRY, new Category(\"e\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(TypicalEntries.getTypicalCommonCents(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                CommandResultFactory.createCommandResultForEntryListChangingCommand(UndoCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            deleteCommand.execute(model, activeAccount);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            CommandResult result \u003d undoCommand.execute(model, activeAccount);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void execute_undoEditCommand_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        EditEntryDescriptorBuilder editEntryDescriptorBuilder \u003d new EditEntryDescriptorBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        editEntryDescriptorBuilder.withDescription(\"new description\").withAmount(\"1242.45\").withCategory(\"e\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ENTRY, editEntryDescriptorBuilder.build());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(TypicalEntries.getTypicalCommonCents(), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                CommandResultFactory.createCommandResultForEntryListChangingCommand(UndoCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            editCommand.execute(model, activeAccount);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            CommandResult result \u003d undoCommand.execute(model, activeAccount);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void execute_undoClearCommand_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        ClearCommand clearCommand \u003d new ClearCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(TypicalEntries.getTypicalCommonCents(), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                CommandResultFactory.createCommandResultForEntryListChangingCommand(UndoCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            clearCommand.execute(model, activeAccount);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            CommandResult result \u003d undoCommand.execute(model, activeAccount);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void execute_hasNoPreviousState_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        String expectedMessage \u003d UndoCommand.MESSAGE_NO_PREVIOUS_COMMAND;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertCommandFailure(undoCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddAccountCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.logic.commands.AddAccountCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.model.account.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.testutil.TypicalEntries;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "class AddAccountCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    private AddAccountCommandParser parser \u003d new AddAccountCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    private Account accountStub \u003d TypicalEntries.getTypicalAccount();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void parse_validAccount_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        String userInput \u003d \" n/\" + accountStub.getName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertParseSuccess(parser, userInput, new AddAccountCommand(accountStub));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void parse_invalidInput_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAccountCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        //incorrect format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertParseFailure(parser, \"General Account\", expectedMessage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        //no arguments"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void parse_missingName_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertParseFailure(parser, \" n/\", expectedMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheoksuanne": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_PREFIXES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_EXPENSE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_REVENUE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_REVENUE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_EXPENSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_REVENUE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_ROSES;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SUNFLOWERS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_EXPENSE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_REVENUE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_EXPENSE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_REVENUE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ROSES;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SUNFLOWER;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.commons.core.category.Category;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Expense;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Revenue;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.testutil.RevenueBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    private ExpenseBuilder expenseBuilder \u003d new ExpenseBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    private RevenueBuilder revenueBuilder \u003d new RevenueBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Expense expenseStub \u003d expenseBuilder.withDescription(VALID_DESCRIPTION_EXPENSE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                .withAmount(VALID_AMOUNT_EXPENSE).withTags(VALID_TAG_ROSES).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Revenue revenueStub \u003d revenueBuilder.withDescription(VALID_DESCRIPTION_REVENUE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                .withAmount(VALID_AMOUNT_REVENUE).withTags(VALID_TAG_SUNFLOWER).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Expense expenseStubSeveralTags \u003d expenseBuilder.withDescription(VALID_DESCRIPTION_EXPENSE)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                .withAmount(VALID_AMOUNT_EXPENSE).withTags(VALID_TAG_ROSES, VALID_TAG_SUNFLOWER).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Revenue revenueStubSeveralTags \u003d revenueBuilder.withDescription(VALID_DESCRIPTION_REVENUE)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                .withAmount(VALID_AMOUNT_REVENUE).withTags(VALID_TAG_ROSES, VALID_TAG_SUNFLOWER).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        //for parsing expenses with one tag"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseSuccess(parser, CATEGORY_DESC_EXPENSE + DESCRIPTION_DESC_EXPENSE"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + AMOUNT_DESC_EXPENSE + TAG_DESC_ROSES, new AddCommand(expenseStub));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        //for parsing revenues with one tag"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseSuccess(parser, CATEGORY_DESC_REVENUE + DESCRIPTION_DESC_REVENUE"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + AMOUNT_DESC_REVENUE + TAG_DESC_SUNFLOWERS, new AddCommand(revenueStub));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        //for parsing expenses with more than one tag"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseSuccess(parser, CATEGORY_DESC_EXPENSE + DESCRIPTION_DESC_EXPENSE"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + AMOUNT_DESC_EXPENSE + TAG_DESC_ROSES + TAG_DESC_SUNFLOWERS,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                new AddCommand(expenseStubSeveralTags));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        //for parsing revenues with more than one tag"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseSuccess(parser, CATEGORY_DESC_REVENUE + DESCRIPTION_DESC_REVENUE"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + AMOUNT_DESC_REVENUE + TAG_DESC_ROSES + TAG_DESC_SUNFLOWERS,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                new AddCommand(revenueStubSeveralTags));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void parse_optionalTagsMissing_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Expense expenseStub \u003d expenseBuilder.withDescription(VALID_DESCRIPTION_EXPENSE)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                .withAmount(VALID_AMOUNT_EXPENSE).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Revenue revenueStub \u003d revenueBuilder.withDescription(VALID_DESCRIPTION_REVENUE)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                .withAmount(VALID_AMOUNT_REVENUE).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        //for parsing expenses without tags"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseSuccess(parser, CATEGORY_DESC_EXPENSE + DESCRIPTION_DESC_EXPENSE"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + AMOUNT_DESC_EXPENSE, new AddCommand(expenseStub));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        //for parsing revenues without tags"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseSuccess(parser, CATEGORY_DESC_REVENUE + DESCRIPTION_DESC_REVENUE"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + AMOUNT_DESC_REVENUE, new AddCommand(revenueStub));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void parse_compulsoryFieldsMissing_failure() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        //missing category field"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_EXPENSE + AMOUNT_DESC_EXPENSE"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + TAG_DESC_ROSES, expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        //missing description field"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseFailure(parser, CATEGORY_DESC_EXPENSE + AMOUNT_DESC_EXPENSE"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + TAG_DESC_ROSES, expectedMessage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        //missing amount field"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseFailure(parser, CATEGORY_DESC_EXPENSE + DESCRIPTION_DESC_EXPENSE"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + TAG_DESC_ROSES, expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        //all prefixes missing"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseFailure(parser, VALID_AMOUNT_EXPENSE + VALID_DESCRIPTION_EXPENSE"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + VALID_AMOUNT_EXPENSE + VALID_TAG_ROSES , expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void parse_extraPrefixes() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MULTIPLE_PREFIXES, AddCommand.PREFIXES);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        // Extra prefixes"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, CATEGORY_DESC_EXPENSE + CATEGORY_DESC_EXPENSE"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                + AMOUNT_DESC_EXPENSE + DESCRIPTION_DESC_EXPENSE + TAG_DESC_ROSES, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_noPrefixPresent() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // No prefix present"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\" + CATEGORY_DESC_EXPENSE + AMOUNT_DESC_EXPENSE"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                + DESCRIPTION_DESC_EXPENSE + TAG_DESC_ROSES, expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void parse_invalidField_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        //invalid category"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseFailure(parser, INVALID_CATEGORY_DESC + DESCRIPTION_DESC_EXPENSE"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + AMOUNT_DESC_EXPENSE + TAG_DESC_ROSES, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        //invalid description"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseFailure(parser, CATEGORY_DESC_EXPENSE + INVALID_DESCRIPTION_DESC"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + AMOUNT_DESC_EXPENSE + TAG_DESC_ROSES, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        //invalid amount"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseFailure(parser, CATEGORY_DESC_EXPENSE + DESCRIPTION_DESC_EXPENSE"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + INVALID_AMOUNT_DESC + TAG_DESC_ROSES, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        //invalid tag"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseFailure(parser, CATEGORY_DESC_EXPENSE + DESCRIPTION_DESC_EXPENSE"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + AMOUNT_DESC_EXPENSE + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        //invalid tag"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        assertParseFailure(parser, CATEGORY_DESC_EXPENSE + DESCRIPTION_DESC_EXPENSE"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                + AMOUNT_DESC_EXPENSE + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholas-gcc": 99,
      "jordanyoong": 10,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.parser.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 3,
      "-": 150
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClearCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_PREFIXES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.commons.core.category.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": " * outside of the ClearCommand code. The path variation for those two cases occur inside the ParserUtil,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": " * and therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "public class ClearCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    private final ClearCommandParser parser \u003d new ClearCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    private final Category expense \u003d new Category(\"expense\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    private final Category revenue \u003d new Category(\"revenue\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void parse_validExpense_returnsClearCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        assertParseSuccess(parser, \"clear c/expense\", new ClearCommand(expense));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void parse_validRevenue_returnsClearCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        assertParseSuccess(parser, \"clear c/revenue\", new ClearCommand(revenue));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            ClearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void parse_multipleSamePrefix_throwsParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertParseFailure(parser, \"clear c/revenue c/r\", String.format(MESSAGE_MULTIPLE_PREFIXES,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            ClearCommand.PREFIXES));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void parse_nonEmptyPreample_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertParseFailure(parser, \"clearc/revenue\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            ClearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 15,
      "nicholas-gcc": 1,
      "jordanyoong": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommonCentsParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.getTypicalAccount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.commons.core.category.Category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.AddAccountCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.DeleteAccountCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.EditAccountNameCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.GetProfitCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.ListAccountCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.SwitchAccountCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Expense;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.ExpenseDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Revenue;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.RevenueDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.testutil.EditEntryDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.testutil.EntryUtil;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.testutil.RevenueBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.testutil.TypicalEntries;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class CommonCentsParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final CommonCentsParser parser \u003d new CommonCentsParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void parseAddCommand_addExpense() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(EntryUtil.getAddCommand(expense));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(new AddCommand(expense), command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void parseAddCommand_addRevenue() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Revenue revenue \u003d new RevenueBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(EntryUtil.getAddCommand(revenue));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(new AddCommand(revenue), command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void parseDeleteCommand_deleteExpense() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Category category \u003d new Category(EntryUtil.EXPENSE_STRING);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_ENTRY, category),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                parser.parseCommand(EntryUtil.getDeleteExpenseCommand()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void parseDeleteCommand_deleteRevenue() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Category category \u003d new Category(EntryUtil.REVENUE_STRING);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_ENTRY, category),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                parser.parseCommand(EntryUtil.getDeleteRevenueCommand()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void parseEditCommandForExpense_validArguments_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Expense expense \u003d TypicalEntries.PAY_RENT;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditCommand.EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder(expense).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditCommand actualCommand \u003d (EditCommand) parser.parseCommand(EntryUtil.getValidEditExpenseCommand());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(INDEX_FIRST_ENTRY, descriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void parseEditCommandForRevenue_validArguments_success() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Revenue revenue \u003d TypicalEntries.SELL_FLOWER_SEEDS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditCommand.EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder(revenue).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditCommand actualCommand \u003d (EditCommand) parser.parseCommand(EntryUtil.getValidEditRevenueCommand());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(INDEX_FIRST_ENTRY, descriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void parseFindCommand_validArguments_success() throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        List\u003cString\u003e expenseKeywords \u003d Arrays.asList(\"flowers\", \"food\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        List\u003cString\u003e revenueKeywords \u003d Arrays.asList(\"canvas\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        List\u003cString\u003e generalKeywords \u003d Arrays.asList(\"rent\", \"flowers\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        FindCommand actualFindCommandExpense \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                EntryUtil.getValidFindExpenseCommand());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        FindCommand expectedFindCommandExpense \u003d new FindCommand("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                new ExpenseDescriptionContainsKeywordsPredicate(expenseKeywords));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertEquals(expectedFindCommandExpense, actualFindCommandExpense);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        FindCommand actualFindCommandRevenue \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                EntryUtil.getValidFindRevenueCommand());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        FindCommand expectedFindCommandRevenue \u003d new FindCommand("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                new RevenueDescriptionContainsKeywordsPredicate(revenueKeywords));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertEquals(expectedFindCommandRevenue, actualFindCommandRevenue);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        FindCommand actualFindCommandGeneral \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                EntryUtil.getValidFindGeneralCommand());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        FindCommand expectedFindCommandGeneral \u003d new FindCommand("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                new ExpenseDescriptionContainsKeywordsPredicate(generalKeywords),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                new RevenueDescriptionContainsKeywordsPredicate(generalKeywords));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertEquals(expectedFindCommandGeneral, actualFindCommandGeneral);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void parseValidListCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void parseValidClearCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        ClearCommand expectedExpenseClearCommand \u003d new ClearCommand(new Category(\"expense\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        ClearCommand actualExpenseClearCommand \u003d (ClearCommand) parser.parseCommand("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                EntryUtil.getValidClearExpenseCommand());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertEquals(expectedExpenseClearCommand, actualExpenseClearCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        ClearCommand expectedRevenueClearCommand \u003d new ClearCommand(new Category(\"revenue\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        ClearCommand actualRevenueClearCommand \u003d (ClearCommand) parser.parseCommand("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                EntryUtil.getValidClearRevenueCommand());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertEquals(expectedRevenueClearCommand, actualRevenueClearCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void parseValidProfitCommand_success() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertTrue(parser.parseCommand(GetProfitCommand.COMMAND_WORD) instanceof GetProfitCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertTrue(parser.parseCommand(GetProfitCommand.COMMAND_WORD + \" 3\") instanceof GetProfitCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void parseValidUndoCommand_success() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD + \" 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void parseValidAddAccCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        AddAccountCommand actualCommand \u003d (AddAccountCommand) parser.parseCommand("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                EntryUtil.getValidAddAccountCommand());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        AddAccountCommand expectedCommand \u003d new AddAccountCommand(new Account(new Name(\"newacc\")));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void parseValidEditAccCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditAccountNameCommand actualCommand \u003d (EditAccountNameCommand) parser.parseCommand("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                EntryUtil.getValidEditAccountCommand());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditAccountNameCommand expectedCommand \u003d new EditAccountNameCommand(new Name(\"anotheracc\"));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void parseValidDeleteAccCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        DeleteAccountCommand actualCommand \u003d (DeleteAccountCommand) parser.parseCommand("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                EntryUtil.getValidDeleteAccountCommand());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        DeleteAccountCommand expectedCommand \u003d new DeleteAccountCommand(INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void parseValidSwitchAccCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        SwitchAccountCommand actualCommand \u003d (SwitchAccountCommand) parser.parseCommand("
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                EntryUtil.getValidSwitchAccountCommand());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        SwitchAccountCommand expectedCommand \u003d new SwitchAccountCommand(INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void parseValidListAccCommand_success() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertTrue(parser.parseCommand(ListAccountCommand.COMMAND_WORD) instanceof ListAccountCommand);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertTrue(parser.parseCommand(ListAccountCommand.COMMAND_WORD + \" 3\") instanceof ListAccountCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void parseAddAccountCommand() throws Exception {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account acc \u003d getTypicalAccount();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 81,
      "nicholas-gcc": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteAccountCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.logic.commands.DeleteAccountCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.testutil.TypicalEntries;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "class DeleteAccountCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    private DeleteAccountCommandParser parser \u003d new DeleteAccountCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    private Account accountStub \u003d TypicalEntries.getTypicalAccount();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void parse_validIndex_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteAccountCommand(INDEX_FIRST_ENTRY));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void parse_invalidArgs_failure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAccountCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        //non-integer index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertParseFailure(parser, \"a\", expectedMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        //negative index"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertParseFailure(parser, \"-1\", expectedMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        //too many arguments"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertParseFailure(parser, \"1 2\", expectedMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        //no index specified"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheoksuanne": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_PREFIXES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import seedu.address.commons.core.category.Category;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    private final Category expense \u003d new Category(\"expense\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    private final Category revenue \u003d new Category(\"revenue\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void parse_validExpense_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertParseSuccess(parser, \"1 c/expense\", new DeleteCommand(INDEX_FIRST_ENTRY, expense));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void parse_validRevenue_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertParseSuccess(parser, \"1 c/revenue\", new DeleteCommand(INDEX_FIRST_ENTRY, revenue));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void parse_extraPrefixes() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MULTIPLE_PREFIXES, DeleteCommand.PREFIXES);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        // Extra prefixes"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        assertParseFailure(parser, \"1 c/revenue c/revenue\", expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_noPrefixPresent() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No prefix present"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"c/revenue\", expectedMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 3,
      "jordanyoong": 16,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditAccountNameCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.logic.commands.EditAccountNameCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.model.account.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "class EditAccountNameCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    private EditAccountNameCommandParser parser \u003d new EditAccountNameCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    private Name editedName \u003d new Name(\"my account\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void parse_validName_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertParseSuccess(parser, \" n/my account\", new EditAccountNameCommand(editedName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void parse_missingName_failure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertParseFailure(parser, \" n/\", expectedMessage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void parse_invalidArgs_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditAccountNameCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        //invalid argument"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertParseFailure(parser, \"a\", expectedMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        //empty argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheoksuanne": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_EXPENSE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_REVENUE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_REVENUE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_EXPENSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_REVENUE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_ROSES;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SUNFLOWERS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_EXPENSE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_EXPENSE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_EXPENSE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ROSES;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ENTRY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.commons.core.category.Category;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Amount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Expense;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Revenue;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.testutil.EditEntryDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.testutil.EntryUtil;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.testutil.TypicalEntries;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseFailure(parser, VALID_CATEGORY_EXPENSE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseFailure(parser, \"-5\" + CATEGORY_DESC_EXPENSE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseFailure(parser, \"0\" + CATEGORY_DESC_REVENUE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CATEGORY_DESC, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_DESC_REVENUE + INVALID_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_DESC_EXPENSE + INVALID_AMOUNT_DESC,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_DESC_REVENUE + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        //valid category, followed by invalid description, followed by valid amount"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_DESC_EXPENSE + INVALID_DESCRIPTION_DESC"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            + AMOUNT_DESC_EXPENSE, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        //valid category, followed by valid description, followed by invalid description"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_DESC_EXPENSE + DESCRIPTION_DESC_EXPENSE"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                + INVALID_DESCRIPTION_DESC, String.format(Messages.MESSAGE_MULTIPLE_PREFIXES, EditCommand.PREFIXES));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Entry} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_DESC_EXPENSE + TAG_DESC_ROSES"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + TAG_DESC_SUNFLOWERS + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_DESC_REVENUE + TAG_DESC_ROSES + TAG_EMPTY"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                        + TAG_DESC_SUNFLOWERS, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_DESC_EXPENSE + TAG_EMPTY + TAG_DESC_ROSES"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                        + TAG_DESC_SUNFLOWERS, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_DESC_REVENUE + INVALID_DESCRIPTION_DESC"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                        + AMOUNT_DESC_REVENUE + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_ENTRY;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_EXPENSE + AMOUNT_DESC_EXPENSE"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + TAG_DESC_ROSES;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_EXPENSE).withAmount(VALID_AMOUNT_EXPENSE)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                .withTags(VALID_TAG_ROSES).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertParseFailure(parser, userInput, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_ENTRY;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CATEGORY_DESC_EXPENSE + DESCRIPTION_DESC_EXPENSE"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + AMOUNT_DESC_EXPENSE + TAG_DESC_ROSES;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder().withCategory(VALID_CATEGORY_EXPENSE)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_EXPENSE).withAmount(VALID_AMOUNT_EXPENSE)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                .withTags(VALID_TAG_ROSES).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void parse_someOptionalFieldsSpecified_success() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CATEGORY_DESC_EXPENSE + DESCRIPTION_DESC_EXPENSE;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder().withCategory(\"expense\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_EXPENSE).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void parse_multipleRepeatedFields_failure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CATEGORY_DESC_EXPENSE + DESCRIPTION_DESC_EXPENSE"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + AMOUNT_DESC_EXPENSE + TAG_DESC_ROSES + CATEGORY_DESC_EXPENSE + DESCRIPTION_DESC_EXPENSE"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + AMOUNT_DESC_EXPENSE + TAG_DESC_ROSES + CATEGORY_DESC_REVENUE + DESCRIPTION_DESC_REVENUE"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + AMOUNT_DESC_REVENUE + TAG_DESC_ROSES;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(Messages.MESSAGE_MULTIPLE_PREFIXES, EditCommand.PREFIXES));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void parse_invalidOptionalValueFollowedByValidValue_failure() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CATEGORY_DESC_EXPENSE + INVALID_DESCRIPTION_DESC"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + DESCRIPTION_DESC_EXPENSE;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(Messages.MESSAGE_MULTIPLE_PREFIXES, EditCommand.PREFIXES));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CATEGORY_DESC_EXPENSE + INVALID_DESCRIPTION_DESC"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + AMOUNT_DESC_EXPENSE + DESCRIPTION_DESC_EXPENSE;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(Messages.MESSAGE_MULTIPLE_PREFIXES, EditCommand.PREFIXES));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_ENTRY;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CATEGORY_DESC_EXPENSE + TAG_EMPTY;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder().withCategory(VALID_CATEGORY_EXPENSE)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                .withTags().build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void parseEditCommand_editExpense() throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Expense expense \u003d TypicalEntries.PAY_RENT;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder(expense).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditCommand actualCommand \u003d parser.parse(INDEX_FIRST_ENTRY.getOneBased()"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + \" \" + EntryUtil.getEntryDetails(TypicalEntries.PAY_RENT));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(INDEX_FIRST_ENTRY, descriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void parseEditCommand_editRevenue() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Revenue revenue \u003d TypicalEntries.SELL_FLOWER_SEEDS;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder(revenue).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditCommand actualCommand \u003d parser.parse(INDEX_FIRST_ENTRY.getOneBased()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + \" \" + EntryUtil.getEntryDetails(TypicalEntries.SELL_FLOWER_SEEDS));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(INDEX_FIRST_ENTRY, descriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 7,
      "nicholas-gcc": 114,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_KEYWORDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.ExpenseDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.RevenueDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final String WHITE_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final String KEYWORDS \u003d \"pots flower rent\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String EXPENSE_STRING \u003d \"expense\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String REVENUE_STRING \u003d \"revenue\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final String INVALID_USER_INPUT_NO_KEYWORDS \u003d WHITE_SPACE + PREFIX_KEYWORDS + WHITE_SPACE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final String VALID_USER_INPUT_NO_CATEGORY \u003d WHITE_SPACE + PREFIX_KEYWORDS + KEYWORDS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final String VALID_USER_INPUT_WITH_EXPENSE_CATEGORY \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        WHITE_SPACE + PREFIX_CATEGORY + EXPENSE_STRING + VALID_USER_INPUT_NO_CATEGORY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final String VALID_USER_INPUT_WITH_REVENUE_CATEGORY \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        WHITE_SPACE + PREFIX_CATEGORY + REVENUE_STRING + VALID_USER_INPUT_NO_CATEGORY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final String EMPTY_KEYWORDS_MESSAGE \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        FindCommand.EMPTY_KEYWORD_LIST_MESSAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void parse_validArgs_returnsFindCommandWithBothPredicates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        List\u003cString\u003e keywordList \u003d Arrays.asList(\"pots\", \"flower\", \"rent\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        ExpenseDescriptionContainsKeywordsPredicate expensePredicate \u003d new"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            ExpenseDescriptionContainsKeywordsPredicate(keywordList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        RevenueDescriptionContainsKeywordsPredicate revenuePredicate \u003d new"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            RevenueDescriptionContainsKeywordsPredicate(keywordList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(expensePredicate, revenuePredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertParseSuccess(parser, VALID_USER_INPUT_NO_CATEGORY, expectedFindCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void parse_validArgs_returnsFindCommandWithExpensePredicate() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        List\u003cString\u003e keywordList \u003d Arrays.asList(\"pots\", \"flower\", \"rent\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        ExpenseDescriptionContainsKeywordsPredicate expensePredicate \u003d new"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            ExpenseDescriptionContainsKeywordsPredicate(keywordList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(expensePredicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertParseSuccess(parser, VALID_USER_INPUT_WITH_EXPENSE_CATEGORY, expectedFindCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void parse_validArgs_returnsFindCommandWithRevenuePredicate() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        List\u003cString\u003e keywordList \u003d Arrays.asList(\"pots\", \"flower\", \"rent\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        RevenueDescriptionContainsKeywordsPredicate revenuePredicate \u003d new"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            RevenueDescriptionContainsKeywordsPredicate(keywordList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(revenuePredicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertParseSuccess(parser, VALID_USER_INPUT_WITH_REVENUE_CATEGORY, expectedFindCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void parse_emptyKeywordList_throwsParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertParseFailure(parser, INVALID_USER_INPUT_NO_KEYWORDS, EMPTY_KEYWORDS_MESSAGE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 2,
      "lettuceman4": 51,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.parser.util.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.commons.core.category.Category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String INVALID_NAME \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \"expensi\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"a1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String VALID_NAME \u003d \"Money Maker123\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String VALID_CATEGORY \u003d \"eXpEnSe\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"bought cooking utensils\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String VALID_AMOUNT \u003d \"1000.39\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(INDEX_FIRST_ENTRY, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(INDEX_FIRST_ENTRY, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCategory((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Name expectedCategory \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void parseCategory_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCategory((String) null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void parseCategory_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCategory(INVALID_CATEGORY));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void parseCategory_validValueWithoutWhitespace_returnsCategory() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(VALID_CATEGORY));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void parseCategory_validValueWithWhitespace_returnsTrimmedCategory() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        String categoryWithWhitespace \u003d WHITESPACE + VALID_CATEGORY + WHITESPACE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(categoryWithWhitespace));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void parseAmount_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAmount((String) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void parseAmount_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAmount(INVALID_AMOUNT));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void parseAmount_validValueWithoutWhitespace_returnsAmount() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Amount expectedAmount \u003d new Amount(VALID_AMOUNT);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(expectedAmount, ParserUtil.parseAmount(VALID_AMOUNT));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void parseAmount_validValueWithWhitespace_returnsTrimmedAmount() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        String amountWithWhitespace \u003d WHITESPACE + VALID_AMOUNT + WHITESPACE;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Amount expectedAmount \u003d new Amount(VALID_AMOUNT);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(expectedAmount, ParserUtil.parseAmount(amountWithWhitespace));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 54,
      "-": 144
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SwitchAccountCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.logic.commands.SwitchAccountCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.model.CommonCents;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.testutil.TypicalEntries;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "class SwitchAccountCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    private SwitchAccountCommandParser parser \u003d new SwitchAccountCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    private CommonCents cc \u003d TypicalEntries.getTypicalCommonCents();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void parse_validIndex_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SwitchAccountCommand(INDEX_FIRST_ENTRY));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void parse_invalidArgs_failure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchAccountCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        //non-integer index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertParseFailure(parser, \"a\", expectedMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        //negative index"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertParseFailure(parser, \"-1\", expectedMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        //too many arguments"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertParseFailure(parser, \"1 2\", expectedMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        //no index specified"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheoksuanne": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/CommonCentsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.model.account.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.model.account.entry.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.testutil.TypicalEntries;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "public class CommonCentsTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    private CommonCents commonCents \u003d new CommonCents();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertEquals(new CommonCents(), commonCents);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void setAccounts() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Account account \u003d TypicalEntries.getTypicalAccount();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        List\u003cAccount\u003e accountList \u003d Arrays.asList(account);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        commonCents.setAccounts(accountList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(commonCents.hasAccount(account));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void resetData_nullData_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e commonCents.resetData(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void resetData_validData_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        CommonCents newData \u003d TypicalEntries.getTypicalCommonCents();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        commonCents.setAccounts(newData.getAccountList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(commonCents.hasAccount(newData.getAccountList().get(0)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void hasAccount_accountNotInCommonCents_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e commonCents.hasAccount(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void hasAccount_accountNotInCommonCents_returnsFalse() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Account account \u003d new Account(new Name(\"ALICE\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertFalse(commonCents.hasAccount(account));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void hasAccount_accountInCommonCents_returnsTrue() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Account account \u003d TypicalEntries.getTypicalAccount();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        commonCents.addAccount(account);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(commonCents.hasAccount(account));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void addAccount() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Account account \u003d new Account(new Name(\"ALICE\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        commonCents.addAccount(account);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(commonCents.hasAccount(account));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void setAccount_accountNotInCommonCents_returnsFalse() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Account target \u003d new Account(new Name(\"ALICE\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Account edited \u003d new Account(new Name(\"BEN\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertFalse(commonCents.hasAccount(target));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void setAccount_validAccount_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Account target \u003d new Account(new Name(\"ALICE\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Account edited \u003d new Account(new Name(\"BEN\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        commonCents.addAccount(target);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        commonCents.setAccount(target, edited);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(commonCents.hasAccount(edited));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void setAccount_validEditedAccount() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Account edited \u003d new Account(new Name(\"ALICE\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        commonCents.addAccount(edited);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        edited.addExpense(TypicalEntries.getTypicalExpenses().get(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        commonCents.setAccount(edited);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertEquals(new Description(\"bought flower pots\"), commonCents.getAccountList()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .get(0).getExpenseList().get(0).getDescription());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void removeAccount_accountIsNotInCommonCents_returnsFalse() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Account account \u003d new Account(new Name(\"ALICE\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertFalse(commonCents.hasAccount(account));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void removeAccount_accountIsInCommonCents_returnsFalse() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Account account \u003d new Account(new Name(\"ALICE\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        commonCents.addAccount(account);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        commonCents.removeAccount(account);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertFalse(commonCents.hasAccount(account));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 2,
      "cheoksuanne": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.model.account.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.model.account.exceptions.AccountNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(new CommonCents(), new CommonCents(modelManager.getCommonCents()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        userPrefs.setCommonCentsFilePath(Paths.get(\"commonCents/file/path\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        userPrefs.setCommonCentsFilePath(Paths.get(\"new/commonCents/file/path\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setCommonCentsFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setCommonCentsFilePath(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setCommonCentsFilePath_validPath_setsCommonCentsFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Path path \u003d Paths.get(\"commonCents/file/path\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        modelManager.setCommonCentsFilePath(path);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(path, modelManager.getCommonCentsFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void setCommonCents() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        CommonCents commonCents \u003d new CommonCents();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        modelManager.setCommonCents(commonCents);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertEquals(commonCents, modelManager.getCommonCents());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void hasAccount_nullAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasAccount(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void hasAccount_accountNotInCommonCents_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertFalse(modelManager.hasAccount(new Account(new Name(\"ALICE\"))));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void hasAccount_accountInCommonCents_returnsTrue() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Account account \u003d new Account(new Name(\"ALICE\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        modelManager.addAccount(account);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(modelManager.hasAccount(account));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void deleteAccount_accountNotInCommonCents_throwsAccountNotFoundException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Account account \u003d new Account(new Name(\"ALICE\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertThrows(AccountNotFoundException.class, () -\u003e modelManager.deleteAccount(account));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void deleteAccount_accountInCommonCents_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Account account \u003d new Account(new Name(\"ALICE\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        modelManager.addAccount(account);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        modelManager.deleteAccount(account);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertFalse(modelManager.hasAccount(account));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void addAccount_isValidAccount_returnsTrue() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Account account \u003d new Account(new Name(\"ALICE\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        modelManager.addAccount(account);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(modelManager.hasAccount(account));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void setAccount_nullAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Account account \u003d new Account(new Name(\"ALICE\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAccount(null, account));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAccount(account, null));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAccount(null, null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void setAccount_validAccount_returnsTrue() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Account targetAccount \u003d new Account(new Name(\"ALICE\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Account editedAccount \u003d new Account(new Name(\"BEN\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        modelManager.addAccount(targetAccount);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        modelManager.setAccount(targetAccount, editedAccount);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(modelManager.hasAccount(editedAccount));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void setAccount_nullEditedAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAccount(null));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void setAccount_validEditedAccount_returnsTrue() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Account editedAccount \u003d new Account(new Name(\"ALICE\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        modelManager.addAccount(editedAccount);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        modelManager.setAccount(editedAccount);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(modelManager.hasAccount(editedAccount));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void getFilteredAccountList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredAccountList().remove(0));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    void updateFilteredAccountList_nullPredicate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.updateFilteredAccountList(null));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Account account \u003d new Account(new Name(\"General Account\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        CommonCents commonCents \u003d new CommonCents();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        commonCents.addAccount(account);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        CommonCents differentCommonCents \u003d new CommonCents();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        modelManager \u003d new ModelManager(commonCents, userPrefs);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(commonCents, userPrefs);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertEquals(modelManager, modelManagerCopy);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertEquals(modelManager, modelManager);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertNotEquals(null, modelManager);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertNotEquals(5, modelManager);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        // different commonCents -\u003e returns false"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertNotEquals(modelManager, new ModelManager(differentCommonCents, userPrefs));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        modelManager.updateFilteredAccountList(Model.PREDICATE_SHOW_ALL_ACCOUNTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        differentUserPrefs.setCommonCentsFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertNotEquals(modelManager, new ModelManager(commonCents, differentUserPrefs));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 11,
      "-": 104,
      "cheoksuanne": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setCommonCentsFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setCommonCentsFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/account/AccountTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.BUY_FLOWER_POTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.BUY_ROSE_SEEDS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.BUY_SHOVEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.BUY_STRING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.SELL_FLOWER_POTS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.SELL_FLOWER_SEEDS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.SELL_HANDICRAFT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.SELL_SUNFLOWER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.getTypicalAccount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.ExpenseList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.RevenueList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class AccountTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String ACCOUNT_NAME \u003d \"General account\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void initializeAccount() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        account \u003d new Account(new Name(ACCOUNT_NAME));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(Collections.emptyList(), account.getExpenseList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(Collections.emptyList(), account.getRevenueList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setExpenses() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        ExpenseList expenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        expenseList.add(BUY_ROSE_SEEDS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        expenseList.add(BUY_FLOWER_POTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        expenseList.add(BUY_SHOVEL);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        expenseList.add(BUY_STRING);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        account.setExpenses(expenseList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(account.getExpenseList(), expenseList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setRevenues() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        RevenueList revenueList \u003d new RevenueList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        revenueList.add(SELL_FLOWER_POTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        revenueList.add(SELL_FLOWER_SEEDS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        revenueList.add(SELL_HANDICRAFT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        revenueList.add(SELL_SUNFLOWER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        account.setRevenues(revenueList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(account.getRevenueList(), revenueList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void clearExpenses() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        account.addExpense(BUY_ROSE_SEEDS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        account.addExpense(BUY_FLOWER_POTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        account.addExpense(BUY_SHOVEL);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        account.addExpense(BUY_STRING);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        account.clearExpenses();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(account.getExpenseList().isEmpty());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void clearRevenues() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        account.addRevenue(SELL_FLOWER_POTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        account.addRevenue(SELL_FLOWER_SEEDS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        account.addRevenue(SELL_HANDICRAFT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        account.addRevenue(SELL_SUNFLOWER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        account.clearRevenues();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(account.getRevenueList().isEmpty());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void isSameAccount_accountWithDifferentName_false() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account anotherAccount \u003d new Account(new Name(\"Different account\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(account.isSameAccount(anotherAccount));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void isSameAccount_accountWithSameName_true() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account anotherAccount \u003d new Account(new Name(ACCOUNT_NAME));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(account.isSameAccount(anotherAccount));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e account.resetData(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void resetData_withValidReadOnlyAccount_replacesData() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account newData \u003d getTypicalAccount();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        account.resetData(newData);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(newData, account);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void hasExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e account.hasExpense(null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void hasRevenue_nullRevenue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e account.hasRevenue(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void hasExpense_expenseNotInAccount_returnsFalse() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(account.hasExpense(BUY_ROSE_SEEDS));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void hasRevenue_revenueNotInAccount_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(account.hasRevenue(SELL_SUNFLOWER));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void hasExpense_expenseInAccount_returnsTrue() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        account.addExpense(BUY_ROSE_SEEDS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(account.hasExpense(BUY_ROSE_SEEDS));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void hasRevenue_revenueInAccount_returnsTrue() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        account.addRevenue(SELL_SUNFLOWER);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(account.hasRevenue(SELL_SUNFLOWER));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void getExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e account.getExpenseList().remove(0));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void getRevenueList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e account.getRevenueList().remove(0));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 147
    }
  },
  {
    "path": "src/test/java/seedu/address/model/account/ActiveAccountManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.BUY_FLOWER_POTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.BUY_ROSE_SEEDS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.BUY_SHOVEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.BUY_STRING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.SELL_FLOWER_POTS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.SELL_FLOWER_SEEDS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.SELL_HANDICRAFT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.SELL_SUNFLOWER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.getTypicalAccount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.ExpenseDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.RevenueDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class ActiveAccountManagerTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String GENERAL_ACC_NAME \u003d \"General account\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final Account GENERAL_ACC \u003d new Account(new Name(GENERAL_ACC_NAME));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private ActiveAccountManager activeAccountManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setActiveAccountManager() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager \u003d new ActiveAccountManager(GENERAL_ACC);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(GENERAL_ACC, new Account(activeAccountManager.getAccount()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void constructor_nullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ActiveAccountManager(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void getCopy() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        ActiveAccount activeAccountManagerCopy \u003d activeAccountManager.getCopy();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(activeAccountManager, activeAccountManagerCopy);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setPreviousState() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        ActiveAccount activeAccountManagerCopy \u003d activeAccountManager.getCopy();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.setPreviousState();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        ActiveAccount previousState \u003d activeAccountManager.getPreviousState().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(previousState, activeAccountManagerCopy);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void hasNoPreviousState_emptyPreviousState_true() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(activeAccountManager.hasNoPreviousState());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void hasNoPreviousState_hasPreviousState_false() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.setPreviousState();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(activeAccountManager.hasNoPreviousState());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setActiveAccount() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account account \u003d GENERAL_ACC;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.setActiveAccount(account);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(account, activeAccountManager.getAccount());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setName() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Name newName \u003d new Name(\"test\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.setName(newName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(newName, activeAccountManager.getAccount().getName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void removePreviousActiveAccount() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.setPreviousState();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.removePreviousState();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(activeAccountManager.hasNoPreviousState());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void returnToPreviousState_hasPreviousState_true() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        ActiveAccount activeAccountManagerCopy \u003d activeAccountManager.getCopy();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.setPreviousState();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.returnToPreviousState();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(activeAccountManager, activeAccountManagerCopy);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void returnToPreviousState_hasNoPreviousState_true() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        ActiveAccount activeAccountManagerCopy \u003d activeAccountManager.getCopy();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.returnToPreviousState();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(activeAccountManager, activeAccountManagerCopy);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void hasExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e activeAccountManager.hasExpense(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void hasRevenue_nullRevenue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e activeAccountManager.hasRevenue(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void hasEntry_expenseNotInAccount_returnsFalse() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(activeAccountManager.hasEntry(BUY_ROSE_SEEDS));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void hasEntry_revenueNotInAccount_returnsFalse() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(activeAccountManager.hasEntry(BUY_ROSE_SEEDS));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void hasExpense_expenseNotInAccount_returnsFalse() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(activeAccountManager.hasExpense(BUY_ROSE_SEEDS));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void hasRevenue_revenueNotInAccount_returnsFalse() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(activeAccountManager.hasRevenue(SELL_SUNFLOWER));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void hasEntry_expenseInAccount_returnTrue() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addExpense(BUY_ROSE_SEEDS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(activeAccountManager.hasEntry(BUY_ROSE_SEEDS));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void hasEntry_revenueInAccount_returnTrue() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addRevenue(SELL_SUNFLOWER);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(activeAccountManager.hasEntry(SELL_SUNFLOWER));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void hasExpense_expenseInAccount_returnsTrue() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addExpense(BUY_ROSE_SEEDS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(activeAccountManager.hasExpense(BUY_ROSE_SEEDS));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void hasRevenue_revenueInAccount_returnsTrue() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addRevenue(SELL_SUNFLOWER);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(activeAccountManager.hasRevenue(SELL_SUNFLOWER));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void deleteExpense_expenseNotInAccount_throwsEntryNotFoundException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(EntryNotFoundException.class, () -\u003e activeAccountManager.deleteExpense(BUY_ROSE_SEEDS));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void deleteRevenue_revenueNotInAccount_throwsEntryNotFoundException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(EntryNotFoundException.class, () -\u003e activeAccountManager.deleteRevenue(SELL_SUNFLOWER));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void deleteExpense_expenseInAccount_returnsTrue() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addExpense(BUY_ROSE_SEEDS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.deleteExpense(BUY_ROSE_SEEDS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(activeAccountManager.hasExpense(BUY_ROSE_SEEDS));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void deleteRevenue_revenueInAccount_returnsTrue() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addRevenue(SELL_SUNFLOWER);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.deleteRevenue(SELL_SUNFLOWER);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(activeAccountManager.hasRevenue(SELL_SUNFLOWER));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e activeAccountManager.setExpense(null, BUY_ROSE_SEEDS));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e activeAccountManager.setExpense(BUY_ROSE_SEEDS, null));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e activeAccountManager.setExpense(null, null));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setRevenue_nullRevenue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e activeAccountManager.setRevenue(null, SELL_SUNFLOWER));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e activeAccountManager.setRevenue(SELL_SUNFLOWER, null));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e activeAccountManager.setRevenue(null, null));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setExpense_validExpense_returnsTrue() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addExpense(BUY_ROSE_SEEDS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.setExpense(BUY_ROSE_SEEDS, BUY_FLOWER_POTS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(activeAccountManager.hasExpense(BUY_FLOWER_POTS));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setRevenue_validRevenue_returnsTrue() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addRevenue(SELL_SUNFLOWER);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.setRevenue(SELL_SUNFLOWER, SELL_FLOWER_POTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(activeAccountManager.hasRevenue(SELL_FLOWER_POTS));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void clearExpense() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addExpense(BUY_FLOWER_POTS);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addExpense(BUY_ROSE_SEEDS);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addExpense(BUY_SHOVEL);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addExpense(BUY_STRING);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.clearExpenses();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(activeAccountManager.getFilteredExpenseList().isEmpty());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void clearRevenue() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addRevenue(SELL_SUNFLOWER);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addRevenue(SELL_FLOWER_POTS);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addRevenue(SELL_FLOWER_SEEDS);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addRevenue(SELL_HANDICRAFT);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.clearRevenues();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(activeAccountManager.getFilteredRevenueList().isEmpty());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void getFilteredExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                activeAccountManager.getFilteredExpenseList().remove(0));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void getFilteredRevenueList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                activeAccountManager.getFilteredRevenueList().remove(0));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void updateFilteredExpenseList_nullPredicate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e activeAccountManager.updateFilteredExpenseList(null));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void updateFilteredExpenseList_expensePredicate_true() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addExpense(BUY_FLOWER_POTS);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addExpense(BUY_ROSE_SEEDS);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addExpense(BUY_SHOVEL);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addExpense(BUY_STRING);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        List\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        keywords.add(\"strings\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.updateFilteredExpenseList(new ExpenseDescriptionContainsKeywordsPredicate(keywords));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(activeAccountManager.getFilteredExpenseList().size(), 1);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void updateFilteredRevenueList_nullPredicate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e activeAccountManager.updateFilteredRevenueList(null));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void updateFilteredRevenueList_revenuePredicate_true() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addRevenue(SELL_HANDICRAFT);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addRevenue(SELL_FLOWER_SEEDS);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addRevenue(SELL_FLOWER_POTS);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addRevenue(SELL_SUNFLOWER);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        List\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        keywords.add(\"flowers\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.updateFilteredRevenueList(new RevenueDescriptionContainsKeywordsPredicate(keywords));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(activeAccountManager.getFilteredRevenueList().size(), 1);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void getTotalExpense() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addExpense(BUY_FLOWER_POTS);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addExpense(BUY_ROSE_SEEDS);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addExpense(BUY_SHOVEL);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addExpense(BUY_STRING);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        double expectedAmount \u003d BUY_FLOWER_POTS.getAmount().getValue()"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                + BUY_ROSE_SEEDS.getAmount().getValue()"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                + BUY_SHOVEL.getAmount().getValue()"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                + BUY_STRING.getAmount().getValue();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(activeAccountManager.getTotalExpenses(), expectedAmount);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void getTotalRevenue() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addRevenue(SELL_HANDICRAFT);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addRevenue(SELL_FLOWER_SEEDS);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addRevenue(SELL_FLOWER_POTS);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addRevenue(SELL_SUNFLOWER);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        double expectedAmount \u003d SELL_HANDICRAFT.getAmount().getValue()"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                + SELL_FLOWER_SEEDS.getAmount().getValue()"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                + SELL_FLOWER_POTS.getAmount().getValue()"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                + SELL_SUNFLOWER.getAmount().getValue();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(activeAccountManager.getTotalRevenue(), expectedAmount);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void getProfits() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addExpense(BUY_FLOWER_POTS);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addExpense(BUY_ROSE_SEEDS);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addExpense(BUY_SHOVEL);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addExpense(BUY_STRING);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addRevenue(SELL_HANDICRAFT);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addRevenue(SELL_FLOWER_SEEDS);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addRevenue(SELL_FLOWER_POTS);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager.addRevenue(SELL_SUNFLOWER);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        double expectedProfits \u003d (SELL_HANDICRAFT.getAmount().getValue()"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                + SELL_FLOWER_SEEDS.getAmount().getValue()"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                + SELL_FLOWER_POTS.getAmount().getValue()"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                + SELL_SUNFLOWER.getAmount().getValue())"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                - (BUY_FLOWER_POTS.getAmount().getValue()"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                + BUY_ROSE_SEEDS.getAmount().getValue()"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                + BUY_SHOVEL.getAmount().getValue()"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                + BUY_STRING.getAmount().getValue());"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertEquals(activeAccountManager.getProfits(), expectedProfits);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account account \u003d getTypicalAccount();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account differentAccount \u003d GENERAL_ACC;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        activeAccountManager \u003d new ActiveAccountManager(account);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        ActiveAccountManager activeAccountManagerCopy \u003d new ActiveAccountManager(account);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(activeAccountManagerCopy.equals(activeAccountManager));"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(activeAccountManager.equals(activeAccountManager));"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(activeAccountManager.equals(null));"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(activeAccountManager.equals(5));"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // different account -\u003e returns false"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(activeAccountManager.equals(new ActiveAccountManager(differentAccount)));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 355
    }
  },
  {
    "path": "src/test/java/seedu/address/model/account/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Name.isValidName(\"Common Cents\")); // alphabets only with capital letters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Name.isValidName(\"$here comes the money$\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Name.isValidName(\"flower-shop123\")); // with alphabets, numbers and symbols"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 5,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/account/UniqueAccountListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Tests for UniqueAccountList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * Tests for uniqueness of accounts will be implemented in future as for now, we assume only one account."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class UniqueAccountListTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private final UniqueAccountList uniqueAccountList \u003d new UniqueAccountList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void contains_nullAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAccountList.contains(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    // To be implemented"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void contains_accountNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    // To be implemented"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void contains_accountInList_returnsTrue() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    // To be implemented"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void contains_accountWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    // To be implemented"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void add_nullAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    // To be implemented"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void add_duplicateAccount_throwsDuplicateAccountException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    // To be implemented"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setAccount_nullTargetAccountAndNonNullEditedAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    // To be implemented"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setAccount_nonNullTargetAccountAndNullEditedAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setAccount_nullEditedAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAccountList.setAccount(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    // To be implemented"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setAccount_targetAccountNotInList_throwsAccountNotFoundException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    // To be implemented"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setAccount_editedAccountIsSameAccount_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    // To be implemented"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setAccount_editedAccountHasSameIdentity_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    // To be implemented"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setAccount_editedAccountHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    // To be implemented"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setAccount_editedAccountHasNonUniqueIdentity_throwsDuplicateAccountException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    // To be implemented"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void remove_nullAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    // To be implemented"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void remove_accountDoesNotExist_throwsAccountNotFoundException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    // To be implemented"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void remove_existingAccount_removesAccount() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setAccounts_nullUniqueAccountList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAccountList.setAccounts((UniqueAccountList) null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    // To be implemented"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setAccounts_uniqueAccountList_replacesOwnListWithProvidedUniqueAccountList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setAccounts_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAccountList.setAccounts((List\u003cAccount\u003e) null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    // To be implemented"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setAccounts_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    // To be implemented"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setAccounts_listWithDuplicateAccounts_throwsDuplicateAccountException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            -\u003e uniqueAccountList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 150
    }
  },
  {
    "path": "src/test/java/seedu/address/model/account/entry/AmountTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.model.account.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class AmountTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Amount(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void constructor_invalidAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        String invalidAmount \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(invalidAmount));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void isValidAmount_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // null amount"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Amount.isValidAmount(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // blank amount"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(Amount.isValidAmount(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // invalid amount"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"a\")); // alphabets"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"a1\")); // alphabets with numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"1.3a\")); // alphabets at the end of double"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"1.333\")); // double ending with 3 decimal places"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(Amount.isValidAmount(\" 1 .30\")); // space between integer and decimal place"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"1.30 \")); // trailing space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(Amount.isValidAmount(\" 1.30\")); // starts with a space"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(Amount.isValidAmount(\".0\")); // starts with a zero after dot"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(Amount.isValidAmount(\".00\")); // starts with two zero after dot"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"00.00\")); // all zeros"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"0000000.00\")); // all zeros"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"0\")); // one zero"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // valid amount"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1\")); // short integer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"100000\")); // long integer"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"10.00\")); // double value with all zeros"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"01.30\")); // starts with a zero"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"10.\")); //a dot with no decimal places"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"10.1\")); //a dot with one decimal places"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"10.10\")); // double value with varying ones and zeros"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Amount.isValidAmount(\".1\")); //only decimal with a dot with one decimal place"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Amount.isValidAmount(\".10\")); //only decimal with a dot with two decimal places"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Amount.isValidAmount(\".01\")); //only decimal a dot with two decimal places"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"0.39\")); //start with 0 only decimal a dot with two decimal places"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"000000.39\")); //start with multiple 0only decimal a dot with two decimal places"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void isValidAmount_max() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        // Valid Amounts"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1000000.00\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1000000\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        // Invalid Amounts"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"1000000.01\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"1000001.00\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"99999999.99\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 58,
      "jordanyoong": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/model/account/entry/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.model.account.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // one space only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertFalse(Description.isValidDescription(\"    \")); // multiple spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Description.isValidDescription(\"buying supplies\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Description.isValidDescription(\"s\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        assertTrue(Description.isValidDescription(\"bought very very very very \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                + \"very expensive stuffs\")); // long description"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/account/entry/ExpenseListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "package seedu.address.model.account.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "public class ExpenseListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    void contains_true() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        ObservableList\u003cExpense\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags1 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags1.add(new Tag(\"food\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags1.add(new Tag(\"restaurant\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Expense e1 \u003d new Expense(new Description(\"dinner\"), new Amount(\"5.00\"), tags1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags2 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags2.add(new Tag(\"retail\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags2.add(new Tag(\"clothes\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Expense e2 \u003d new Expense(new Description(\"shopping for clothes\"), new Amount(\"25\"), tags2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags3 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags3.add(new Tag(\"craft\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags3.add(new Tag(\"ArtFriend\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Expense e3 \u003d new Expense(new Description(\"artsupplies\"), new Amount(\"10.50\"), tags3);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        internalList.addAll(e1, e2, e3);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(internalList.contains(e1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(internalList.contains(e2));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(internalList.contains(e3));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void contains_false() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        ObservableList\u003cExpense\u003einternalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags1 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags1.add(new Tag(\"food\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags1.add(new Tag(\"restaurant\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Expense e1 \u003d new Expense(new Description(\"dinner\"), new Amount(\"5.00\"), tags1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags2 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags2.add(new Tag(\"retail\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags2.add(new Tag(\"clothes\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Expense e2 \u003d new Expense(new Description(\"shoppingforclothes\"), new Amount(\"25\"), tags2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags3 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags3.add(new Tag(\"craft\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags3.add(new Tag(\"ArtFriend\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Expense e3 \u003d new Expense(new Description(\"artsupplies\"), new Amount(\"10.50\"), tags3);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        internalList.addAll(e1, e2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertFalse(internalList.contains(e3));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        ExpenseList expenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Expense expense \u003d (new ExpenseBuilder()).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        expenseList.add(expense);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(expenseList.contains(expense));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void setExpense() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags1 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags1.add(new Tag(\"food\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags1.add(new Tag(\"restaurant\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Expense e1 \u003d new Expense(new Description(\"dinner\"), new Amount(\"5.00\"), tags1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        ExpenseList expenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        expenseList.add(e1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Expense e2 \u003d (new ExpenseBuilder()).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        expenseList.setExpense(e1, e2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(expenseList.contains(e2));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void remove() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        ExpenseList expenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Expense expense \u003d (new ExpenseBuilder()).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        expenseList.add(expense);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        expenseList.remove(expense);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertFalse(expenseList.contains(expense));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void setExpenses() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        ExpenseList expenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags1 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags1.add(new Tag(\"food\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags1.add(new Tag(\"restaurant\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Expense e1 \u003d new Expense(new Description(\"dinner\"), new Amount(\"5.00\"), tags1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags2 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags2.add(new Tag(\"retail\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags2.add(new Tag(\"clothes\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Expense e2 \u003d new Expense(new Description(\"shopping for clothes\"), new Amount(\"25\"), tags2);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        expenseList.add(e1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        expenseList.add(e2);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags3 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags3.add(new Tag(\"craft\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags3.add(new Tag(\"ArtFriend\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Expense e3 \u003d new Expense(new Description(\"artsupplies\"), new Amount(\"10.50\"), tags3);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Expense e4 \u003d (new ExpenseBuilder()).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        List\u003cExpense\u003e replacement \u003d Arrays.asList(e3, e4);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        expenseList.setExpenses(replacement);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertFalse(expenseList.contains(e1));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertFalse(expenseList.contains(e2));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(expenseList.contains(e3));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(expenseList.contains(e4));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void testSetExpenses() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        ExpenseList expenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags1 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags1.add(new Tag(\"food\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags1.add(new Tag(\"restaurant\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Expense e1 \u003d new Expense(new Description(\"dinner\"), new Amount(\"5.00\"), tags1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags2 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags2.add(new Tag(\"retail\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags2.add(new Tag(\"clothes\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Expense e2 \u003d new Expense(new Description(\"shopping for clothes\"), new Amount(\"25\"), tags2);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        expenseList.add(e1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        expenseList.add(e2);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags3 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags3.add(new Tag(\"craft\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags3.add(new Tag(\"ArtFriend\"));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Expense e3 \u003d new Expense(new Description(\"artsupplies\"), new Amount(\"10.50\"), tags3);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Expense e4 \u003d (new ExpenseBuilder()).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        List\u003cExpense\u003e replacement \u003d Arrays.asList(e3, e4);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        expenseList.setExpenses(replacement);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertFalse(expenseList.contains(e1));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertFalse(expenseList.contains(e2));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(expenseList.contains(e3));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(expenseList.contains(e4));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheoksuanne": 173
    }
  },
  {
    "path": "src/test/java/seedu/address/model/account/entry/ExpenseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "package seedu.address.model.account.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "public class ExpenseTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final Description VALID_DESCRIPTION \u003d new Description(\"dinner at genki sushi\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final String INVALID_DESCRIPTION_STRING \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final Amount VALID_AMOUNT \u003d new Amount(\"30.00\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final String INVALID_AMOUNT_STRING \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final Tag VALID_TAG_1 \u003d new Tag(\"Food\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final Tag VALID_TAG_2 \u003d new Tag(\"Restaurant\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        tags.add(VALID_TAG_1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        tags.add(VALID_TAG_2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Expense(null, null, null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Expense("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                new Description(INVALID_DESCRIPTION_STRING), VALID_AMOUNT, tags));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void constructor_invalidAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            new Expense(VALID_DESCRIPTION, new Amount(INVALID_AMOUNT_STRING), tags));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Expense validExpense \u003d new Expense(VALID_DESCRIPTION, VALID_AMOUNT, tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Expense validExpenseCopy \u003d new Expense(VALID_DESCRIPTION, VALID_AMOUNT, tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(validExpense, validExpenseCopy);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // different types -\u003e return false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(1, validExpense);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(null, validExpense);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 36,
      "cheoksuanne": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/model/account/entry/RevenueListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "package seedu.address.model.account.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.testutil.RevenueBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "class RevenueListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void contains_true() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        ObservableList\u003cRevenue\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags1 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags1.add(new Tag(\"art\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags1.add(new Tag(\"craft\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Revenue r1 \u003d new Revenue(new Description(\"sold crafts\"), new Amount(\"5.00\"), tags1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags2 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags2.add(new Tag(\"art\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags2.add(new Tag(\"painting\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Revenue r2 \u003d new Revenue(new Description(\"sold painting\"), new Amount(\"25\"), tags2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags3 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags3.add(new Tag(\"earrings\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags3.add(new Tag(\"handmade\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Revenue r3 \u003d new Revenue(new Description(\"sold earrings\"), new Amount(\"10.50\"), tags3);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        internalList.addAll(r1, r2, r3);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(internalList.contains(r1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(internalList.contains(r2));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(internalList.contains(r3));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void contains_false() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        ObservableList\u003cRevenue\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags1 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags1.add(new Tag(\"art\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags1.add(new Tag(\"craft\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Revenue r1 \u003d new Revenue(new Description(\"sold crafts\"), new Amount(\"5.00\"), tags1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags2 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags2.add(new Tag(\"art\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags2.add(new Tag(\"painting\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Revenue r2 \u003d new Revenue(new Description(\"sold painting\"), new Amount(\"25\"), tags2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags3 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags3.add(new Tag(\"earrings\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags3.add(new Tag(\"handmade\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Revenue r3 \u003d new Revenue(new Description(\"sold earrings\"), new Amount(\"10.50\"), tags3);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        internalList.addAll(r1, r2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertFalse(internalList.contains(r3));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        RevenueList revenueList \u003d new RevenueList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Revenue revenue \u003d (new RevenueBuilder()).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        revenueList.add(revenue);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(revenueList.contains(revenue));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void setRevenue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags1 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags1.add(new Tag(\"art\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags1.add(new Tag(\"crafts\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Revenue r1 \u003d new Revenue(new Description(\"bought craft supplies\"), new Amount(\"5.00\"), tags1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        RevenueList revenueList \u003d new RevenueList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        revenueList.add(r1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Revenue r2 \u003d (new RevenueBuilder()).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        revenueList.setRevenue(r1, r2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(revenueList.contains(r2));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void remove() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        RevenueList revenueList \u003d new RevenueList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Revenue revenue \u003d (new RevenueBuilder()).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        revenueList.add(revenue);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        revenueList.remove(revenue);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertFalse(revenueList.contains(revenue));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    void setRevenues() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        RevenueList revenueList \u003d new RevenueList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags1 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags1.add(new Tag(\"art\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags1.add(new Tag(\"craft\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Revenue r1 \u003d new Revenue(new Description(\"sold crafts\"), new Amount(\"5.00\"), tags1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags2 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags2.add(new Tag(\"art\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags2.add(new Tag(\"painting\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Revenue r2 \u003d new Revenue(new Description(\"sold painting\"), new Amount(\"25\"), tags2);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        revenueList.add(r1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        revenueList.add(r2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags3 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags3.add(new Tag(\"earrings\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags3.add(new Tag(\"handmade\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Revenue r3 \u003d new Revenue(new Description(\"sold earrings\"), new Amount(\"10.50\"), tags3);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Revenue r4 \u003d (new RevenueBuilder()).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        List\u003cRevenue\u003e replacement \u003d Arrays.asList(r3, r4);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        revenueList.setRevenues(replacement);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertFalse(revenueList.contains(r1));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertFalse(revenueList.contains(r2));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(revenueList.contains(r3));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(revenueList.contains(r4));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    void testSetRevenues() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        RevenueList revenueList \u003d new RevenueList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags1 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags1.add(new Tag(\"art\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags1.add(new Tag(\"craft\"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Revenue r1 \u003d new Revenue(new Description(\"sold crafts\"), new Amount(\"5.00\"), tags1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags2 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags2.add(new Tag(\"art\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags2.add(new Tag(\"painting\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Revenue r2 \u003d new Revenue(new Description(\"sold painting\"), new Amount(\"25\"), tags2);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        revenueList.add(r1);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        revenueList.add(r2);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Set\u003cTag\u003e tags3 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags3.add(new Tag(\"earrings\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        tags3.add(new Tag(\"handmade\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Revenue r3 \u003d new Revenue(new Description(\"sold earrings\"), new Amount(\"10.50\"), tags3);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        Revenue r4 \u003d (new RevenueBuilder()).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        List\u003cRevenue\u003e replacement \u003d Arrays.asList(r3, r4);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        revenueList.setRevenues(replacement);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertFalse(revenueList.contains(r1));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertFalse(revenueList.contains(r2));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(revenueList.contains(r3));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertTrue(revenueList.contains(r4));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheoksuanne": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/model/account/entry/RevenueTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "package seedu.address.model.account.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "public class RevenueTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final Description VALID_DESCRIPTION \u003d new Description(\"sell crafts\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final String INVALID_DESCRIPTION_STRING \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final Amount VALID_AMOUNT \u003d new Amount(\"30.00\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final String INVALID_AMOUNT_STRING \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final Tag VALID_TAG_1 \u003d new Tag(\"art\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final Tag VALID_TAG_2 \u003d new Tag(\"craft\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        tags.add(VALID_TAG_1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        tags.add(VALID_TAG_2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Revenue(null, null, null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Revenue("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            new Description(INVALID_DESCRIPTION_STRING), VALID_AMOUNT, tags));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    public void constructor_invalidAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            new Revenue(VALID_DESCRIPTION, new Amount(INVALID_AMOUNT_STRING), tags));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Revenue validRevenue \u003d new Revenue(VALID_DESCRIPTION, VALID_AMOUNT, tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Revenue validRevenueCopy \u003d new Revenue(VALID_DESCRIPTION, VALID_AMOUNT, tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(validRevenue, validRevenueCopy);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // different types -\u003e return false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(1, validRevenue);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotEquals(null, validRevenue);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 36,
      "cheoksuanne": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedAccountTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.testutil.TypicalEntries;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "public class JsonAdaptedAccountTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        \"src\", \"test\", \"data\", \"JsonCommonCentsAccountTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final Path INVALID_ACCOUNT_NAME_FILE \u003d TEST_DATA_FOLDER.resolve("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        \"invalidAccountNameCommonCents.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void toModelType_validTypicalAccount_returnAccount() throws IllegalValueException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Account typicalAccount \u003d TypicalEntries.getTypicalAccount();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        JsonAdaptedAccount jsonAdaptedAccount \u003d new JsonAdaptedAccount(typicalAccount);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(typicalAccount, jsonAdaptedAccount.toModelType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void toModelType_invalidAccountName_throwsIllegalValueException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        JsonAdaptedAccount jsonAdaptedAccount \u003d JsonUtil.readJsonFile(INVALID_ACCOUNT_NAME_FILE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            JsonAdaptedAccount.class).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertThrows(IllegalValueException.class, jsonAdaptedAccount::toModelType);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedExpenseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static seedu.address.storage.JsonAdaptedExpense.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.BUY_FLOWER_POTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "public class JsonAdaptedExpenseTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"a1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"bought cooking utensils\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final String VALID_AMOUNT \u003d \"1000.39\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BUY_FLOWER_POTS.getTags().stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void toModelType_validExpenseDetails_returnsExpense() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        JsonAdaptedExpense adaptedExpense \u003d new JsonAdaptedExpense(BUY_FLOWER_POTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(BUY_FLOWER_POTS, adaptedExpense.toModelType());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        JsonAdaptedExpense adaptedExpense \u003d new JsonAdaptedExpense(INVALID_DESCRIPTION, VALID_AMOUNT, VALID_TAGS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, adaptedExpense::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        JsonAdaptedExpense adaptedExpense \u003d new JsonAdaptedExpense(null, VALID_AMOUNT, VALID_TAGS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, adaptedExpense::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        JsonAdaptedExpense adaptedExpense \u003d new JsonAdaptedExpense(VALID_DESCRIPTION, INVALID_AMOUNT, VALID_TAGS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, adaptedExpense::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        JsonAdaptedExpense adaptedExpense \u003d new JsonAdaptedExpense(VALID_DESCRIPTION, null, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, adaptedExpense::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void toModelType_invalidTag_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        JsonAdaptedExpense adaptedExpense \u003d new JsonAdaptedExpense(VALID_DESCRIPTION, VALID_AMOUNT, invalidTags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertThrows(IllegalValueException.class, adaptedExpense::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedRevenueTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static seedu.address.storage.JsonAdaptedRevenue.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.Amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.account.entry.Revenue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.testutil.RevenueBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "public class JsonAdaptedRevenueTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"a1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"bought cooking utensils\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final String VALID_AMOUNT \u003d \"1000.39\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d new RevenueBuilder().build().getTags().stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void toModelType_validRevenueDetails_returnsRevenue() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        Revenue modelRevenue \u003d new RevenueBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        JsonAdaptedRevenue adaptedRevenue \u003d new JsonAdaptedRevenue(modelRevenue);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(modelRevenue, adaptedRevenue.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        JsonAdaptedRevenue adaptedRevenue \u003d new JsonAdaptedRevenue(INVALID_DESCRIPTION, VALID_AMOUNT, VALID_TAGS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, adaptedRevenue::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        JsonAdaptedRevenue adaptedRevenue \u003d new JsonAdaptedRevenue(null, VALID_AMOUNT, VALID_TAGS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, adaptedRevenue::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        JsonAdaptedRevenue adaptedRevenue \u003d new JsonAdaptedRevenue(VALID_DESCRIPTION, INVALID_AMOUNT, VALID_TAGS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, adaptedRevenue::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        JsonAdaptedRevenue adaptedRevenue \u003d new JsonAdaptedRevenue(VALID_DESCRIPTION, null, VALID_TAGS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, adaptedRevenue::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void toModelType_invalidTag_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        JsonAdaptedRevenue adaptedRevenue \u003d new JsonAdaptedRevenue(VALID_DESCRIPTION, VALID_AMOUNT, invalidTags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertThrows(IllegalValueException.class, adaptedRevenue::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonCommonCentsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.CommonCents;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.ReadOnlyCommonCents;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "public class JsonCommonCentsStorageTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonCommonCentsStorageTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void readCommonCents_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readCommonCents(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private Optional\u003cReadOnlyCommonCents\u003e readCommonCents(String filePath) throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return new JsonCommonCentsStorage(Paths.get(filePath)).readCommonCents(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertFalse(readCommonCents(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCommonCents(\"notJsonFormatCommonCents.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void readCommonCents_invalidAccountCommonCents_throwDataConversionException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCommonCents(\"invalidAccountNameCommonCents.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void readCommonCents_invalidAndValidAccountCommonCents_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCommonCents("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            \"invalidAndValidAccountCommonCents.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void saveCommonCents_nullCommonCents_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCommonCents(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     * Saves {@code commonCents} at the specified {@code filePath}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private void saveCommonCents(ReadOnlyCommonCents commonCents, String filePath) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            new JsonCommonCentsStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "                    .saveCommonCents(commonCents, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void saveCommonCents_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCommonCents(new CommonCents(), null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 2,
      "lettuceman4": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableCommonCentsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.CommonCents;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.testutil.TypicalEntries;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "public class JsonSerializableCommonCentsTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        \"src\", \"test\", \"data\", \"JsonCommonCentsAccountListTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final Path TYPICAL_ACCOUNT_LIST_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        .resolve(\"typicalAccountListCommonCents.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final Path INVALID_ACCOUNT_LIST_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        .resolve(\"invalidAccountListCommonCents.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    private static final Path DUPLICATE_ACCOUNT_LIST_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        .resolve(\"duplicateAccountListCommonCents.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void toModelType_typicalAccountListFile_success() throws DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        JsonSerializableCommonCents dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ACCOUNT_LIST_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            JsonSerializableCommonCents.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        CommonCents commonCentsFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        CommonCents typicalCommonCents \u003d TypicalEntries.getTypicalCommonCents();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(commonCentsFromFile, typicalCommonCents);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void toModelType_invalidAccountListFile_throwsIllegalValueException() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        JsonSerializableCommonCents dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ACCOUNT_LIST_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            JsonSerializableCommonCents.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public void toModelType_duplicateAccount_throwsIllegalValueException() throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        JsonSerializableCommonCents dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ACCOUNT_LIST_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            JsonSerializableCommonCents.class).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableCommonCents.MESSAGE_DUPLICATE_ACCOUNT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "            dataFromFile::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        userPrefs.setCommonCentsFilePath(Paths.get(\"data/CommonCents.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lettuceman4": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.getTypicalCommonCents;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.CommonCents;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "import seedu.address.model.ReadOnlyCommonCents;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        JsonCommonCentsStorage commonCentsStorage \u003d new JsonCommonCentsStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        storageManager \u003d new StorageManager(commonCentsStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void commonCentsReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "         * {@link JsonCommonCentsStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonCommonCentsStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        CommonCents original \u003d getTypicalCommonCents();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        storageManager.saveCommonCents(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        ReadOnlyCommonCents retrieved \u003d storageManager.readCommonCents().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertEquals(original, new CommonCents(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void getCommonCentsFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        assertNotNull(storageManager.getCommonCentsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 6,
      "lettuceman4": 8,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ActiveAccountStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.ActiveAccount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.ReadOnlyAccount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Entry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Revenue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "public class ActiveAccountStub implements ActiveAccount {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void setActiveAccount(ReadOnlyAccount newActiveAccount) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setPreviousState() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public Optional\u003cActiveAccount\u003e getPreviousState() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ActiveAccount getCopy() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void returnToPreviousState() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean hasNoPreviousState() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void removePreviousState() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public void setName(Name name){}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public Account getAccount() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public boolean hasRevenue(Revenue revenue) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void deleteRevenue(Revenue target) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void addRevenue(Revenue revenue) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void setRevenue(Revenue target, Revenue editedRevenue) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void clearExpenses() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void clearRevenues() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public ObservableList\u003cRevenue\u003e getFilteredRevenueList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void updateFilteredRevenueList(Predicate\u003cRevenue\u003e predicate) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public double getTotalExpenses() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        return 0.00;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public double getTotalRevenue() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return 0.00;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public double getProfits() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "        return 0.00;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheoksuanne"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 39,
      "nicholas-gcc": 90,
      "jordanyoong": 10,
      "cheoksuanne": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditEntryDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.commons.core.category.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Entry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.entry.Revenue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": " * A utility class to help with building EditEntryDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "public class EditEntryDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    private EditEntryDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public EditEntryDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        descriptor \u003d new EditEntryDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public EditEntryDescriptorBuilder(EditEntryDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        this.descriptor \u003d new EditEntryDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     * Returns an {@code EditEntryDescriptor} with fields containing {@code entry}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public EditEntryDescriptorBuilder(Entry entry) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        descriptor \u003d new EditEntryDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        descriptor.setDescription(entry.getDescription());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        descriptor.setAmount(entry.getAmount());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        if (!entry.getTags().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            descriptor.setTags(entry.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        if (entry instanceof Expense) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            descriptor.setCategory(new Category(\"expense\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            assert(entry instanceof Revenue);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "            descriptor.setCategory(new Category(\"revenue\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     * Sets the {@code category} of the {@code EditEntryDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public EditEntryDescriptorBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        descriptor.setCategory(new Category(category));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     * Sets the {@code Description} of the {@code EditEntryDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public EditEntryDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     * Sets the {@code Amount} of the {@code EditEntryDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public EditEntryDescriptorBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        descriptor.setAmount(new Amount(amount));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditEntryDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public EditEntryDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public EditEntryDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholas-gcc": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EntryUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_KEYWORDS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.parser.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.AddAccountCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.DeleteAccountCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.EditAccountNameCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.logic.commands.SwitchAccountCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Entry;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Revenue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * A utility class for Expense/Revenue."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class EntryUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String EXPENSE_STRING \u003d \"expense\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final String REVENUE_STRING \u003d \"revenue\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns an add command string for adding the {@code entry}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static String getAddCommand(Entry entry) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getEntryDetails(entry);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     * Returns a delete command string for deleting first expense."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static String getDeleteExpenseCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ENTRY.getOneBased()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                + \" \" + PREFIX_CATEGORY + EXPENSE_STRING;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     * Returns a delete command string for deleting first revenue."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static String getDeleteRevenueCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ENTRY.getOneBased()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                + \" \" + PREFIX_CATEGORY + REVENUE_STRING;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     * Returns an edit command string for editing first expense."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public static String getValidEditExpenseCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        // replace the info of the 1st entry in the revenue list with that of PAY_RENT"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ENTRY.getOneBased()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + \" \" + getEntryDetails(TypicalEntries.PAY_RENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     * Returns an edit command string for editing first revenue."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public static String getValidEditRevenueCommand() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        // replace the info of the 1st entry in the revenue list with that of SELL_FLOWER_SEEDS"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ENTRY.getOneBased()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + \" \" + getEntryDetails(TypicalEntries.SELL_FLOWER_SEEDS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     * Returns a find command string for finding in expense list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public static String getValidFindExpenseCommand() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return FindCommand.COMMAND_WORD + \" \" + PREFIX_CATEGORY + EXPENSE_STRING"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + \" \" + PREFIX_KEYWORDS + \" \" + \"flowers food\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     * Returns a find command string for finding in revenue list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public static String getValidFindRevenueCommand() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return FindCommand.COMMAND_WORD + \" \" + PREFIX_CATEGORY + REVENUE_STRING"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "                + \" \" + PREFIX_KEYWORDS + \" \" + \"canvas\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     * Returns a find command string without category."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public static String getValidFindGeneralCommand() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return FindCommand.COMMAND_WORD + \" \" + PREFIX_KEYWORDS + \"rent flowers\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     * Returns a clear expense command string."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public static String getValidClearExpenseCommand() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return ClearCommand.COMMAND_WORD + \" \" + PREFIX_CATEGORY + EXPENSE_STRING;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     * Returns a clear revenue command string."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public static String getValidClearRevenueCommand() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return ClearCommand.COMMAND_WORD + \" \" + PREFIX_CATEGORY + REVENUE_STRING;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     * Returns an add account command string."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public static String getValidAddAccountCommand() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return AddAccountCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"newacc\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     * Returns an edit account command string."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public static String getValidEditAccountCommand() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return EditAccountNameCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"anotheracc\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     * Returns an delete account command string."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public static String getValidDeleteAccountCommand() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return DeleteAccountCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ENTRY.getOneBased();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     * Returns an switch account command string."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public static String getValidSwitchAccountCommand() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return SwitchAccountCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ENTRY.getOneBased();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns the part of command string for the given {@code entry}\u0027s details."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static String getEntryDetails(Entry entry) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        boolean isRevenue \u003d entry instanceof Revenue;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        String category \u003d isRevenue"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                ? \"revenue\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "                : \"expense\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        sb.append(PREFIX_CATEGORY + category + \" \");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + entry.getDescription().toString() + \" \");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        sb.append(PREFIX_AMOUNT + entry.getAmount().toString() + \" \");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        entry.getTags().stream().forEach("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 60,
      "nicholas-gcc": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExpenseBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Amount;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.util.SampleCommonCentsUtilData;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * A utility class to help with building Expense objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class ExpenseBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String DEFAULT_DESCRIPTION \u003d \"buying paint supplies\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String DEFAULT_AMOUNT \u003d \"131.73\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Creates a {@code ExpenseBuilder} with the default details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ExpenseBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Initializes the ExpenseBuilder with the data of {@code expenseToCopy}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ExpenseBuilder(Expense expenseToCopy) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        description \u003d expenseToCopy.getDescription();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        amount \u003d expenseToCopy.getAmount();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        tags \u003d expenseToCopy.getTags();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Sets the {@code Description} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ExpenseBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Sets the {@code Amount} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ExpenseBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Expense} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public ExpenseBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.tags \u003d SampleCommonCentsUtilData.getTagSet(tags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public Expense build() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return new Expense(description, amount, tags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.ReadOnlyCommonCents;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private List\u003cAccount\u003e accountList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public List\u003cAccount\u003e getAccountList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return accountList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public Path getCommonCentsFilePath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void setCommonCentsFilePath(Path commonCentsFilePath) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void setCommonCents(ReadOnlyCommonCents commonCents) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public ReadOnlyCommonCents getCommonCents() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public boolean hasAccount(Account account) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return accountList.contains(account);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void deleteAccount(Account target) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void addAccount(Account account) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        accountList.add(account);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void setAccount(Account target, Account editedAccount) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void setAccount(Account editedAccount) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public boolean hasNoAccount() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    };"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public ObservableList\u003cAccount\u003e getFilteredAccountList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    public void updateFilteredAccountList(Predicate\u003cAccount\u003e predicate) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholas-gcc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 15,
      "nicholas-gcc": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RevenueBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Amount;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Revenue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.util.SampleCommonCentsUtilData;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class RevenueBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String DEFAULT_DESCRIPTION \u003d \"buying paint supplies\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String DEFAULT_AMOUNT \u003d \"131.73\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Creates a {@code RevenueBuilder} with the default details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public RevenueBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Initializes the RevenueBuilder with the data of {@code revenueToCopy}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public RevenueBuilder(Revenue revenueToCopy) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        description \u003d revenueToCopy.getDescription();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        amount \u003d revenueToCopy.getAmount();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        tags \u003d revenueToCopy.getTags();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Sets the {@code Description} of the {@code Revenue} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public RevenueBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Sets the {@code Amount} of the {@code Revenue} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public RevenueBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Revenue} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public RevenueBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        this.tags \u003d SampleCommonCentsUtilData.getTagSet(tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public Revenue build() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return new Revenue(description, amount, tags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns the middle index of the entry in the {@code model}\u0027s account list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return Index.fromOneBased(model.getFilteredAccountList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns the last index of the account in the {@code model}\u0027s account list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return Index.fromOneBased(model.getFilteredAccountList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns the account in the {@code model}\u0027s account list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static Account getAccount(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return model.getFilteredAccountList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalEntries.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_EXPENSE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_REVENUE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_EXPENSE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_REVENUE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ROSES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SUNFLOWER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.CommonCents;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Expense;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "import seedu.address.model.account.entry.Revenue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " * A utility class containing a list of {@code Entry} objects to be used in tests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "public class TypicalEntries {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static final Expense BUY_FLOWER_POTS \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withDescription(\"bought flower pots\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withAmount(\"49.99\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withTags(\"tools\", \"29Sept\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static final Expense BUY_SHOVEL \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withDescription(\"bought shovel\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withAmount(\"20\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withTags(\"tools\", \"17Aug\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static final Expense PAY_RENT \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withDescription(\"paid rent\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withAmount(\"1000\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static final Revenue SELL_FLOWER_POTS \u003d new RevenueBuilder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withDescription(\"sold flower pots\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withAmount(\"99.99\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withTags(\"10sold\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static final Revenue SELL_FLOWER_SEEDS \u003d new RevenueBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withDescription(\"sold flower seed\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withAmount(\"30\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withTags(\"10sunflowerseeds\", \"5roseseeds\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static final Revenue SELL_TOOLS \u003d new RevenueBuilder()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withDescription(\"sold gardening tools\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withAmount(\"45.55\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withTags(\"shovel\", \"wateringCan\", \"sickle\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static final Expense BUY_STRING \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withDescription(\"Bought strings\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withAmount(\"9.75\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withTags(\"decoration\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static final Revenue SELL_HANDICRAFT \u003d new RevenueBuilder()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withDescription(\"Sold handicrafts\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withAmount(\"19.70\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withTags(\"plantDecorations\", \"potDecorations\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    // Manually added - Entries\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static final Expense BUY_ROSE_SEEDS \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_EXPENSE)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withAmount(VALID_AMOUNT_EXPENSE)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withTags(VALID_TAG_ROSES).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "    public static final Revenue SELL_SUNFLOWER \u003d new RevenueBuilder()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_REVENUE)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withAmount(VALID_AMOUNT_REVENUE)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .withTags(VALID_TAG_SUNFLOWER)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private static final String GENERAL_ACC_NAME \u003d \"General account\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    private TypicalEntries() {} // prevents instantiation"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns an {@code Account} with all the typical expenses and revenues."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static Account getTypicalAccount() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account acc \u003d new Account(new Name(GENERAL_ACC_NAME));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        for (Expense expense: getTypicalExpenses()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            acc.addExpense(expense);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        for (Revenue revenue: getTypicalRevenues()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "            acc.addRevenue(revenue);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return acc;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     * Returns an {@code CommonCents} with all the typical expenses and revenues."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static CommonCents getTypicalCommonCents() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        CommonCents cc \u003d new CommonCents();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        Account acc \u003d getTypicalAccount();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        cc.addAccount(acc);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "        return cc;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static List\u003cExpense\u003e getTypicalExpenses() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BUY_FLOWER_POTS, BUY_SHOVEL, PAY_RENT, BUY_ROSE_SEEDS));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static List\u003cRevenue\u003e getTypicalRevenues() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lettuceman4"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SELL_FLOWER_POTS, SELL_TOOLS, SELL_FLOWER_SEEDS, SELL_SUNFLOWER));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 97,
      "lettuceman4": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final Index INDEX_FIRST_ENTRY \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final Index INDEX_SECOND_ENTRY \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final Index INDEX_THIRD_ENTRY \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ziyang-98"
        },
        "content": "    public static final Index INDEX_TENTH_ENTRY \u003d Index.fromOneBased(10);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ziyang-98": 4,
      "-": 9
    }
  }
]
